# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/python@6.13.15)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Optional, Type, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import GenOpenKisClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_gen_open_kis_get_access_token_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/oauth2/tokenP"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_gen_open_kis_get_domestic_stock_quotations_price_request(  # pylint: disable=name-too-long
    *,
    fid_cond_mrkt_div_code: str,
    fid_input_iscd: str,
    tr_id: str = "FHKST01010100",
    personalseckey: Optional[str] = None,
    tr_cont: Optional[str] = None,
    custtype: Optional[str] = None,
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_addr: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-price"

    # Construct parameters
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query("fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str")
    _params["fid_input_iscd"] = _SERIALIZER.query("fid_input_iscd", fid_input_iscd, "str")

    # Construct headers
    if tr_id is not None:
        _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header("personalseckey", personalseckey, "str")
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header("phone_number", phone_number, "str")
    if ip_addr is not None:
        _headers["ip_addr"] = _SERIALIZER.header("ip_addr", ip_addr, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class GenOpenKisClientOperationsMixin(GenOpenKisClientMixinABC):

    @overload
    def get_access_token(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Get Access Token.

        Access Token 발급
        =================

        본인 계좌에 필요한 인증 절차로, 인증을 통해 접근 토큰을 부여받아 오픈API 활용이 가능합니다.

        :param body: Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "appkey": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appkey
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "appsecret": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appsecret
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "grant_type": "str"  # "uc778"uc99d"ubc29"uc2dd (client_credentials
                      "uace0"uc815). Required.
                }

                # response body for status code(s): 200
                response == {
                    "access_token": "str",  # Optional. OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token ex)
                      "eyJ0eXUxMiJ9.eyJz"u2026..................................."   *
                      "uc77c"ubc18"uac1c"uc778"uace0"uac1d/"uc77c"ubc18"ubc95"uc778"uace0"uac1d   .
                      Access token "uc720"ud6a8"uae30"uac04 1"uc77c   ..
                      "uc77c"uc815"uc2dc"uac04(6"uc2dc"uac04) "uc774"ub0b4"uc5d0 "uc7ac"ud638"ucd9c
                      "uc2dc"uc5d0"ub294 "uc9c1"uc804 "ud1a0"ud070"uac12"uc744 "ub9ac"ud134   . OAuth
                      2.0"uc758 Client Credentials Grant "uc808"ucc28"ub97c "uc900"uc6a9  *
                      "uc81c"ud734"ubc95"uc778   . Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4
                      . Refresh token "uc720"ud6a8"uae30"uac04 1"ub144   . OAuth 2.0"uc758
                      Authorization Code Grant "uc808"ucc28"ub97c "uc900"uc6a9.
                    "access_token_token_expire": "2020-02-20 00:00:00",  # Optional. Access token
                      "ub9cc"ub8cc"uc2dc"uac04 ("ub144:"uc6d4:"uc77c "uc2dc:"ubd84:"ucd08).
                    "expires_in": 0,  # Optional. Access token "ub9cc"ub8cc"uc2dc"uac04 ("ucd08).
                    "token_type": "str"  # Optional. "uc811"uadfc"ud1a0"ud070"uc720"ud615 (Bearer
                      "uace0"uc815).
                }
        """

    @overload
    def get_access_token(
        self, body: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Get Access Token.

        Access Token 발급
        =================

        본인 계좌에 필요한 인증 절차로, 인증을 통해 접근 토큰을 부여받아 오픈API 활용이 가능합니다.

        :param body: Default value is None.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "access_token": "str",  # Optional. OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token ex)
                      "eyJ0eXUxMiJ9.eyJz"u2026..................................."   *
                      "uc77c"ubc18"uac1c"uc778"uace0"uac1d/"uc77c"ubc18"ubc95"uc778"uace0"uac1d   .
                      Access token "uc720"ud6a8"uae30"uac04 1"uc77c   ..
                      "uc77c"uc815"uc2dc"uac04(6"uc2dc"uac04) "uc774"ub0b4"uc5d0 "uc7ac"ud638"ucd9c
                      "uc2dc"uc5d0"ub294 "uc9c1"uc804 "ud1a0"ud070"uac12"uc744 "ub9ac"ud134   . OAuth
                      2.0"uc758 Client Credentials Grant "uc808"ucc28"ub97c "uc900"uc6a9  *
                      "uc81c"ud734"ubc95"uc778   . Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4
                      . Refresh token "uc720"ud6a8"uae30"uac04 1"ub144   . OAuth 2.0"uc758
                      Authorization Code Grant "uc808"ucc28"ub97c "uc900"uc6a9.
                    "access_token_token_expire": "2020-02-20 00:00:00",  # Optional. Access token
                      "ub9cc"ub8cc"uc2dc"uac04 ("ub144:"uc6d4:"uc77c "uc2dc:"ubd84:"ucd08).
                    "expires_in": 0,  # Optional. Access token "ub9cc"ub8cc"uc2dc"uac04 ("ucd08).
                    "token_type": "str"  # Optional. "uc811"uadfc"ud1a0"ud070"uc720"ud615 (Bearer
                      "uace0"uc815).
                }
        """

    @distributed_trace
    def get_access_token(self, body: Optional[Union[JSON, IO[bytes]]] = None, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get Access Token.

        Access Token 발급
        =================

        본인 계좌에 필요한 인증 절차로, 인증을 통해 접근 토큰을 부여받아 오픈API 활용이 가능합니다.

        :param body: Is either a JSON type or a IO[bytes] type. Default value is None.
        :type body: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "appkey": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appkey
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "appsecret": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appsecret
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "grant_type": "str"  # "uc778"uc99d"ubc29"uc2dd (client_credentials
                      "uace0"uc815). Required.
                }

                # response body for status code(s): 200
                response == {
                    "access_token": "str",  # Optional. OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token ex)
                      "eyJ0eXUxMiJ9.eyJz"u2026..................................."   *
                      "uc77c"ubc18"uac1c"uc778"uace0"uac1d/"uc77c"ubc18"ubc95"uc778"uace0"uac1d   .
                      Access token "uc720"ud6a8"uae30"uac04 1"uc77c   ..
                      "uc77c"uc815"uc2dc"uac04(6"uc2dc"uac04) "uc774"ub0b4"uc5d0 "uc7ac"ud638"ucd9c
                      "uc2dc"uc5d0"ub294 "uc9c1"uc804 "ud1a0"ud070"uac12"uc744 "ub9ac"ud134   . OAuth
                      2.0"uc758 Client Credentials Grant "uc808"ucc28"ub97c "uc900"uc6a9  *
                      "uc81c"ud734"ubc95"uc778   . Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4
                      . Refresh token "uc720"ud6a8"uae30"uac04 1"ub144   . OAuth 2.0"uc758
                      Authorization Code Grant "uc808"ucc28"ub97c "uc900"uc6a9.
                    "access_token_token_expire": "2020-02-20 00:00:00",  # Optional. Access token
                      "ub9cc"ub8cc"uc2dc"uac04 ("ub144:"uc6d4:"uc77c "uc2dc:"ubd84:"ucd08).
                    "expires_in": 0,  # Optional. Access token "ub9cc"ub8cc"uc2dc"uac04 ("ucd08).
                    "token_type": "str"  # Optional. "uc811"uadfc"ud1a0"ud070"uc720"ud615 (Bearer
                      "uace0"uc815).
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_gen_open_kis_get_access_token_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_quotations_price(
        self,
        *,
        fid_cond_mrkt_div_code: str,
        fid_input_iscd: str,
        tr_id: str = "FHKST01010100",
        personalseckey: Optional[str] = None,
        tr_cont: Optional[str] = None,
        custtype: Optional[str] = None,
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_addr: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 시세조회.

        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드
         =======================

         J : 주식, ETF, ETN, W: ELW. Required.
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_input_iscd: FID 입력 종목코드
         =================

         종목번호 (6자리)
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword tr_id: 거래ID
         ======

         [실전투자/모의투자]
         FHKST01010100 : 주식현재가 시세. Default value is "FHKST01010100".
        :paramtype tr_id: str
        :keyword personalseckey: 고객식별키
         ==========

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부
         ==============

         공백 : 초기 조회
         N : 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is None.
        :paramtype tr_cont: str
        :keyword custtype: 고객타입
         ========

         B : 법인
         P : 개인. Default value is None.
        :paramtype custtype: str
        :keyword seq_no: 일련번호
         ========

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소
         ======

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호
         ==========

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_addr: 접속 단말 공인 IP
         =================

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_addr: str
        :keyword hashkey: 해쉬키
         ======

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc138"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "aspr_unit": "str",  # Optional. "ud638"uac00"ub2e8"uc704.
                        "bps": "str",  # Optional. BPS.
                        "bstp_kor_isnm": "str",  # Optional. "uc5c5"uc885 "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "clpr_rang_cont_yn": "str",  # Optional. "uc885"uac00 "ubc94"uc704
                          "uc5f0"uc7a5 "uc5ec"ubd80.
                        "cpfn": "str",  # Optional. "uc790"ubcf8"uae08.
                        "crdt_able_yn": "str",  # Optional. "uc2e0"uc6a9 "uac00"ub2a5
                          "uc5ec"ubd80.
                        "d250_hgpr": "str",  # Optional. 250"uc77c "ucd5c"uace0"uac00.
                        "d250_hgpr_date": "str",  # Optional. 250"uc77c "ucd5c"uace0"uac00
                          "uc77c"uc790.
                        "d250_hgpr_vrss_prpr_rate": "str",  # Optional. 250"uc77c
                          "ucd5c"uace0"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "d250_lwpr": "str",  # Optional. 250"uc77c "ucd5c"uc800"uac00.
                        "d250_lwpr_date": "str",  # Optional. 250"uc77c "ucd5c"uc800"uac00
                          "uc77c"uc790.
                        "d250_lwpr_vrss_prpr_rate": "str",  # Optional. 250"uc77c
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "dryy_hgpr_date": "str",  # Optional. "uc5f0"uc911 "ucd5c"uace0"uac00
                          "uc77c"uc790.
                        "dryy_lwpr_date": "str",  # Optional. "uc5f0"uc911 "ucd5c"uc800"uac00
                          "uc77c"uc790.
                        "dryy_lwpr_vrss_prpr_rate": "str",  # Optional. "uc5f0"uc911
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "elw_pblc_yn": "str",  # Optional. ELW "ubc1c"ud589 "uc5ec"ubd80.
                        "eps": "str",  # Optional. EPS.
                        "fcam_cnnm": "str",  # Optional. "uc561"uba74"uac00
                          "ud1b5"ud654"uba85.
                        "frgn_ntby_qty": "str",  # Optional. "uc678"uad6d"uc778
                          "uc21c"ub9e4"uc218 "uc218"ub7c9.
                        "grmn_rate_cls_code": "str",  # Optional. "ubcf4"uc99d"uae08
                          "ube44"uc728 "uad6c"ubd84 "ucf54"ub4dc =====================
                          "ud55c"uad6d"ud22c"uc790 "uc99d"uac70"uae08"ube44"uc728 (marg_rate
                          "ucc38"uace0) 40 : 20%, 30%, 40% 50 : 50% 60 : 60%.
                        "hts_avls": "str",  # Optional. HTS "uc2dc"uac00"ucd1d"uc561.
                        "hts_deal_qty_unit_val": "str",  # Optional. HTS "ub9e4"ub9e4
                          "uc218"ub7c9 "ub2e8"uc704 "uac12.
                        "hts_frgn_ehrt": "str",  # Optional. HTS "uc678"uad6d"uc778
                          "uc18c"uc9c4"uc728.
                        "invt_caful_yn": "str",  # Optional.
                          "ud22c"uc790"uc720"uc758"uc5ec"ubd80.
                        "iscd_stat_cls_code": "str",  # Optional. "uc885"ubaa9 "uc0c1"ud0dc
                          "uad6c"ubd84 "ucf54"ub4dc ===================  00 : "uadf8"uc678 51 :
                          "uad00"ub9ac"uc885"ubaa9 52 : "ud22c"uc790"uc704"ud5d8 53 :
                          "ud22c"uc790"uacbd"uace0 54 : "ud22c"uc790"uc8fc"uc758 55 :
                          "uc2e0"uc6a9"uac00"ub2a5 57 : "uc99d"uac70"uae08 100% 58 :
                          "uac70"ub798"uc815"uc9c0 59 : "ub2e8"uae30"uacfc"uc5f4.
                        "last_ssts_cntg_qty": "str",  # Optional. "ucd5c"uc885
                          "uacf5"ub9e4"ub3c4 "uccb4"uacb0 "uc218"ub7c9.
                        "lstn_stcn": "str",  # Optional. "uc0c1"uc7a5 "uc8fc"uc218.
                        "marg_rate": "str",  # Optional. "uc99d"uac70"uae08 "ube44"uc728.
                        "mrkt_warn_cls_code": "str",  # Optional.
                          "uc2dc"uc7a5"uacbd"uace0"ucf54"ub4dc.
                        "new_hgpr_lwpr_cls_code": "str",  # Optional. "uc2e0 "uace0"uac00
                          "uc800"uac00 "uad6c"ubd84 "ucf54"ub4dc ======================
                          "uc870"ud68c"ud558"ub294 "uc885"ubaa9"uc774 "uc2e0"uace0/"uc2e0"uc800"uc5d0
                          "ub3c4"ub2ec"ud588"uc744 "uacbd"uc6b0"uc5d0"ub9cc "uc870"ud68c"ub428.
                        "oprc_rang_cont_yn": "str",  # Optional. "uc2dc"uac00 "ubc94"uc704
                          "uc5f0"uc7a5 "uc5ec"ubd80.
                        "ovtm_vi_cls_code": "str",  # Optional.
                          "uc2dc"uac04"uc678"ub2e8"uc77c"uac00VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc.
                        "pbt": "str",  # Optional. PBR.
                        "per": "str",  # Optional. PER.
                        "pgtr_ntby_qty": "str",  # Optional.
                          "ud504"ub85c"uadf8"ub7a8"ub9e4"ub9e4 "uc21c"ub9e4"uc218 "uc218"ub7c9.
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638 ==============  1 : "uc0c1"ud55c 2 : "uc0c1"uc2b9 3 :
                          "ubcf4"ud569 4 : "ud558"ud55c 5 : "ud558"ub77d.
                        "prdy_vrss_vol_rate": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "uac70"ub798"ub7c9 "ube44"uc728 =====================
                          "uc8fc"uc2dd"ud604"uc7ac"uac00 "uc77c"uc790"ubcc4 API "uc751"ub2f5"uac12
                          "uc0ac"uc6a9.
                        "rprs_mrkt_kor_name": "str",  # Optional. "ub300"ud45c "uc2dc"uc7a5
                          "ud55c"uae00 "uba85.
                        "rstc_wdth_prc": "str",  # Optional. "uc81c"ud55c "ud3ed
                          "uac00"uaca9.
                        "short_over_yn": "str",  # Optional.
                          "ub2e8"uae30"uacfc"uc5f4"uc5ec"ubd80.
                        "sltr_yn": "str",  # Optional. "uc815"ub9ac"ub9e4"ub9e4"uc5ec"ubd80.
                        "ssts_yn": "str",  # Optional.
                          "uacf5"ub9e4"ub3c4"uac00"ub2a5"uc5ec"ubd80.
                        "stac_month": "str",  # Optional. "uacb0"uc0b0 "uc6d4.
                        "stck_dryy_hgpr": "str",  # Optional. "uc8fc"uc2dd "uc5f0"uc911
                          "ucd5c"uace0"uac00.
                        "stck_dryy_lwpr": "str",  # Optional. "uc8fc"uc2dd "uc5f0"uc911
                          "ucd5c"uc800"uac00.
                        "stck_fcam": "str",  # Optional. "uc8fc"uc2dd "uc561"uba74"uac00.
                        "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uace0"uac00.
                        "stck_llam": "str",  # Optional. "uc8fc"uc2dd "ud558"ud55c"uac00.
                        "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uc800"uac00.
                        "stck_mxpr": "str",  # Optional. "uc8fc"uc2dd "uc0c1"ud55c"uac00.
                        "stck_oprc": "str",  # Optional. "uc8fc"uc2dd "uc2dc"uac00.
                        "stck_prpr": "str",  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                        "stck_sdpr": "str",  # Optional. "uc8fc"uc2dd "uae30"uc900"uac00.
                        "stck_shrn_iscd": "str",  # Optional. "uc8fc"uc2dd "ub2e8"ucd95
                          "uc885"ubaa9"ucf54"ub4dc.
                        "stck_sspr": "str",  # Optional. "uc8fc"uc2dd "ub300"uc6a9"uac00.
                        "temp_stop_yn": "str",  # Optional. "uc784"uc2dc "uc815"uc9c0
                          "uc5ec"ubd80.
                        "vi_cls_code": "str",  # Optional.
                          VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc.
                        "vol_tnrt": "str",  # Optional. "uac70"ub798"ub7c9
                          "ud68c"uc804"uc728.
                        "w52_hgpr": "str",  # Optional. 52"uc8fc"uc77c "ucd5c"uace0"uac00.
                        "w52_hgpr_date": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uace0"uac00 "uc77c"uc790.
                        "w52_hgpr_vrss_prpr_ctrt": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uace0"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ub300"ube44.
                        "w52_lwpr": "str",  # Optional. 52"uc8fc"uc77c "ucd5c"uc800"uac00.
                        "w52_lwpr_date": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uc800"uac00 "uc77c"uc790.
                        "w52_lwpr_vrss_prpr_ctrt": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ub300"ube44.
                        "wghn_avrg_stck_prc": "str",  # Optional. "uac00"uc911 "ud3c9"uade0
                          "uc8fc"uc2dd "uac00"uaca9.
                        "whol_loan_rmnd_rate": "str"  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc794"uace0 "ube44"uc728.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80
                      ==============  0 : "uc131"uacf5, 0 "uc774"uc678"uc758 "uac12 : "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_quotations_price_request(
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_input_iscd=fid_input_iscd,
            tr_id=tr_id,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_addr=ip_addr,
            hashkey=hashkey,
            gt_uid=gt_uid,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["tr_id"] = self._deserialize("str", response.headers.get("tr_id"))
        response_headers["tr_cont"] = self._deserialize("str", response.headers.get("tr_cont"))
        response_headers["gt_uid"] = self._deserialize("str", response.headers.get("gt_uid"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
