# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/python@6.13.15)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, AsyncIterator, Callable, Dict, Optional, Type, TypeVar, cast

from azure.core.exceptions import ClientAuthenticationError
from azure.core.exceptions import HttpResponseError
from azure.core.exceptions import ResourceExistsError
from azure.core.exceptions import ResourceNotFoundError
from azure.core.exceptions import ResourceNotModifiedError
from azure.core.exceptions import map_error
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ..._operations._operations import (
    build_gen_open_dart_get_corporate_document_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_account_auditor_name_and_opinion_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_account_auditor_non_audit_service_conclusion_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_allocation_matter_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_audit_service_conclusion_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_conditional_capital_not_reimbursed_balance_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_corporate_bond_not_reimbursed_balance_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_debt_securities_issue_accomplishment_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_director_audit_all_mending_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_director_audit_all_mending_status_mending_payment_amount_type_classification_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_director_audit_all_mending_status_shareholders_general_meeting_confirm_amount_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_director_auditor_individual_mending_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_employee_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_enterprises_bill_not_reimbursed_balance_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_executive_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_increase_decrease_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_individual_by_pay_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_largest_shareholder_change_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_largest_shareholder_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_minority_shareholders_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_new_capital_securities_not_reimbursed_balance_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_outer_corporate_investment_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_outside_director_change_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_private_equity_capital_use_details_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_public_equity_capital_use_details_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_short_term_bond_not_reimbursed_balance_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_stock_total_quantity_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_regular_key_treasury_shares_acquisition_disposal_status_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_share_executive_major_stock_request,
)
from ..._operations._operations import (
    build_gen_open_dart_get_share_largest_shareholder_stock_request,
)
from ..._operations._operations import build_gen_open_dart_get_corporate_code_request
from ..._operations._operations import build_gen_open_dart_get_corporate_company_request
from ..._operations._operations import build_gen_open_dart_get_corporate_list_request
from .._vendor import GenOpenDartClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import (
        MutableMapping,  # type: ignore  # pylint: disable=ungrouped-imports
    )
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]


class GenOpenDartClientOperationsMixin(
    GenOpenDartClientMixinABC
):  # pylint: disable=too-many-public-methods

    @distributed_trace_async
    async def get_corporate_list(
        self,
        *,
        bgn_de: Optional[str] = None,
        end_de: Optional[str] = None,
        corp_code: Optional[str] = None,
        last_reprt_at: str = "N",
        pblntf_ty: Optional[str] = None,
        pblntf_detail_ty: Optional[str] = None,
        corp_cls: Optional[str] = None,
        sort: str = "date",
        sort_mth: str = "desc",
        page_no: int = 1,
        page_count: int = 10,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """공시검색.

        공시 유형별, 회사별, 날짜별 등 여러가지 조건으로 공시보고서 검색기능을 제공합니다.

        :keyword bgn_de: 시작일

         검색시작 접수일자(YYYYMMDD):code:`<br/>`
         1) 기본값 : 종료일(end_de):code:`<br/>`
         2) 고유번호(corp_code)가 없는 경우 검색기간은 3개월로 제한. Default value is None.
        :paramtype bgn_de: str
        :keyword end_de: 종료일

         검색종료 접수일자(YYYYMMDD)
         1) 기본값 : 당일. Default value is None.
        :paramtype end_de: str
        :keyword corp_code: 고유번호

         공시대상회사의 고유번호(8자리). Default value is None.
        :paramtype corp_code: str
        :keyword last_reprt_at: 최종보고서 검색여부

         최종보고서만 검색여부(Y or N)
         1) 기본값 : N(정정이 있는 경우 최종정정만 검색). Known values are: "Y" and "N". Default value is "N".
        :paramtype last_reprt_at: str
        :keyword pblntf_ty: 공시유형

         A : 정기공시:code:`<br/>`
         B : 주요사항보고:code:`<br/>`
         C : 발행공시:code:`<br/>`
         D : 지분공시:code:`<br/>`
         E : 기타공시:code:`<br/>`
         F : 외부감사관련:code:`<br/>`
         G : 펀드공시:code:`<br/>`
         H : 자산유동화:code:`<br/>`
         I : 거래소공시:code:`<br/>`
         J : 공정위공시. Known values are: "A", "B", "C", "D", "E", "F", "G", "H", "I", and "J". Default
         value is None.
        :paramtype pblntf_ty: str
        :keyword pblntf_detail_ty: 공시상세유형


         * A001 : 사업보고서:code:`<br/>`
         * A002 : 반기보고서:code:`<br/>`
         * A003 : 분기보고서:code:`<br/>`
         * A004 : 등록법인결산서류(자본시장법이전):code:`<br/>`
         * A005 : 소액공모법인결산서류:code:`<br/>`
         * B001 : 주요사항보고서:code:`<br/>`
         * B002 : 주요경영사항신고(자본시장법 이전):code:`<br/>`
         * B003 : 최대주주등과의거래신고(자본시장법 이전):code:`<br/>`
         * C001 : 증권신고(지분증권):code:`<br/>`
         * C002 : 증권신고(채무증권):code:`<br/>`
         * C003 : 증권신고(파생결합증권):code:`<br/>`
         * C004 : 증권신고(합병등):code:`<br/>`
         * C005 : 증권신고(기타):code:`<br/>`
         * C006 : 소액공모(지분증권):code:`<br/>`
         * C007 : 소액공모(채무증권):code:`<br/>`
         * C008 : 소액공모(파생결합증권):code:`<br/>`
         * C009 : 소액공모(합병등):code:`<br/>`
         * C010 : 소액공모(기타):code:`<br/>`
         * C011 : 호가중개시스템을통한소액매출:code:`<br/>`
         * D001 : 주식등의대량보유상황보고서:code:`<br/>`
         * D002 : 임원ㆍ주요주주특정증권등소유상황보고서:code:`<br/>`
         * D003 : 의결권대리행사권유:code:`<br/>`
         * D004 : 공개매수:code:`<br/>`
         * E001 : 자기주식취득/처분:code:`<br/>`
         * E002 : 신탁계약체결/해지:code:`<br/>`
         * E003 : 합병등종료보고서:code:`<br/>`
         * E004 : 주식매수선택권부여에관한신고:code:`<br/>`
         * E005 : 사외이사에관한신고:code:`<br/>`
         * E006 : 주주총회소집보고서:code:`<br/>`
         * E007 : 시장조성/안정조작:code:`<br/>`
         * E008 : 합병등신고서(자본시장법 이전):code:`<br/>`
         * E009 : 금융위등록/취소(자본시장법 이전):code:`<br/>`
         * F001 : 감사보고서:code:`<br/>`
         * F002 : 연결감사보고서:code:`<br/>`
         * F003 : 결합감사보고서:code:`<br/>`
         * F004 : 회계법인사업보고서:code:`<br/>`
         * F005 : 감사전재무제표미제출신고서:code:`<br/>`
         * G001 : 증권신고(집합투자증권-신탁형):code:`<br/>`
         * G002 : 증권신고(집합투자증권-회사형):code:`<br/>`
         * G003 : 증권신고(집합투자증권-합병):code:`<br/>`
         * H001 : 자산유동화계획/양도등록:code:`<br/>`
         * H002 : 사업/반기/분기보고서:code:`<br/>`
         * H003 : 증권신고(유동화증권등):code:`<br/>`
         * H004 : 채권유동화계획/양도등록:code:`<br/>`
         * H005 : 자산유동화관련중요사항발생등보고:code:`<br/>`
         * H006 : 주요사항보고서:code:`<br/>`
         * I001 : 수시공시:code:`<br/>`
         * I002 : 공정공시:code:`<br/>`
         * I003 : 시장조치/안내:code:`<br/>`
         * I004 : 지분공시:code:`<br/>`
         * I005 : 증권투자회사:code:`<br/>`
         * I006 : 채권공시:code:`<br/>`
         * J001 : 대규모내부거래관련:code:`<br/>`
         * J002 : 대규모내부거래관련(구):code:`<br/>`
         * J004 : 기업집단현황공시:code:`<br/>`
         * J005 : 비상장회사중요사항공시:code:`<br/>`
         * J006 : 기타공정위공시:code:`<br/>`
         * J008 : 대규모내부거래관련(공익법인용):code:`<br/>`
         * J009 : 하도급대금결제조건공시. Known values are: "A001", "A002", "A003", "A004", "A005", "B001",
         "B002", "B003", "C001", "C002", "C003", "C004", "C005", "C006", "C007", "C008", "C009", "C010",
         "C011", "D001", "D002", "D003", "D004", "E001", "E002", "E003", "E004", "E005", "E006", "E007",
         "E008", "E009", "F001", "F002", "F003", "F004", "F005", "G001", "G002", "G003", "H001", "H002",
         "H003", "H004", "H005", "H006", "I001", "I002", "I003", "I004", "I005", "I006", "J001", "J002",
         "J004", "J005", "J006", "J008", and "J009". Default value is None.
        :paramtype pblntf_detail_ty: str
        :keyword corp_cls: 법인구분


         * Y : 유가증권시장:code:`<br/>`
         * K : 코스닥:code:`<br/>`
         * N : 코넥스:code:`<br/>`
         * E : 기타:code:`<br/>`
           ※ 없으면 전체조회, 복수조건 불가. Known values are: "Y", "K", "N", and "E". Default value is None.
        :paramtype corp_cls: str
        :keyword sort: 정렬


         * date : 접수일자:code:`<br/>`
         * crp : 회사명:code:`<br/>`
         * rpt : 보고서명:code:`<br/>`
           ※ 기본값 : date. Known values are: "date", "crp", and "rpt". Default value is "date".
        :paramtype sort: str
        :keyword sort_mth: 정렬방법


         * asc : 오름차순:code:`<br/>`
         * desc : 내림차순:code:`<br/>`
           ※ 기본값 : desc. Known values are: "asc" and "desc". Default value is "desc".
        :paramtype sort_mth: str
        :keyword page_no: 페이지 번호(1~n):code:`<br/>`
         ※ 기본값 : 1. Default value is 1.
        :paramtype page_no: int
        :keyword page_count: 페이지 별 건수(1~100):code:`<br/>`
         ※ 기본값 : 10:code:`<br/>`
         ※ 최대값 : 100. Default value is 10.
        :paramtype page_count: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84   * Y :
                                  "uc720"uac00"uc99d"uad8c"uc2dc"uc7a5:code:`<br/>` * K :
                                  "ucf54"uc2a4"ub2e5:code:`<br/>` * N : "ucf54"ub125"uc2a4:code:`<br/>`
                                  * E : "uae30"ud0c0:code:`<br/>`.
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uc885"ubaa9"uba85("ubc95"uc778"uba85):code:`<br/>`
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uc885"ubaa9"uba85("uc0c1"uc7a5"uc0ac) "ub610"ub294
                                  "ubc95"uc778"uba85("uae30"ud0c0"ubc95"uc778).
                                "flr_nm": "str",  # Optional. "uacf5"uc2dc
                                  "uc81c"ucd9c"uc778"uba85.
                                "rcept_dt": "str",  # Optional. "uacf5"uc2dc
                                  "uc811"uc218"uc77c"uc790(YYYYMMDD).
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "report_nm": "str",  # Optional.
                                  "ubcf4"uace0"uc11c"uba85
                                  "uacf5"uc2dc"uad6c"ubd84+"ubcf4"uace0"uc11c"uba85+"uae30"ud0c0"uc815"ubcf4:code:`<br/>`
                                  ["uae30"uc7ac"uc815"uc815] : "ubcf8
                                  "ubcf4"uace0"uc11c"uba85"uc73c"ub85c "uc774"ubbf8 "uc81c"ucd9c"ub41c
                                  "ubcf4"uace0"uc11c"uc758 "uae30"uc7ac"ub0b4"uc6a9"uc774
                                  "ubcc0"uacbd"ub418"uc5b4 "uc81c"ucd9c"ub41c "uac83"uc784:code:`<br/>`
                                  ["ucca8"ubd80"uc815"uc815] : "ubcf8
                                  "ubcf4"uace0"uc11c"uba85"uc73c"ub85c "uc774"ubbf8 "uc81c"ucd9c"ub41c
                                  "ubcf4"uace0"uc11c"uc758 "ucca8"ubd80"ub0b4"uc6a9"uc774
                                  "ubcc0"uacbd"ub418"uc5b4 "uc81c"ucd9c"ub41c "uac83"uc784:code:`<br/>`
                                  ["ucca8"ubd80"ucd94"uac00] : "ubcf8
                                  "ubcf4"uace0"uc11c"uba85"uc73c"ub85c "uc774"ubbf8 "uc81c"ucd9c"ub41c
                                  "ubcf4"uace0"uc11c"uc758 "ucca8"ubd80"uc11c"ub958"uac00
                                  "ucd94"uac00"ub418"uc5b4 "uc81c"ucd9c"ub41c "uac83"uc784:code:`<br/>`
                                  ["ubcc0"uacbd"ub4f1"ub85d] : "ubcf8
                                  "ubcf4"uace0"uc11c"uba85"uc73c"ub85c "uc774"ubbf8 "uc81c"ucd9c"ub41c
                                  "ubcf4"uace0"uc11c"uc758 "uc720"ub3d9"ud654"uacc4"ud68d"uc774
                                  "ubcc0"uacbd"ub418"uc5b4 "uc81c"ucd9c"ub41c "uac83"uc784:code:`<br/>`
                                  ["uc5f0"uc7a5"uacb0"uc815] : "ubcf8
                                  "ubcf4"uace0"uc11c"uba85"uc73c"ub85c "uc774"ubbf8 "uc81c"ucd9c"ub41c
                                  "ubcf4"uace0"uc11c"uc758 "uc2e0"ud0c1"uacc4"uc57d"uc774
                                  "uc5f0"uc7a5"ub418"uc5b4 "uc81c"ucd9c"ub41c "uac83"uc784:code:`<br/>`
                                  ["ubc1c"ud589"uc870"uac74"ud655"uc815] : "ubcf8
                                  "ubcf4"uace0"uc11c"uba85"uc73c"ub85c "uc774"ubbf8 "uc81c"ucd9c"ub41c
                                  "ubcf4"uace0"uc11c"uc758 "uc720"uac00"uc99d"uad8c
                                  "ubc1c"ud589"uc870"uac74"uc774 "ud655"uc815"ub418"uc5b4
                                  "uc81c"ucd9c"ub41c "uac83"uc784:code:`<br/>`
                                  ["uc815"uc815"uba85"ub839"ubd80"uacfc] : "ubcf8
                                  "ubcf4"uace0"uc11c"uc5d0 "ub300"ud558"uc5ec
                                  "uae08"uc735"uac10"ub3c5"uc6d0"uc774 "uc815"uc815"uba85"ub839"uc744
                                  "ubd80"uacfc"ud55c "uac83"uc784:code:`<br/>`
                                  ["uc815"uc815"uc81c"ucd9c"uc694"uad6c] : "ubcf8
                                  "ubcf4"uace0"uc11c"uc5d0 "ub300"ud558"uc5ec
                                  "uae08"uc735"uac10"ub3c5"uc6d0"uc774
                                  "uc815"uc815"uc81c"ucd9c"uc694"uad6c"uc744 "ubd80"uacfc"ud55c
                                  "uac83"uc784.
                                "rm": "str",  # Optional. "ube44"uace0
                                  "uc870"ud569"ub41c "ubb38"uc790"ub85c "uac01"uac01"uc740
                                  "uc544"ub798"uc640 "uac19"uc740 "uc758"ubbf8"uac00
                                  "uc788"uc74c:code:`<br/>`   * "uc720 : "ubcf8
                                  "uacf5"uc2dc"uc0ac"ud56d"uc740 "ud55c"uad6d"uac70"ub798"uc18c
                                  "uc720"uac00"uc99d"uad8c"uc2dc"uc7a5"ubcf8"ubd80
                                  "uc18c"uad00"uc784:code:`<br/>` * "ucf54 : "ubcf8
                                  "uacf5"uc2dc"uc0ac"ud56d"uc740 "ud55c"uad6d"uac70"ub798"uc18c
                                  "ucf54"uc2a4"ub2e5"uc2dc"uc7a5"ubcf8"ubd80
                                  "uc18c"uad00"uc784:code:`<br/>` * "ucc44 : "ubcf8 "ubb38"uc11c"ub294
                                  "ud55c"uad6d"uac70"ub798"uc18c "ucc44"uad8c"uc0c1"uc7a5"ubc95"uc778
                                  "uacf5"uc2dc"uc0ac"ud56d"uc784:code:`<br/>` * "ub125 : "ubcf8
                                  "ubb38"uc11c"ub294 "ud55c"uad6d"uac70"ub798"uc18c
                                  "ucf54"ub125"uc2a4"uc2dc"uc7a5 "uc18c"uad00"uc784:code:`<br/>` *
                                  "uacf5 : "ubcf8 "uacf5"uc2dc"uc0ac"ud56d"uc740
                                  "uacf5"uc815"uac70"ub798"uc704"uc6d0"ud68c
                                  "uc18c"uad00"uc784:code:`<br/>` * "uc5f0 : "ubcf8
                                  "ubcf4"uace0"uc11c"ub294 "uc5f0"uacb0"ubd80"ubd84"uc744
                                  "ud3ec"ud568"ud55c "uac83"uc784:code:`<br/>` * "uc815 : "ubcf8
                                  "ubcf4"uace0"uc11c "uc81c"ucd9c "ud6c4 "uc815"uc815"uc2e0"uace0"uac00
                                  "uc788"uc73c"ub2c8 "uad00"ub828 "ubcf4"uace0"uc11c"ub97c
                                  "ucc38"uc870"ud558"uc2dc"uae30 "ubc14"ub78c:code:`<br/>` * "ucca0 :
                                  "ubcf8 "ubcf4"uace0"uc11c"ub294
                                  "ucca0"ud68c("uac04"uc8fc)"ub418"uc5c8"uc73c"ub2c8 "uad00"ub828
                                  "ucca0"ud68c"uc2e0"uace0"uc11c("ucca0"ud68c"uac04"uc8fc"uc548"ub0b4)"ub97c
                                  "ucc38"uace0"ud558"uc2dc"uae30 "ubc14"ub78c.
                                "stock_code": "str"  # Optional.
                                  "uc0c1"uc7a5"ud68c"uc0ac"uc758
                                  "uc885"ubaa9"ucf54"ub4dc(6"uc790"ub9ac).
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "page_count": 0,  # Optional. "ud398"uc774"uc9c0 "ubcc4 "uac74"uc218.
                        "page_no": 0,  # Optional. "ud398"uc774"uc9c0 "ubc88"ud638.
                        "status": "str",  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                        "total_count": 0,  # Optional. "ucd1d "uac74"uc218.
                        "total_page": 0  # Optional. "ucd1d "ud398"uc774"uc9c0 "uc218.
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_corporate_list_request(
            bgn_de=bgn_de,
            end_de=end_de,
            corp_code=corp_code,
            last_reprt_at=last_reprt_at,
            pblntf_ty=pblntf_ty,
            pblntf_detail_ty=pblntf_detail_ty,
            corp_cls=corp_cls,
            sort=sort,
            sort_mth=sort_mth,
            page_no=page_no,
            page_count=page_count,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_corporate_company(self, *, corp_code: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """기업개황.

        DART에 등록되어있는 기업의 개황정보를 제공합니다.

        :keyword corp_code: 고유번호

         공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "acc_mt": "str",  # Optional. "uacb0"uc0b0"uc6d4(MM).
                    "adres": "str",  # Optional. "uc8fc"uc18c.
                    "bizr_no": "str",  # Optional. "uc0ac"uc5c5"uc790"ub4f1"ub85d"ubc88"ud638.
                    "ceo_nm": "str",  # Optional. "ub300"ud45c"uc790"uba85.
                    "corp_cls": "str",  # Optional. "ubc95"uc778"uad6c"ubd84. Known values are:
                      "Y" and "N".
                    "corp_name": "str",  # Optional. "uc815"uc2dd"uba85"uce6d.
                    "corp_name_eng": "str",  # Optional. "uc601"ubb38"uba85"uce6d.
                    "est_dt": "str",  # Optional. "uc124"ub9bd"uc77c(YYYYMMDD).
                    "fax_no": "str",  # Optional. "ud329"uc2a4"ubc88"ud638.
                    "hm_url": "str",  # Optional. "ud648"ud398"uc774"uc9c0.
                    "induty_code": "str",  # Optional. "uc5c5"uc885"ucf54"ub4dc.
                    "ir_url": "str",  # Optional. IR"ud648"ud398"uc774"uc9c0.
                    "jurir_no": "str",  # Optional. "ubc95"uc778"ub4f1"ub85d"ubc88"ud638.
                    "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                      "uba54"uc2dc"uc9c0.
                    "phn_no": "str",  # Optional. "uc804"ud654"ubc88"ud638.
                    "status": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4"ucf54"ub4dc
                      000 :"uc815"uc0c1:code:`<br/>` 010 :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740
                      "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>` 011 :"uc0ac"uc6a9"ud560 "uc218
                      "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uc624"ud508API"uc5d0
                      "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098, "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9
                      "uc911"uc9c0"ub41c "ud0a4"ub97c "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294
                      "uacbd"uc6b0 "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560
                      "uc218 "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                      "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                      :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                      "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                      "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` "uc801"uc73c"ub85c"ub294
                      20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0 "ub300"ud558"uc5ec "uc774
                      "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00 "ubc1c"uc0dd"ub418"ub098, "uc694"uccad
                      "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294
                      "uc774"uc5d0 "uc900"ud558"uc5ec "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021
                      :"uc870"ud68c "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                      "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300 100"uac74):code:`<br/>`
                      100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c "uac12"uc785"ub2c8"ub2e4.
                      "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294 "uac12"uc744 "uc0ac"uc6a9"ud55c
                      "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                      "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101 :"ubd80"uc801"uc808"ud55c
                      "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800 :"uc2dc"uc2a4"ud15c
                      "uc810"uac80"uc73c"ub85c "uc778"ud55c "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0
                      "uc911"uc785"ub2c8"ub2e4.:code:`<br/>` 900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740
                      "uc624"ub958"uac00 "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                      :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                      "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560 "uc218
                      "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                      "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                      "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012", "013",
                      "014", "020", "021", "100", "101", "800", "900", and "901".
                    "stock_code": "str",  # Optional. "uc0c1"uc7a5"ud68c"uc0ac"uc778 "uacbd"uc6b0
                      "uc8fc"uc2dd"uc758 "uc885"ubaa9"ucf54"ub4dc.
                    "stock_name": "str"  # Optional. "uc885"ubaa9"uba85("uc0c1"uc7a5"uc0ac)
                      "ub610"ub294 "uc57d"uc2dd"uba85"uce6d("uae30"ud0c0"ubc95"uc778).
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_corporate_company_request(
            corp_code=corp_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_corporate_document(
        self, *, rcept_no: str, **kwargs: Any
    ) -> AsyncIterator[bytes]:
        """공시서류원본파일.

        공시보고서 원본파일을 제공합니다.

        :keyword rcept_no: 접수번호. Required.
        :paramtype rcept_no: str
        :return: AsyncIterator[bytes]
        :rtype: AsyncIterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_corporate_document_request(
            rcept_no=rcept_no,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(AsyncIterator[bytes], deserialized), {})  # type: ignore

        return cast(AsyncIterator[bytes], deserialized)  # type: ignore

    @distributed_trace_async
    async def get_corporate_code(self, **kwargs: Any) -> AsyncIterator[bytes]:
        """고유번호.

        DART에 등록되어있는 공시대상회사의 고유번호,회사명,종목코드, 최근변경일자를 파일로 제공합니다.

        :return: AsyncIterator[bytes]
        :rtype: AsyncIterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_corporate_code_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(AsyncIterator[bytes], deserialized), {})  # type: ignore

        return cast(AsyncIterator[bytes], deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_conditional_capital_not_reimbursed_balance(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """조건부 자본증권 미상환 잔액.

        정기보고서(사업, 분기, 반기보고서) 내에 조건부 자본증권 미상환 잔액을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "remndr_exprtn1": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "remndr_exprtn2": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "sm": "str",  # Optional. "ud569"uacc4.
                                "yy10_excess_yy20_below": "str",  # Optional.
                                  10"ub144"ucd08"uacfc 20"ub144"uc774"ud558.
                                "yy1_below": "str",  # Optional. 1"ub144
                                  "uc774"ud558.
                                "yy1_excess_yy2_below": "str",  # Optional.
                                  1"ub144"ucd08"uacfc 2"ub144"uc774"ud558.
                                "yy20_excess_yy30_below": "str",  # Optional.
                                  20"ub144"ucd08"uacfc 30"ub144"uc774"ud558.
                                "yy2_excess_yy3_below": "str",  # Optional.
                                  2"ub144"ucd08"uacfc 3"ub144"uc774"ud558.
                                "yy30_excess": "str",  # Optional.
                                  30"ub144"ucd08"uacfc.
                                "yy3_excess_yy4_below": "str",  # Optional.
                                  3"ub144"ucd08"uacfc 4"ub144"uc774"ud558.
                                "yy4_excess_yy5_below": "str",  # Optional.
                                  4"ub144"ucd08"uacfc 5"ub144"uc774"ud558.
                                "yy5_excess_yy10_below": "str"  # Optional.
                                  5"ub144"ucd08"uacfc 10"ub144"uc774"ud558.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_conditional_capital_not_reimbursed_balance_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_corporate_bond_not_reimbursed_balance(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """회사채 미상환 잔액.

        정기보고서(사업, 분기, 반기보고서) 내에 회사채 미상환 잔액을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "remndr_exprtn1": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "remndr_exprtn2": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "sm": "str",  # Optional. "ud569"uacc4.
                                "yy10_excess": "str",  # Optional. 10"ub144
                                  "ucd08"uacfc.
                                "yy1_below": "str",  # Optional. 1"ub144
                                  "uc774"ud558.
                                "yy1_excess_yy2_below": "str",  # Optional. 1"ub144
                                  "ucd08"uacfc 2"ub144 "uc774"ud558.
                                "yy2_excess_yy3_below": "str",  # Optional. 2"ub144
                                  "ucd08"uacfc 3"ub144 "uc774"ud558.
                                "yy3_excess_yy4_below": "str",  # Optional. 3"ub144
                                  "ucd08"uacfc 4"ub144 "uc774"ud558.
                                "yy4_excess_yy5_below": "str",  # Optional. 4"ub144
                                  "ucd08"uacfc 5"ub144 "uc774"ud558.
                                "yy5_excess_yy10_below": "str"  # Optional. 5"ub144
                                  "ucd08"uacfc 10"ub144 "uc774"ud558.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_corporate_bond_not_reimbursed_balance_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_short_term_bond_not_reimbursed_balance(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """단기사채 미상환 잔액.

        정기보고서(사업, 분기, 반기보고서) 내에 단기사채 미상환 잔액을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "de10_below": "str",  # Optional. 10"uc77c
                                  "uc774"ud558.
                                "de10_excess_de30_below": "str",  # Optional.
                                  10"uc77c"ucd08"uacfc 30"uc77c"uc774"ud558.
                                "de180_excess_yy1_below": "str",  # Optional.
                                  180"uc77c"ucd08"uacfc 1"ub144"uc774"ud558.
                                "de30_excess_de90_below": "str",  # Optional.
                                  30"uc77c"ucd08"uacfc 90"uc77c"uc774"ud558.
                                "de90_excess_de180_below": "str",  # Optional.
                                  90"uc77c"ucd08"uacfc 180"uc77c"uc774"ud558.
                                "isu_lmt": "str",  # Optional. "ubc1c"ud589
                                  "ud55c"ub3c4.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "remndr_exprtn1": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "remndr_exprtn2": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "remndr_lmt": "str",  # Optional. "uc794"uc5ec
                                  "ud55c"ub3c4.
                                "sm": "str"  # Optional. "ud569"uacc4.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_short_term_bond_not_reimbursed_balance_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_enterprises_bill_not_reimbursed_balance(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """기업어음증권 미상환 잔액.

        정기보고서(사업, 분기, 반기보고서) 내에 기업어음증권 미상환 잔액을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "de10_below": "str",  # Optional. 10"uc77c
                                  "uc774"ud558.
                                "de10_excess_de30_below": "str",  # Optional.
                                  10"uc77c"ucd08"uacfc 30"uc77c"uc774"ud558.
                                "de180_excess_yy1_below": "str",  # Optional.
                                  180"uc77c"ucd08"uacfc 1"ub144"uc774"ud558.
                                "de30_excess_de90_below": "str",  # Optional.
                                  30"uc77c"ucd08"uacfc 90"uc77c"uc774"ud558.
                                "de90_excess_de180_below": "str",  # Optional.
                                  90"uc77c"ucd08"uacfc 180"uc77c"uc774"ud558.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "remndr_exprtn1": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "remndr_exprtn2": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "sm": "str",  # Optional. "ud569"uacc4.
                                "yy1_excess_yy2_below": "str",  # Optional.
                                  1"ub144"ucd08"uacfc 2"ub144"uc774"ud558.
                                "yy2_excess_yy3_below": "str",  # Optional.
                                  2"ub144"ucd08"uacfc 3"ub144"uc774"ud558.
                                "yy3_excess": "str"  # Optional. 3"ub144
                                  "ucd08"uacfc.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_enterprises_bill_not_reimbursed_balance_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_debt_securities_issue_accomplishment(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """채무증권 발행실적.

        정기보고서(사업, 분기, 반기보고서) 내에 채무증권 발행실적을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "evl_grad_instt": "str",  # Optional.
                                  "ud3c9"uac00"ub4f1"uae09("ud3c9"uac00"uae30"uad00).
                                "facvalu_totamt": "str",  # Optional.
                                  "uad8c"uba74("uc804"uc790"ub4f1"ub85d)"ucd1d"uc561.
                                "intrt": "str",  # Optional. "uc774"uc790"uc728.
                                "isu_cmpny": "str",  # Optional.
                                  "ubc1c"ud589"ud68c"uc0ac.
                                "isu_de": "str",  # Optional.
                                  "ubc1c"ud589"uc77c"uc790.
                                "isu_mth_nm": "str",  # Optional.
                                  "ubc1c"ud589"ubc29"ubc95.
                                "mngt_cmpny": "str",  # Optional.
                                  "uc8fc"uad00"ud68c"uc0ac.
                                "mtd": "str",  # Optional. "ub9cc"uae30"uc77c.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "repy_at": "str",  # Optional.
                                  "uc0c1"ud658"uc5ec"ubd80.
                                "scrits_knd_nm": "str"  # Optional.
                                  "uc99d"uad8c"uc885"ub958.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_debt_securities_issue_accomplishment_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_private_equity_capital_use_details(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """사모자금의 사용내역.

        정기보고서(사업, 분기, 반기보고서) 내에 사모자금의 사용내역을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "cptal_use_plan": "str",  # Optional.
                                  "uc790"uae08"uc0ac"uc6a9 "uacc4"ud68d  "u2460 2018"ub144 1"uc6d4
                                  18"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "dffrnc_occrrnc_resn": "str",  # Optional.
                                  "ucc28"uc774"ubc1c"uc0dd "uc0ac"uc720 "ub4f1.
                                "mtrpt_cptal_use_plan_prcure_amount": "str",  #
                                  Optional. "uc8fc"uc694"uc0ac"ud56d"ubcf4"uace0"uc11c"uc758
                                  "uc790"uae08"uc0ac"uc6a9 "uacc4"ud68d("uc870"ub2ec"uae08"uc561)
                                  "u2461 2018"ub144 1"uc6d4 19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "mtrpt_cptal_use_plan_useprps": "str",  # Optional.
                                  "uc8fc"uc694"uc0ac"ud56d"ubcf4"uace0"uc11c"uc758
                                  "uc790"uae08"uc0ac"uc6a9 "uacc4"ud68d("uc0ac"uc6a9"uc6a9"ub3c4)
                                  "u2461 2018"ub144 1"uc6d4 19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "pay_amount": "str",  # Optional.
                                  "ub0a9"uc785"uae08"uc561  "u2460 2018"ub144 1"uc6d4
                                  18"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "pay_de": "str",  # Optional. "ub0a9"uc785"uc77c.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "real_cptal_use_dtls_amount": "str",  # Optional.
                                  "uc2e4"uc81c "uc790"uae08"uc0ac"uc6a9 "ub0b4"uc5ed("uae08"uc561)
                                  "u2461 2018"ub144 1"uc6d4 19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "real_cptal_use_dtls_cn": "str",  # Optional.
                                  "uc2e4"uc81c "uc790"uae08"uc0ac"uc6a9 "ub0b4"uc5ed("ub0b4"uc6a9)
                                  "u2461 2018"ub144 1"uc6d4 19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "real_cptal_use_sttus": "str",  # Optional.
                                  "uc2e4"uc81c "uc790"uae08"uc0ac"uc6a9 "ud604"ud669  "u2460 2018"ub144
                                  1"uc6d4 18"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "se_nm": "str",  # Optional. "uad6c"ubd84.
                                "tm": "str"  # Optional. "ud68c"ucc28  "u2462
                                  2019"ub144 12"uc6d4 9"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_private_equity_capital_use_details_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_public_equity_capital_use_details(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """공모자금의 사용내역.

        정기보고서(사업, 분기, 반기보고서) 내에 공모자금의 사용내역을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "dffrnc_occrrnc_resn": "str",  # Optional.
                                  "ucc28"uc774"ubc1c"uc0dd "uc0ac"uc720 "ub4f1.
                                "on_dclrt_cptal_use_plan": "str",  # Optional.
                                  "uc2e0"uace0"uc11c"uc0c1 "uc790"uae08"uc0ac"uc6a9 "uacc4"ud68d
                                  "u2460 2018"ub144 1"uc6d4 18"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "pay_amount": "str",  # Optional.
                                  "ub0a9"uc785"uae08"uc561  "u2460 2018"ub144 1"uc6d4
                                  18"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "pay_de": "str",  # Optional. "ub0a9"uc785"uc77c.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "real_cptal_use_dtls_amount": "str",  # Optional.
                                  "uc2e4"uc81c "uc790"uae08"uc0ac"uc6a9 "ub0b4"uc5ed("uae08"uc561)
                                  "u2461 2018"ub144 1"uc6d4 19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "real_cptal_use_dtls_cn": "str",  # Optional.
                                  "uc2e4"uc81c "uc790"uae08"uc0ac"uc6a9 "ub0b4"uc5ed("ub0b4"uc6a9)
                                  "u2461 2018"ub144 1"uc6d4 19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "real_cptal_use_sttus": "str",  # Optional.
                                  "uc2e4"uc81c "uc790"uae08"uc0ac"uc6a9 "ud604"ud669  "u2460 2018"ub144
                                  1"uc6d4 18"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "rs_cptal_use_plan_prcure_amount": "str",  #
                                  Optional. "uc99d"uad8c"uc2e0"uace0"uc11c "ub4f1"uc758
                                  "uc790"uae08"uc0ac"uc6a9 "uacc4"ud68d("uc870"ub2ec"uae08"uc561)
                                  "u2461 2018"ub144 1"uc6d4 19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "rs_cptal_use_plan_useprps": "str",  # Optional.
                                  "uc99d"uad8c"uc2e0"uace0"uc11c "ub4f1"uc758 "uc790"uae08"uc0ac"uc6a9
                                  "uacc4"ud68d("uc0ac"uc6a9"uc6a9"ub3c4)  "u2461 2018"ub144 1"uc6d4
                                  19"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "se_nm": "str",  # Optional. "uad6c"ubd84.
                                "tm": "str"  # Optional. "ud68c"ucc28  "u2462
                                  2019"ub144 12"uc6d4 9"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_public_equity_capital_use_details_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_director_audit_all_mending_status_shareholders_general_meeting_confirm_amount(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """이사·감사 전체의 보수현황(주주총회 승인금액).

        정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수현황(주주총회 승인금액)을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "gmtsck_confm_amount": "str",  # Optional.
                                  "uc8fc"uc8fc"ucd1d"ud68c "uc2b9"uc778"uae08"uc561.
                                "nmpr": "str",  # Optional. "uc778"uc6d0"uc218.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rm": "str",  # Optional. "ube44"uace0.
                                "se": "str"  # Optional.
                                  "uad6c"ubd84("ub4f1"uae30"uc774"uc0ac, "uac10"uc0ac"uc704"uc6d0"ud68c
                                  "uc704"uc6d0 "ub610"ub294 "uac10"uc0ac, "uc0ac"uc678"uc774"uc0ac).
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_director_audit_all_mending_status_shareholders_general_meeting_confirm_amount_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_director_audit_all_mending_status_mending_payment_amount_type_classification(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """이사·감사 전체의 보수현황(보수지급금액 - 유형별).

        정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수현황(보수지급금액 - 유형별)을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "nmpr": "str",  # Optional. "uc778"uc6d0"uc218.
                                "psn1_avrg_pymntamt": "str",  # Optional.
                                  1"uc778"ub2f9 "ud3c9"uade0"ubcf4"uc218"uc561.
                                "pymnt_totamt": "str",  # Optional.
                                  "ubcf4"uc218"ucd1d"uc561.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rm": "str",  # Optional. "ube44"uace0.
                                "se": "str"  # Optional.
                                  "uad6c"ubd84("ub4f1"uae30"uc774"uc0ac("uc0ac"uc678"uc774"uc0ac,
                                  "uac10"uc0ac"uc704"uc6d0"ud68c "uc704"uc6d0 "uc81c"uc678),
                                  "uc0ac"uc678"uc774"uc0ac("uac10"uc0ac"uc704"uc6d0"ud68c "uc704"uc6d0
                                  "uc81c"uc678), "uac10"uc0ac"uc704"uc6d0"ud68c "uc704"uc6d0,
                                  "uac10"uc0ac "ub4f1.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_director_audit_all_mending_status_mending_payment_amount_type_classification_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_stock_total_quantity_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """주식 총수 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 주식의총수현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "distb_stock_co": "str",  # Optional. "u2165.
                                  "uc720"ud1b5"uc8fc"uc2dd"uc218 ("u2163-"u2164).
                                "etc": "str",  # Optional. "u2162.
                                  "ud604"uc7ac"uae4c"uc9c0 "uac10"uc18c"ud55c "uc8fc"uc2dd"uc758
                                  "ucd1d"uc218(4. "uae30"ud0c0).
                                "istc_totqy": "str",  # Optional. "u2163.
                                  "ubc1c"ud589"uc8fc"uc2dd"uc758 "ucd1d"uc218 ("u2161-"u2162).
                                "isu_stock_totqy": "str",  # Optional. "u2160.
                                  "ubc1c"ud589"ud560 "uc8fc"uc2dd"uc758 "ucd1d"uc218.
                                "now_to_dcrs_stock_totqy": "str",  # Optional.
                                  "u2162. "ud604"uc7ac"uae4c"uc9c0 "uac10"uc18c"ud55c
                                  "uc8fc"uc2dd"uc758 "ucd1d"uc218.
                                "now_to_isu_stock_totqy": "str",  # Optional. "u2161.
                                  "ud604"uc7ac"uae4c"uc9c0 "ubc1c"ud589"ud55c "uc8fc"uc2dd"uc758
                                  "ucd1d"uc218.
                                "profit_incnr": "str",  # Optional. "u2162.
                                  "ud604"uc7ac"uae4c"uc9c0 "uac10"uc18c"ud55c "uc8fc"uc2dd"uc758
                                  "ucd1d"uc218(2. "uc774"uc775"uc18c"uac01).
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rdmstk_repy": "str",  # Optional. "u2162.
                                  "ud604"uc7ac"uae4c"uc9c0 "uac10"uc18c"ud55c "uc8fc"uc2dd"uc758
                                  "ucd1d"uc218(3. "uc0c1"ud658"uc8fc"uc2dd"uc758 "uc0c1"ud658).
                                "redc": "str",  # Optional. "u2162.
                                  "ud604"uc7ac"uae4c"uc9c0 "uac10"uc18c"ud55c "uc8fc"uc2dd"uc758
                                  "ucd1d"uc218(1. "uac10"uc790).
                                "se": "str",  # Optional.
                                  "uad6c"ubd84("ubcf4"ud1b5"uc8fc, "uc6b0"uc120"uc8fc, "ud569"uacc4,
                                  "ube44"uace0).
                                "tesstk_co": "str"  # Optional. "u2164.
                                  "uc790"uae30"uc8fc"uc2dd"uc218.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_dart_get_regular_key_stock_total_quantity_status_request(
                corp_code=corp_code,
                bsns_year=bsns_year,
                reprt_code=reprt_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_account_auditor_name_and_opinion(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """회계감사인의 명칭 및 감사의견.

        정기보고서(사업, 분기, 반기보고서) 내에 회계감사인의 명칭 및 감사의견을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "adt_opinion": "str",  # Optional.
                                  "uac10"uc0ac"uc758"uacac.
                                "adt_reprt_spcmnt_matter": "str",  # Optional.
                                  "uac10"uc0ac"ubcf4"uace0"uc11c "ud2b9"uae30"uc0ac"ud56d  "u2460
                                  2019"ub144 12"uc6d4 8"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "adtor": "str",  # Optional. "uac10"uc0ac"uc778.
                                "bsns_year": "str",  # Optional.
                                  "uc0ac"uc5c5"uc5f0"ub3c4("ub2f9"uae30, "uc804"uae30,
                                  "uc804"uc804"uae30).
                                "core_adt_matter": "str",  # Optional.
                                  "ud575"uc2ec"uac10"uc0ac"uc0ac"ud56d  "u2461 2019"ub144 12"uc6d4
                                  9"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "emphs_matter": "str",  # Optional.
                                  "uac15"uc870"uc0ac"ud56d "ub4f1  "u2461 2019"ub144 12"uc6d4
                                  9"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "rcept_no": "str"  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_account_auditor_name_and_opinion_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_audit_service_conclusion_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """감사용역체결현황.

        정기보고서(사업, 분기, 반기보고서) 내에 감사용역체결현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "adt_cntrct_dtls_mendng": "str",  # Optional.
                                  "uac10"uc0ac"uacc4"uc57d"ub0b4"uc5ed("ubcf4"uc218)  "u2461 2020"ub144
                                  7"uc6d4 6"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "adt_cntrct_dtls_time": "str",  # Optional.
                                  "uac10"uc0ac"uacc4"uc57d"ub0b4"uc5ed("uc2dc"uac04)  "u2461 2020"ub144
                                  7"uc6d4 6"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "adtor": "str",  # Optional. "uac10"uc0ac"uc778.
                                "bsns_year": "str",  # Optional.
                                  "uc0ac"uc5c5"uc5f0"ub3c4("ub2f9"uae30, "uc804"uae30,
                                  "uc804"uc804"uae30).
                                "cn": "str",  # Optional. "ub0b4"uc6a9.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "mendng": "str",  # Optional. "ubcf4"uc218  "u2460
                                  2020"ub144 7"uc6d4 5"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "real_exc_dtls_mendng": "str",  # Optional.
                                  "uc2e4"uc81c"uc218"ud589"ub0b4"uc5ed("ubcf4"uc218)  "u2461 2020"ub144
                                  7"uc6d4 6"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "real_exc_dtls_time": "str",  # Optional.
                                  "uc2e4"uc81c"uc218"ud589"ub0b4"uc5ed("uc2dc"uac04)  "u2461 2020"ub144
                                  7"uc6d4 6"uc77c"ubd80"ud130 "ucd94"uac00"ub428.
                                "tot_reqre_time": "str"  # Optional.
                                  "ucd1d"uc18c"uc694"uc2dc"uac04  "u2460 2020"ub144 7"uc6d4
                                  5"uc77c"uae4c"uc9c0 "uc0ac"uc6a9"ub428.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_dart_get_regular_key_audit_service_conclusion_status_request(
                corp_code=corp_code,
                bsns_year=bsns_year,
                reprt_code=reprt_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_account_auditor_non_audit_service_conclusion_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """회계감사인과의 비감사용역 계약체결 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 회계감사인과의 비감사용역 계약체결 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "bsns_year": "str",  # Optional.
                                  "uc0ac"uc5c5"uc5f0"ub3c4("ub2f9"uae30, "uc804"uae30,
                                  "uc804"uc804"uae30).
                                "cntrct_cncls_de": "str",  # Optional.
                                  "uacc4"uc57d"uccb4"uacb0"uc77c.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rm": "str",  # Optional. "ube44"uace0.
                                "servc_cn": "str",  # Optional.
                                  "uc6a9"uc5ed"ub0b4"uc6a9.
                                "servc_exc_pd": "str",  # Optional.
                                  "uc6a9"uc5ed"uc218"ud589"uae30"uac04.
                                "servc_mendng": "str"  # Optional.
                                  "uc6a9"uc5ed"ubcf4"uc218.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_account_auditor_non_audit_service_conclusion_status_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_outside_director_change_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """사외이사 및 그 변동현황.

        정기보고서(사업, 분기, 반기보고서) 내에 사외이사 및 그 변동현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "apnt": "str",  # Optional. "uc0ac"uc678"uc774"uc0ac
                                  "ubcc0"ub3d9"ud604"ud669("uc120"uc784).
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "drctr_co": "str",  # Optional. "uc774"uc0ac"uc758
                                  "uc218.
                                "mdstrm_resig": "str",  # Optional.
                                  "uc0ac"uc678"uc774"uc0ac
                                  "ubcc0"ub3d9"ud604"ud669("uc911"ub3c4"ud1f4"uc784).
                                "otcmp_drctr_co": "str",  # Optional.
                                  "uc0ac"uc678"uc774"uc0ac "uc218.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rlsofc": "str"  # Optional. "uc0ac"uc678"uc774"uc0ac
                                  "ubcc0"ub3d9"ud604"ud669("ud574"uc784).
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_dart_get_regular_key_outside_director_change_status_request(
                corp_code=corp_code,
                bsns_year=bsns_year,
                reprt_code=reprt_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_new_capital_securities_not_reimbursed_balance(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """신종자본증권 미상환 잔액.

        정기보고서(사업, 분기, 반기보고서) 내에 신종자본증권 미상환 잔액을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "remndr_exprtn1": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "remndr_exprtn2": "str",  # Optional.
                                  "uc794"uc5ec"ub9cc"uae30.
                                "sm": "str",  # Optional. "ud569"uacc4.
                                "yy10_excess_yy15_below": "str",  # Optional.
                                  10"ub144"ucd08"uacfc 15"ub144"uc774"ud558.
                                "yy15_excess_yy20_below": "str",  # Optional.
                                  15"ub144"ucd08"uacfc 20"ub144"uc774"ud558.
                                "yy1_below": "str",  # Optional. 1"ub144
                                  "uc774"ud558.
                                "yy1_excess_yy5_below": "str",  # Optional.
                                  1"ub144"ucd08"uacfc 5"ub144"uc774"ud558.
                                "yy20_excess_yy30_below": "str",  # Optional.
                                  20"ub144"ucd08"uacfc 30"ub144"uc774"ud558.
                                "yy30_excess": "str",  # Optional.
                                  30"ub144"ucd08"uacfc.
                                "yy5_excess_yy10_below": "str"  # Optional.
                                  5"ub144"ucd08"uacfc 10"ub144"uc774"ud558.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_new_capital_securities_not_reimbursed_balance_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_increase_decrease_status(
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """증자(감자) 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 증자(감자) 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "isu_dcrs_de": "str",  # Optional.
                                  "uc8fc"uc2dd"ubc1c"ud589 "uac10"uc18c"uc77c"uc790.
                                "isu_dcrs_mstvdv_amount": "str",  # Optional.
                                  "ubc1c"ud589 "uac10"uc18c "uc8fc"ub2f9 "uac00"uc561.
                                "isu_dcrs_mstvdv_fval_amount": "str",  # Optional.
                                  "ubc1c"ud589 "uac10"uc18c "uc8fc"ub2f9 "uc561"uba74 "uac00"uc561.
                                "isu_dcrs_qy": "str",  # Optional. "ubc1c"ud589
                                  "uac10"uc18c "uc218"ub7c9.
                                "isu_dcrs_stle": "str",  # Optional. "ubc1c"ud589
                                  "uac10"uc18c "ud615"ud0dc.
                                "isu_dcrs_stock_knd": "str",  # Optional.
                                  "ubc1c"ud589 "uac10"uc18c "uc8fc"uc2dd "uc885"ub958.
                                "rcept_no": "str"  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_increase_decrease_status_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_allocation_matter(
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """배당에 관한 사항.

        정기보고서(사업, 분기, 반기보고서) 내에 배당에 관한 사항을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "frmtrm": "str",  # Optional. "uc804"uae30.
                                "lwfr": "str",  # Optional. "uc804"uc804"uae30.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "se": "str",  # Optional. "uad6c"ubd84.
                                "stock_knd": "str",  # Optional. "uc8fc"uc2dd
                                  "uc885"ub958.
                                "thstrm": "str"  # Optional. "ub2f9"uae30.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_allocation_matter_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_treasury_shares_acquisition_disposal_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """자기주식 취득 및 처분 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 자기주식 취득 및 처분 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "acqs_mth1": "str",  # Optional.
                                  "ucde8"ub4dd"ubc29"ubc95 "ub300"ubd84"ub958.
                                "acqs_mth2": "str",  # Optional.
                                  "ucde8"ub4dd"ubc29"ubc95 "uc911"ubd84"ub958.
                                "acqs_mth3": "str",  # Optional.
                                  "ucde8"ub4dd"ubc29"ubc95 "uc18c"ubd84"ub958.
                                "bsis_qy": "str",  # Optional. "uae30"ucd08
                                  "uc218"ub7c9.
                                "change_qy_acqs": "str",  # Optional. "ubcc0"ub3d9
                                  "uc218"ub7c9 "ucde8"ub4dd.
                                "change_qy_dsps": "str",  # Optional. "ubcc0"ub3d9
                                  "uc218"ub7c9 "ucc98"ubd84.
                                "change_qy_incnr": "str",  # Optional. "ubcc0"ub3d9
                                  "uc218"ub7c9 "uc18c"uac01.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rm": "str",  # Optional. "ube44"uace0.
                                "stock_knd": "str",  # Optional. "uc8fc"uc2dd
                                  "uc885"ub958.
                                "trmend_qy": "str"  # Optional. "uae30"ub9d0
                                  "uc218"ub7c9.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_treasury_shares_acquisition_disposal_status_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_largest_shareholder_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """최대주주 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 최대주주 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "bsis_posesn_stock_co": "str",  # Optional.
                                  "uae30"ucd08 "uc18c"uc720 "uc8fc"uc2dd "uc218.
                                "bsis_posesn_stock_qota_rt": "str",  # Optional.
                                  "uae30"ucd08 "uc18c"uc720 "uc8fc"uc2dd "uc9c0"ubd84 "uc728.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "nm": "str",  # Optional. "uc131"uba85.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "relate": "str",  # Optional. "uad00"uacc4.
                                "rm": "str",  # Optional. "ube44"uace0.
                                "stock_knd": "str",  # Optional. "uc8fc"uc2dd
                                  "uc885"ub958.
                                "trmend_posesn_stock_co": "str",  # Optional.
                                  "uae30"ub9d0 "uc18c"uc720 "uc8fc"uc2dd "uc218.
                                "trmend_posesn_stock_qota_rt": "str"  # Optional.
                                  "uae30"ub9d0 "uc18c"uc720 "uc8fc"uc2dd "uc9c0"ubd84 "uc728.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_dart_get_regular_key_largest_shareholder_status_request(
                corp_code=corp_code,
                bsns_year=bsns_year,
                reprt_code=reprt_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_largest_shareholder_change_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """최대주주 변동 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 최대주주 변동 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "change_cause": "str",  # Optional. "ubcc0"ub3d9
                                  "uc6d0"uc778.
                                "change_on": "str",  # Optional. "ubcc0"ub3d9 "uc77c
                                  YYYY.MM.DD.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "mxmm_shrholdr_nm": "str",  # Optional. "ucd5c"ub300
                                  "uc8fc"uc8fc "uba85.
                                "posesn_stock_co": "str",  # Optional. "uc18c"uc720
                                  "uc8fc"uc2dd "uc218.
                                "qota_rt": "str",  # Optional. "uc9c0"ubd84 "uc728.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rm": "str"  # Optional. "ube44"uace0.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_largest_shareholder_change_status_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_minority_shareholders_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """소액주주 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 소액주주 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "hold_stock_co": "str",  # Optional. "ubcf4"uc720
                                  "uc8fc"uc2dd"uc218.
                                "hold_stock_rate": "str",  # Optional. "ubcf4"uc720
                                  "uc8fc"uc2dd "ube44"uc728.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "se": "str",  # Optional. "uad6c"ubd84.
                                "shrholdr_co": "str",  # Optional.
                                  "uc8fc"uc8fc"uc218.
                                "shrholdr_rate": "str",  # Optional. "uc8fc"uc8fc
                                  "ube44"uc728.
                                "shrholdr_tot_co": "str",  # Optional. "uc804"uccb4
                                  "uc8fc"uc8fc"uc218.
                                "stock_tot_co": "str"  # Optional. "ucd1d"ubc1c"ud589
                                  "uc8fc"uc2dd"uc218.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_dart_get_regular_key_minority_shareholders_status_request(
                corp_code=corp_code,
                bsns_year=bsns_year,
                reprt_code=reprt_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_executive_status(
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """임원 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 임원 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "birth_ym": "str",  # Optional. "ucd9c"uc0dd
                                  "ub144"uc6d4 (YYYY"ub144 MM"uc6d4).
                                "chrg_job": "str",  # Optional. "ub2f4"ub2f9
                                  "uc5c5"ubb34.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "fte_at": "str",  # Optional. "uc0c1"uadfc
                                  "uc5ec"ubd80.
                                "hffc_pd": "str",  # Optional. "uc7ac"uc9c1
                                  "uae30"uac04.
                                "main_career": "str",  # Optional. "uc8fc"uc694
                                  "uacbd"ub825.
                                "mxmm_shrholdr_relate": "str",  # Optional.
                                  "ucd5c"ub300 "uc8fc"uc8fc "uad00"uacc4.
                                "nm": "str",  # Optional. "uc131"uba85.
                                "ofcps": "str",  # Optional. "uc9c1"uc704.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rgist_exctv_at": "str",  # Optional. "ub4f1"uae30
                                  "uc784"uc6d0 "uc5ec"ubd80.
                                "sexdstn": "str",  # Optional. "uc131"ubcc4.
                                "tenure_end_on": "str"  # Optional. "uc784"uae30
                                  "ub9cc"ub8cc "uc77c.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_executive_status_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_employee_status(
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """직원 현황.

        정기보고서(사업, 분기, 반기보고서) 내에 직원 현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "avrg_cnwk_sdytrn": "str",  # Optional. "ud3c9"uade0
                                  "uadfc"uc18d "uc5f0"uc218.
                                "cnttk_abacpt_labrr_co": "str",  # Optional.
                                  "uacc4"uc57d"uc9c1 "ub2e8"uc2dc"uac04 "uadfc"ub85c"uc790 "uc218.
                                "cnttk_co": "str",  # Optional. "uacc4"uc57d"uc9c1
                                  "uc218.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "fo_bbm": "str",  # Optional.
                                  "uc0ac"uc5c5"ubd80"ubb38.
                                "fyer_salary_totamt": "str",  # Optional.
                                  "uc5f0"uac04 "uae09"uc5ec "ucd1d"uc561.
                                "jan_salary_am": "str",  # Optional.
                                  1"uc778"ud3c9"uade0 "uae09"uc5ec "uc561.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "reform_bfe_emp_co_cnttk": "str",  # Optional.
                                  "uac1c"uc815 "uc804 "uc9c1"uc6d0 "uc218 "uacc4"uc57d"uc9c1.
                                "reform_bfe_emp_co_etc": "str",  # Optional.
                                  "uac1c"uc815 "uc804 "uc9c1"uc6d0 "uc218 "uae30"ud0c0.
                                "reform_bfe_emp_co_rgllbr": "str",  # Optional.
                                  "uac1c"uc815 "uc804 "uc9c1"uc6d0 "uc218 "uc815"uaddc"uc9c1.
                                "rgllbr_abacpt_labrr_co": "str",  # Optional.
                                  "uc815"uaddc"uc9c1 "ub2e8"uc2dc"uac04 "uadfc"ub85c"uc790 "uc218.
                                "rgllbr_co": "str",  # Optional. "uc815"uaddc"uc9c1
                                  "uc218.
                                "rm": "str",  # Optional. "ube44"uace0.
                                "sexdstn": "str",  # Optional. "uc131"ubcc4.
                                "sm": "str"  # Optional. "ud569"uacc4.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_employee_status_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_director_auditor_individual_mending(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """이사ㆍ감사의 개인별 보수현황.

        정기보고서(사업, 분기, 반기보고서) 내에 이사ㆍ감사의 개인별 보수현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "mendng_totamt": "str",  # Optional. "ubcf4"uc218
                                  "ucd1d"uc561.
                                "mendng_totamt_ct_incls_mendng": "str",  # Optional.
                                  "ubcf4"uc218 "ucd1d"uc561 "ube44 "ud3ec"ud568 "ubcf4"uc218.
                                "nm": "str",  # Optional. "uc774"ub984.
                                "ofcps": "str",  # Optional. "uc9c1"uc704.
                                "rcept_no": "str"  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_director_auditor_individual_mending_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_director_audit_all_mending(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """이사ㆍ감사의 전체 보수현황.

        정기보고서(사업, 분기, 반기보고서) 내에 이사ㆍ감사의 전체 보수현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "jan_avrg_mendng_am": "str",  # Optional. 1"uc778
                                  "ud3c9"uade0 "ubcf4"uc218 "uc561.
                                "mendng_totamt": "str",  # Optional. "ubcf4"uc218
                                  "ucd1d"uc561.
                                "nmpr": "str",  # Optional. "uc778"uc6d0"uc218.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "rm": "str"  # Optional. "ube44"uace0.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_dart_get_regular_key_director_audit_all_mending_request(
                corp_code=corp_code,
                bsns_year=bsns_year,
                reprt_code=reprt_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_individual_by_pay(
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """개인별 보수지급 금액(5억이상 상위5인).

        정기보고서(사업, 분기, 반기보고서) 내에 개인별 보수지급 금액(5억이상 상위5인)을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "mendng_totamt": "str",  # Optional. "ubcf4"uc218
                                  "ucd1d"uc561.
                                "mendng_totamt_ct_incls_mendng": "str",  # Optional.
                                  "ubcf4"uc218 "ucd1d"uc561 "ube44 "ud3ec"ud568 "ubcf4"uc218.
                                "nm": "str",  # Optional. "uc774"ub984.
                                "ofcps": "str",  # Optional. "uc9c1"uc704.
                                "rcept_no": "str"  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_individual_by_pay_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_regular_key_outer_corporate_investment_status(  # pylint: disable=name-too-long
        self, *, corp_code: str, bsns_year: str, reprt_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """타법인 출자현황.

        정기보고서(사업, 분기, 반기보고서) 내에 타법인 출자현황을 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :keyword bsns_year: 사업연도(4자리) ※ 2015년 이후 부터 정보제공. Required.
        :paramtype bsns_year: str
        :keyword reprt_code: 보고서 코드


         * 11011 : 사업보고서:code:`<br/>`
         * 11012 : 반기보고서:code:`<br/>`
         * 11013 : 1분기보고서:code:`<br/>`
         * 11014 : 3분기보고서. Required.
        :paramtype reprt_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "bsis_blce_acntbk_amount": "str",  # Optional.
                                  "uae30"ucd08 "uc794"uc561 "uc7a5"ubd80 "uac00"uc561.
                                "bsis_blce_qota_rt": "str",  # Optional. "uae30"ucd08
                                  "uc794"uc561 "uc9c0"ubd84 "uc728.
                                "bsis_blce_qy": "str",  # Optional. "uae30"ucd08
                                  "uc794"uc561 "uc218"ub7c9.
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_code": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uc758
                                  "uace0"uc720"ubc88"ud638(8"uc790"ub9ac).
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "frst_acqs_amount": "str",  # Optional. "ucd5c"ucd08
                                  "ucde8"ub4dd "uae08"uc561.
                                "frst_acqs_de": "str",  # Optional. "ucd5c"ucd08
                                  "ucde8"ub4dd "uc77c"uc790.
                                "incrs_dcrs_acqs_dsps_amount": "str",  # Optional.
                                  "uc99d"uac00 "uac10"uc18c "ucde8"ub4dd "ucc98"ubd84 "uae08"uc561.
                                "incrs_dcrs_acqs_dsps_qy": "str",  # Optional.
                                  "uc99d"uac00 "uac10"uc18c "ucde8"ub4dd "ucc98"ubd84 "uc218"ub7c9.
                                "incrs_dcrs_evl_lstmn": "str",  # Optional.
                                  "uc99d"uac00 "uac10"uc18c "ud3c9"uac00 "uc190"uc561.
                                "inv_prm": "str",  # Optional. "ubc95"uc778"uba85.
                                "invstmnt_purps": "str",  # Optional. "ucd9c"uc790
                                  "ubaa9"uc801.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "recent_bsns_year_fnnr_sttus_thstrm_ntpf": "str",  #
                                  Optional. "ucd5c"uadfc "uc0ac"uc5c5 "uc5f0"ub3c4 "uc7ac"ubb34
                                  "ud604"ud669 "ub2f9"uae30 "uc21c"uc774"uc775.
                                "recent_bsns_year_fnnr_sttus_tot_assets": "str",  #
                                  Optional. "ucd5c"uadfc "uc0ac"uc5c5 "uc5f0"ub3c4 "uc7ac"ubb34
                                  "ud604"ud669 "ucd1d "uc790"uc0b0.
                                "trmend_blce_acntbk_amount": "str",  # Optional.
                                  "uae30"ub9d0 "uc794"uc561 "uc7a5"ubd80 "uac00"uc561.
                                "trmend_blce_qota_rt": "str",  # Optional.
                                  "uae30"ub9d0 "uc794"uc561 "uc9c0"ubd84 "uc728.
                                "trmend_blce_qy": "str"  # Optional. "uae30"ub9d0
                                  "uc794"uc561 "uc218"ub7c9.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_regular_key_outer_corporate_investment_status_request(
            corp_code=corp_code,
            bsns_year=bsns_year,
            reprt_code=reprt_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_share_largest_shareholder_stock(
        self, *, corp_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """대량보유 상황보고서.

        주식등의 대량보유상황보고서 내에 대량보유 상황보고 정보를 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "ctr_stkqy": "str",  # Optional.
                                  "uc8fc"uc694"uccb4"uacb0 "uc8fc"uc2dd"ub4f1"uc758 "uc218.
                                "ctr_stkrt": "str",  # Optional.
                                  "uc8fc"uc694"uccb4"uacb0 "ubcf4"uc720"ube44"uc728.
                                "rcept_dt": "str",  # Optional.
                                  "uc811"uc218"uc77c"uc790.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "report_resn": "str",  # Optional.
                                  "ubcf4"uace0"uc0ac"uc720.
                                "report_tp": "str",  # Optional.
                                  "ubcf4"uace0"uad6c"ubd84.
                                "repror": "str",  # Optional.
                                  "ub300"ud45c"ubcf4"uace0"uc790.
                                "stkqy": "str",  # Optional.
                                  "ubcf4"uc720"uc8fc"uc2dd"ub4f1"uc758 "uc218.
                                "stkqy_irds": "str",  # Optional.
                                  "ubcf4"uc720"uc8fc"uc2dd"ub4f1"uc758 "uc99d"uac10.
                                "stkrt": "str",  # Optional.
                                  "ubcf4"uc720"ube44"uc728.
                                "stkrt_irds": "str"  # Optional.
                                  "ubcf4"uc720"ube44"uc728 "uc99d"uac10.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_share_largest_shareholder_stock_request(
            corp_code=corp_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_share_executive_major_stock(
        self, *, corp_code: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """임원ㆍ주요주주 소유보고.

        임원ㆍ주요주주특정증권등 소유상황보고서 내에 임원ㆍ주요주주 소유보고 정보를 제공합니다.

        :keyword corp_code: 공시대상회사의 고유번호(8자리). Required.
        :paramtype corp_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "result": {
                        "list": [
                            {
                                "corp_cls": "str",  # Optional.
                                  "ubc95"uc778"uad6c"ubd84  "ubc95"uc778"uad6c"ubd84 : Y("uc720"uac00),
                                  K("ucf54"uc2a4"ub2e5), N("ucf54"ub125"uc2a4), E("uae30"ud0c0). Known
                                  values are: "Y", "K", "N", and "E".
                                "corp_name": "str",  # Optional.
                                  "uacf5"uc2dc"ub300"uc0c1"ud68c"uc0ac"uba85.
                                "isu_exctv_ofcps": "str",  # Optional. "ubc1c"ud589
                                  "ud68c"uc0ac "uad00"uacc4 "uc784"uc6d0 "uc9c1"uc704.
                                "isu_exctv_rgist_at": "str",  # Optional.
                                  "ubc1c"ud589 "ud68c"uc0ac "uad00"uacc4
                                  "uc784"uc6d0("ub4f1"uae30"uc5ec"ubd80).
                                "isu_main_shrholdr": "str",  # Optional. "ubc1c"ud589
                                  "ud68c"uc0ac "uad00"uacc4 "uc8fc"uc694 "uc8fc"uc8fc.
                                "rcept_dt": "str",  # Optional.
                                  "uc811"uc218"uc77c"uc790.
                                "rcept_no": "str",  # Optional.
                                  "uc811"uc218"ubc88"ud638(14"uc790"ub9ac)  "u203b
                                  "uacf5"uc2dc"ubdf0"uc5b4 "uc5f0"uacb0"uc5d0
                                  "uc774"uc6a9"uc608"uc2dc:code:`<br/>`   * PC"uc6a9 :
                                  https://dart.fss.or.kr/dsaf001/main.do?rcpNo="uc811"uc218"ubc88"ud638.
                                "repror": "str",  # Optional.
                                  "ubcf4"uace0"uc790"uba85.
                                "sp_stock_lmp_cnt": "str",  # Optional. "ud2b9"uc815
                                  "uc99d"uad8c "ub4f1 "uc18c"uc720 "uc218.
                                "sp_stock_lmp_irds_cnt": "str",  # Optional.
                                  "ud2b9"uc815 "uc99d"uad8c "ub4f1 "uc18c"uc720 "uc99d"uac10 "uc218.
                                "sp_stock_lmp_irds_rate": "str",  # Optional.
                                  "ud2b9"uc815 "uc99d"uad8c "ub4f1 "uc18c"uc720 "uc99d"uac10
                                  "ube44"uc728.
                                "sp_stock_lmp_rate": "str"  # Optional. "ud2b9"uc815
                                  "uc99d"uad8c "ub4f1 "uc18c"uc720 "ube44"uc728.
                            }
                        ],
                        "message": "str",  # Optional. "uc5d0"ub7ec "ubc0f "uc815"ubcf4
                          "uba54"uc2dc"uc9c0.
                        "status": "str"  # Optional. "uc5d0"ub7ec "ubc0f
                          "uc815"ubcf4"ucf54"ub4dc  000 :"uc815"uc0c1:code:`<br/>` 010
                          :"ub4f1"ub85d"ub418"uc9c0 "uc54a"uc740 "ud0a4"uc785"ub2c8"ub2e4.:code:`<br/>`
                          011 :"uc0ac"uc6a9"ud560 "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4.
                          "uc624"ud508API"uc5d0 "ub4f1"ub85d"ub418"uc5c8"uc73c"ub098,
                          "uc77c"uc2dc"uc801"uc73c"ub85c "uc0ac"uc6a9 "uc911"uc9c0"ub41c "ud0a4"ub97c
                          "ud1b5"ud558"uc5ec "uac80"uc0c9"ud558"ub294 "uacbd"uc6b0
                          "ubc1c"uc0dd"ud569"ub2c8"ub2e4.:code:`<br/>` 012 :"uc811"uadfc"ud560 "uc218
                          "uc5c6"ub294 IP"uc785"ub2c8"ub2e4.:code:`<br/>` 013 :"uc870"ud68c"ub41c
                          "ub370"uc774"ud0c0"uac00 "uc5c6"uc2b5"ub2c8"ub2e4.:code:`<br/>` 014
                          :"ud30c"uc77c"uc774 "uc874"uc7ac"ud558"uc9c0
                          "uc54a"uc2b5"ub2c8"ub2e4.:code:`<br/>` 020 :"uc694"uccad "uc81c"ud55c"uc744
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>`
                          "uc801"uc73c"ub85c"ub294 20,000"uac74 "uc774"uc0c1"uc758 "uc694"uccad"uc5d0
                          "ub300"ud558"uc5ec "uc774 "uc5d0"ub7ec "uba54"uc2dc"uc9c0"uac00
                          "ubc1c"uc0dd"ub418"ub098, "uc694"uccad "uc81c"ud55c"uc774 "ub2e4"ub974"uac8c
                          "uc124"uc815"ub41c "uacbd"uc6b0"uc5d0"ub294 "uc774"uc5d0 "uc900"ud558"uc5ec
                          "ubc1c"uc0dd"ub429"ub2c8"ub2e4.:code:`<br/>` 021 :"uc870"ud68c
                          "uac00"ub2a5"ud55c "ud68c"uc0ac "uac1c"uc218"uac00
                          "ucd08"uacfc"ud558"uc600"uc2b5"ub2c8"ub2e4.("ucd5c"ub300
                          100"uac74):code:`<br/>` 100 :"ud544"ub4dc"uc758 "ubd80"uc801"uc808"ud55c
                          "uac12"uc785"ub2c8"ub2e4. "ud544"ub4dc "uc124"uba85"uc5d0 "uc5c6"ub294
                          "uac12"uc744 "uc0ac"uc6a9"ud55c "uacbd"uc6b0"uc5d0 "ubc1c"uc0dd"ud558"ub294
                          "uba54"uc2dc"uc9c0"uc785"ub2c8"ub2e4.:code:`<br/>` 101
                          :"ubd80"uc801"uc808"ud55c "uc811"uadfc"uc785"ub2c8"ub2e4.:code:`<br/>` 800
                          :"uc2dc"uc2a4"ud15c "uc810"uac80"uc73c"ub85c "uc778"ud55c
                          "uc11c"ube44"uc2a4"uac00 "uc911"uc9c0 "uc911"uc785"ub2c8"ub2e4.:code:`<br/>`
                          900 :"uc815"uc758"ub418"uc9c0 "uc54a"uc740 "uc624"ub958"uac00
                          "ubc1c"uc0dd"ud558"uc600"uc2b5"ub2c8"ub2e4.:code:`<br/>` 901
                          :"uc0ac"uc6a9"uc790 "uacc4"uc815"uc758 "uac1c"uc778"uc815"ubcf4
                          "ubcf4"uc720"uae30"uac04"uc774 "ub9cc"ub8cc"ub418"uc5b4 "uc0ac"uc6a9"ud560
                          "uc218 "uc5c6"ub294 "ud0a4"uc785"ub2c8"ub2e4. "uad00"ub9ac"uc790
                          "uc774"uba54"uc77c(opendart@fss.or.kr)"ub85c "ubb38"uc758"ud558"uc2dc"uae30
                          "ubc14"ub78d"ub2c8"ub2e4. Known values are: "000", "010", "011", "012",
                          "013", "014", "020", "021", "100", "101", "800", "900", and "901".
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_dart_get_share_executive_major_stock_request(
            corp_code=corp_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
