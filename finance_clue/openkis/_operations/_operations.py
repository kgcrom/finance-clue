# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/python@6.13.15)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import (
    IO,
    Any,
    Callable,
    Dict,
    Optional,
    Type,
    TypeVar,
    Union,
    cast,
    overload,
)

from azure.core.exceptions import ClientAuthenticationError
from azure.core.exceptions import HttpResponseError
from azure.core.exceptions import ResourceExistsError
from azure.core.exceptions import ResourceNotFoundError
from azure.core.exceptions import ResourceNotModifiedError
from azure.core.exceptions import map_error
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest
from azure.core.rest import HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import GenOpenKisClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import (
        MutableMapping,  # type: ignore  # pylint: disable=ungrouped-imports
    )
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]
]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_gen_open_kis_get_access_token_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop(
        "content_type", _headers.pop("Content-Type", None)
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/oauth2/tokenP"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header(
            "content_type", content_type, "str"
        )
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_gen_open_kis_revoke_access_token_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop(
        "content_type", _headers.pop("Content-Type", None)
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/oauth2/revokeP"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header(
            "content_type", content_type, "str"
        )
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_gen_open_kis_get_hash_key_request(
    *,
    appkey: Optional[str] = None,
    appsecret: Optional[str] = None,
    json: Optional[JSON] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop(
        "content_type", _headers.pop("content-type", None)
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/hashkey"

    # Construct headers
    if content_type is not None:
        _headers["content-type"] = _SERIALIZER.header(
            "content_type", content_type, "str"
        )
    if appkey is not None:
        _headers["appkey"] = _SERIALIZER.header("appkey", appkey, "str")
    if appsecret is not None:
        _headers["appsecret"] = _SERIALIZER.header("appsecret", appsecret, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, json=json, **kwargs)


def build_gen_open_kis_get_domestic_stock_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST01010100",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_conclusion_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST01010300",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-ccnl"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_daily_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_org_adj_prc: str,
    fid_period_div_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST01010400",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-daily-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_org_adj_prc"] = _SERIALIZER.query(
        "fid_org_adj_prc", fid_org_adj_prc, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_period_div_code"] = _SERIALIZER.query(
        "fid_period_div_code", fid_period_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_quote_and_expected_conclusion_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST01010200",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-asking-price-exp-ccn"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_investor_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST01010900",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-investor"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_member_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST01010600",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-member"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_period_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_org_adj_prc: str,
    fid_input_date1: str,
    fid_input_date2: str,
    fid_period_div_code: str,
    custtype: str = "P",
    tr_id: str = "FHKST03010100",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-daily-itemchartprice"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_org_adj_prc"] = _SERIALIZER.query(
        "fid_org_adj_prc", fid_org_adj_prc, "str"
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str", max_length=10
    )
    _params["fid_input_date_2"] = _SERIALIZER.query(
        "fid_input_date2", fid_input_date2, "str", max_length=10
    )
    _params["fid_period_div_code"] = _SERIALIZER.query(
        "fid_period_div_code", fid_period_div_code, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_time_conclusion_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_input_hour1: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST01060000",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-time-itemconclusion"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_input_hour_1"] = _SERIALIZER.query(
        "fid_input_hour1", fid_input_hour1, "str", max_length=10
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_over_time_conclusion_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02310000",
    fid_cond_mrkt_div_code: str = "J",
    fid_hour_cls_code: str = "1",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-time-overtimeconclusion"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_hour_cls_code"] = _SERIALIZER.query(
        "fid_hour_cls_code", fid_hour_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_over_time_daily_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02320000",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-daily-overtimeprice"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_time_minute_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_etc_cls_code: str = "",
    fid_input_hour1: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST03010200",
    fid_cond_mrkt_div_code: str = "J",
    fid_pw_data_incu_yn: str = "N",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-time-itemchartprice"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_etc_cls_code"] = _SERIALIZER.query(
        "fid_etc_cls_code", fid_etc_cls_code, "str"
    )
    _params["fid_input_hour_1"] = _SERIALIZER.query(
        "fid_input_hour1", fid_input_hour1, "str", max_length=6
    )
    _params["fid_pw_data_incu_yn"] = _SERIALIZER.query(
        "fid_pw_data_incu_yn", fid_pw_data_incu_yn, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_price2_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST01010000",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-price-2"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_over_time_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02300000",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-overtime-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_over_time_quote_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02300400",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-overtime-asking-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_closing_expected_conclusion_request(  # pylint: disable=name-too-long
    *,
    fid_rank_sort_cls_code: str = "0",
    fid_input_iscd: str = "0",
    fid_blng_cls_code: str = "0",
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST117300C0",
    fid_cond_mrkt_div_code: str = "J",
    fid_cond_scr_div_code: str = "11173",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/exp-closing-price"

    # Construct parameters
    _params["fid_rank_sort_cls_code"] = _SERIALIZER.query(
        "fid_rank_sort_cls_code", fid_rank_sort_cls_code, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_blng_cls_code"] = _SERIALIZER.query(
        "fid_blng_cls_code", fid_blng_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_vi_status_request(
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str = "0",
    fid_mrkt_cls_code: str = "0",
    fid_rank_sort_cls_code: str = "0",
    fid_input_date1: str,
    fid_trgt_cls_code: str,
    fid_trgt_exls_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST01390000",
    fid_cond_scr_div_code: str = "20139",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-vi-status"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )
    _params["fid_mrkt_cls_code"] = _SERIALIZER.query(
        "fid_mrkt_cls_code", fid_mrkt_cls_code, "str"
    )
    _params["fid_rank_sort_cls_code"] = _SERIALIZER.query(
        "fid_rank_sort_cls_code", fid_rank_sort_cls_code, "str"
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str", pattern=r"^[0-9]{8}$"
    )
    _params["fid_trgt_cls_code"] = _SERIALIZER.query(
        "fid_trgt_cls_code", fid_trgt_cls_code, "str", max_length=32
    )
    _params["fid_trgt_exls_cls_code"] = _SERIALIZER.query(
        "fid_trgt_exls_cls_code", fid_trgt_exls_cls_code, "str", max_length=32
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_credit_by_company_request(  # pylint: disable=name-too-long
    *,
    fid_rank_sort_cls_code: str = "0",
    fid_slct_yn: str = "0",
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST04770000",
    fid_cond_scr_div_code: str = "20477",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/credit-by-company"

    # Construct parameters
    _params["fid_rank_sort_cls_code"] = _SERIALIZER.query(
        "fid_rank_sort_cls_code", fid_rank_sort_cls_code, "str"
    )
    _params["fid_slct_yn"] = _SERIALIZER.query("fid_slct_yn", fid_slct_yn, "str")
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_invest_opinion_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_input_date1: str,
    fid_input_date2: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST663300C0",
    fid_cond_mrkt_div_code: str = "J",
    fid_cond_scr_div_code: str = "16633",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/invest-opinion"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str", max_length=10
    )
    _params["fid_input_date_2"] = _SERIALIZER.query(
        "fid_input_date2", fid_input_date2, "str", max_length=10
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_domestic_stock_securities_opinion_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_input_date1: str,
    fid_input_date2: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST663400C0",
    fid_cond_mrkt_div_code: str = "J",
    fid_cond_scr_div_code: str = "16634",
    fid_div_cls_code: str = "0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/invest-opbysec"

    # Construct parameters
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str"
    )
    _params["fid_input_date_2"] = _SERIALIZER.query(
        "fid_input_date2", fid_input_date2, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_check_domestic_holiday_request(  # pylint: disable=name-too-long
    *,
    bass_dt: str,
    ctx_area_nk: str = "",
    ctx_area_fk: str = "",
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "CTCA0903R",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/chk-holiday"

    # Construct parameters
    _params["bass_dt"] = _SERIALIZER.query("bass_dt", bass_dt, "str", max_length=8)
    _params["ctx_area_nk"] = _SERIALIZER.query(
        "ctx_area_nk", ctx_area_nk, "str", max_length=6
    )
    _params["ctx_area_fk"] = _SERIALIZER.query(
        "ctx_area_fk", ctx_area_fk, "str", max_length=6
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_search_product_info_request(  # pylint: disable=name-too-long
    *,
    pdno: str,
    prdt_type_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "CTPF1604R",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/search-info"

    # Construct parameters
    _params["pdno"] = _SERIALIZER.query("pdno", pdno, "str", max_length=12)
    _params["prdt_type_cd"] = _SERIALIZER.query("prdt_type_cd", prdt_type_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_search_stock_info_request(  # pylint: disable=name-too-long
    *,
    prdt_type_cd: str,
    pdno: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "CTPF1002R",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/search-stock-info"

    # Construct parameters
    _params["prdt_type_cd"] = _SERIALIZER.query("prdt_type_cd", prdt_type_cd, "str")
    _params["pdno"] = _SERIALIZER.query("pdno", pdno, "str", max_length=12)

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_etf_n_etn_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02400000",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/etfetn/v1/quotations/inquire-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_etf_n_etn_nav_comparison_trend_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02440000",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/etfetn/v1/quotations/nav-comparison-trend"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_etf_n_etn_nav_minute_trend_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_hour_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02440100",
    fid_cond_mrkt_div_code: str = "E",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/etfetn/v1/quotations/nav-comparison-time-trend"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_hour_cls_code"] = _SERIALIZER.query(
        "fid_hour_cls_code", fid_hour_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_etf_n_etn_nav_daily_trend_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_input_date1: str,
    fid_input_date2: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST02440200",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/etfetn/v1/quotations/nav-comparison-daily-trend"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str", pattern=r"^[0-9]{8}$"
    )
    _params["fid_input_date_2"] = _SERIALIZER.query(
        "fid_input_date2", fid_input_date2, "str", pattern=r"^[0-9]{8}$"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_etf_n_etn_component_stock_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST121600C0",
    fid_cond_mrkt_div_code: str = "J",
    fid_cond_scr_div_code: str = "11216",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/etfetn/v1/quotations/inquire-component-stock-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_chart_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_input_date1: str,
    fid_input_date2: str,
    fid_period_div_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKUP03500100",
    fid_cond_mrkt_div_code: str = "U",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-daily-indexchartprice"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str", max_length=10
    )
    _params["fid_input_date_2"] = _SERIALIZER.query(
        "fid_input_date2", fid_input_date2, "str", max_length=10
    )
    _params["fid_period_div_code"] = _SERIALIZER.query(
        "fid_period_div_code", fid_period_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_minute_chart_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_etc_cls_code: str,
    fid_input_hour1: str,
    fid_pw_data_incu_yn: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKUP03500200",
    fid_cond_mrkt_div_code: str = "U",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-time-indexchartprice"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_etc_cls_code"] = _SERIALIZER.query(
        "fid_etc_cls_code", fid_etc_cls_code, "str"
    )
    _params["fid_input_hour_1"] = _SERIALIZER.query(
        "fid_input_hour1", fid_input_hour1, "str"
    )
    _params["fid_pw_data_incu_yn"] = _SERIALIZER.query(
        "fid_pw_data_incu_yn", fid_pw_data_incu_yn, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPUP02100000",
    fid_cond_mrkt_div_code: str = "U",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-index-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_daily_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_input_date1: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPUP02120000",
    fid_cond_mrkt_div_code: str = "U",
    fid_period_div_code: str = "D",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-index-daily-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_period_div_code"] = _SERIALIZER.query(
        "fid_period_div_code", fid_period_div_code, "str"
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str", pattern=r"^[0-9]{8}$"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_category_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_mrkt_cls_code: str,
    fid_blng_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPUP02140000",
    fid_cond_mrkt_div_code: str = "U",
    fid_cond_scr_div_code: str = "20214",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-index-category-price"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_mrkt_cls_code"] = _SERIALIZER.query(
        "fid_mrkt_cls_code", fid_mrkt_cls_code, "str"
    )
    _params["fid_blng_cls_code"] = _SERIALIZER.query(
        "fid_blng_cls_code", fid_blng_cls_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_total_expected_conclusion_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_mrkt_cls_code: str,
    fid_mkop_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKUP11750000",
    fid_cond_mrkt_div_code: str = "U",
    fid_cond_scr_div_code: str = "11175",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/exp-total-index"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_mrkt_cls_code"] = _SERIALIZER.query(
        "fid_mrkt_cls_code", fid_mrkt_cls_code, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )
    _params["fid_mkop_cls_code"] = _SERIALIZER.query(
        "fid_mkop_cls_code", fid_mkop_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_tick_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_input_hour1: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPUP02110100",
    fid_cond_mrkt_div_code: str = "U",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-index-tickprice"

    # Construct parameters
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_input_hour_1"] = _SERIALIZER.query(
        "fid_input_hour1", fid_input_hour1, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_minute_price_request(  # pylint: disable=name-too-long
    *,
    fid_input_hour1: str,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPUP02110200",
    fid_cond_mrkt_div_code: str = "U",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-index-timeprice"

    # Construct parameters
    _params["fid_input_hour_1"] = _SERIALIZER.query(
        "fid_input_hour1", fid_input_hour1, "str"
    )
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_expected_conclusion_trend_request(  # pylint: disable=name-too-long
    *,
    fid_mkop_cls_code: str,
    fid_input_hour1: str,
    fid_input_iscd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST01840000",
    fid_cond_mrkt_div_code: str = "U",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/exp-index-trend"

    # Construct parameters
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_mkop_cls_code"] = _SERIALIZER.query(
        "fid_mkop_cls_code", fid_mkop_cls_code, "str"
    )
    _params["fid_input_hour_1"] = _SERIALIZER.query(
        "fid_input_hour1", fid_input_hour1, "str"
    )
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_interest_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code1: str = "",
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHPST07020000",
    fid_cond_mrkt_div_code: str = "I",
    fid_cond_scr_div_code: str = "20702",
    fid_div_cls_code: str = "1",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/comp-interest"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_cond_scr_div_code"] = _SERIALIZER.query(
        "fid_cond_scr_div_code", fid_cond_scr_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )
    _params["fid_div_cls_code1"] = _SERIALIZER.query(
        "fid_div_cls_code1", fid_div_cls_code1, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_index_news_title_request(  # pylint: disable=name-too-long
    *,
    fid_news_ofer_entp_code: str = "",
    fid_cond_mrkt_cls_code: str = "",
    fid_input_iscd: str = "",
    fid_titl_cntt: str = "",
    fid_input_date1: str = "",
    fid_input_hour1: str = "",
    fid_rank_sort_cls_code: str = "",
    fid_input_srno: str = "",
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST01011800",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/news-title"

    # Construct parameters
    _params["fid_news_ofer_entp_code"] = _SERIALIZER.query(
        "fid_news_ofer_entp_code", fid_news_ofer_entp_code, "str", max_length=40
    )
    _params["fid_cond_mrkt_cls_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_cls_code", fid_cond_mrkt_cls_code, "str", max_length=6
    )
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str", max_length=12
    )
    _params["fid_titl_cntt"] = _SERIALIZER.query(
        "fid_titl_cntt", fid_titl_cntt, "str", max_length=132
    )
    _params["fid_input_date_1"] = _SERIALIZER.query(
        "fid_input_date1", fid_input_date1, "str", max_length=10
    )
    _params["fid_input_hour_1"] = _SERIALIZER.query(
        "fid_input_hour1", fid_input_hour1, "str", max_length=10
    )
    _params["fid_rank_sort_cls_code"] = _SERIALIZER.query(
        "fid_rank_sort_cls_code", fid_rank_sort_cls_code, "str", max_length=2
    )
    _params["fid_input_srno"] = _SERIALIZER.query(
        "fid_input_srno", fid_input_srno, "str", max_length=20
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_balance_sheet_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST66430100",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/finance/balance-sheet"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_income_statement_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST66430200",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/finance/income-statement"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_ratio_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST66430300",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/finance/financial-ratio"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_profit_ratio_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST66430400",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/finance/profit-ratio"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_other_major_ratio_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST66430500",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/finance/other-major-ratios"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_stability_ratio_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST66430600",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/finance/stability-ratio"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_growth_ratio_request(  # pylint: disable=name-too-long
    *,
    fid_input_iscd: str,
    fid_div_cls_code: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "FHKST66430800",
    fid_cond_mrkt_div_code: str = "J",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/finance/growth-ratio"

    # Construct parameters
    _params["fid_input_iscd"] = _SERIALIZER.query(
        "fid_input_iscd", fid_input_iscd, "str"
    )
    _params["fid_cond_mrkt_div_code"] = _SERIALIZER.query(
        "fid_cond_mrkt_div_code", fid_cond_mrkt_div_code, "str"
    )
    _params["fid_div_cls_code"] = _SERIALIZER.query(
        "fid_div_cls_code", fid_div_cls_code, "str"
    )

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_financial_estimate_perform_request(  # pylint: disable=name-too-long
    *,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKST668300C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/estimate-perform"

    # Construct parameters
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_dividend_info_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    high_gb: str,
    gb1: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669102C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/dividend"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")
    _params["high_gb"] = _SERIALIZER.query("high_gb", high_gb, "str")
    _params["gb1"] = _SERIALIZER.query("gb1", gb1, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_purchase_request_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669103C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/purreq"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_merger_and_split_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669104C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/merger-split"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_change_par_value_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    market_gb: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669105C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/rev-split"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")
    _params["market_gb"] = _SERIALIZER.query("market_gb", market_gb, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_decrease_capital_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669106C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/cap-dcrs"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_list_info_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669107C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/list-info"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_public_offer_subscription_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669108C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/pub-offer"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_forfeited_stock_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669109C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/forfeit"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_mandatory_deposit_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669110C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/mand-deposit"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_right_issue_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    gb1: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669100C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/paidin-capin"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")
    _params["gb1"] = _SERIALIZER.query("gb1", gb1, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_bonus_issue_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669101C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/bonus-issue"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_ksd_shareholder_meeting_request(  # pylint: disable=name-too-long
    *,
    cts: str = "",
    f_dt: str,
    t_dt: str,
    sht_cd: str,
    personalseckey: Optional[str] = None,
    tr_cont: str = "",
    custtype: str = "P",
    seq_no: Optional[str] = None,
    mac_address: Optional[str] = None,
    phone_number: Optional[str] = None,
    ip_address: Optional[str] = None,
    hashkey: Optional[str] = None,
    gt_uid: Optional[str] = None,
    tr_id: str = "HHKDB669111C0",
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/uapi/domestic-stock/v1/ksdinfo/sharehld-meet"

    # Construct parameters
    _params["cts"] = _SERIALIZER.query("cts", cts, "str")
    _params["f_dt"] = _SERIALIZER.query("f_dt", f_dt, "str")
    _params["t_dt"] = _SERIALIZER.query("t_dt", t_dt, "str")
    _params["sht_cd"] = _SERIALIZER.query("sht_cd", sht_cd, "str")

    # Construct headers
    if personalseckey is not None:
        _headers["personalseckey"] = _SERIALIZER.header(
            "personalseckey", personalseckey, "str"
        )
    if tr_cont is not None:
        _headers["tr_cont"] = _SERIALIZER.header("tr_cont", tr_cont, "str")
    if custtype is not None:
        _headers["custtype"] = _SERIALIZER.header("custtype", custtype, "str")
    if seq_no is not None:
        _headers["seq_no"] = _SERIALIZER.header("seq_no", seq_no, "str")
    if mac_address is not None:
        _headers["mac_address"] = _SERIALIZER.header("mac_address", mac_address, "str")
    if phone_number is not None:
        _headers["phone_number"] = _SERIALIZER.header(
            "phone_number", phone_number, "str"
        )
    if ip_address is not None:
        _headers["ip_address"] = _SERIALIZER.header("ip_address", ip_address, "str")
    if hashkey is not None:
        _headers["hashkey"] = _SERIALIZER.header("hashkey", hashkey, "str")
    if gt_uid is not None:
        _headers["gt_uid"] = _SERIALIZER.header("gt_uid", gt_uid, "str")
    _headers["tr_id"] = _SERIALIZER.header("tr_id", tr_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_kis_get_technical_foreign_institution_total_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/foreign-institution-total"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_personal_search_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/psearch-title"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_personal_search_detail_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/psearch-result"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_program_trade_by_stock_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/program-trade-by-stock"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_investor_trend_estimate_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/investor-trend-estimate"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_trade_daily_volume_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-daily-trade-volume"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_investor_trend_by_market_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-investor-time-by-market"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_credit_balance_daily_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/daily-credit-balance"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_expected_conclusion_trend_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/exp-price-trend"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_short_sale_daily_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/daily-short-sale"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_program_trade_daily_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/comp-program-trade-daily"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_over_time_exp_fluctuation_rate_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/overtime-exp-trans-fluct"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_program_trade_today_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/comp-program-trade-today"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_foreign_trade_estimate_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/frgnmem-trade-estimate"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_foreign_purchase_trend_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/frgnmem-pchs-trend"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_trade_by_amount_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/tradprt-byamt"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_market_fund_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/mktfunds"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_investor_trend_by_market_daily_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-investor-daily-by-market"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_program_trade_by_stock_daily_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/program-trade-by-stock-daily"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_program_trend_by_investor_today_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/investor-program-trade-today"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_capture_up_low_price_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/capture-uplowprice"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_volume_profile_indicator_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/pbar-tratio"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_technical_member_trend_daily_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/inquire-member-daily"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_volume_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/quotations/volume-rank"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_fluctuation_rate_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/fluctuation"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_profit_asset_index_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/profit-asset-index"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_market_cap_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/market-cap"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_financial_ratio_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/finance-ratio"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_after_hour_balance_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/after-hour-balance"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_prefer_disparate_ratio_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/prefer-disparate-ratio"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_quote_balance_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/quote-balance"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_disparity_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/disparity"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_market_value_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/market-value"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_volume_power_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/volume-power"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_top_interest_stock_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/top-interest-stock"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_expected_conclusion_up_down_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/exp-trans-updown"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_trade_by_company_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/traded-by-company"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_near_new_high_low_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/near-new-highlow"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_bulk_trans_num_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/bulk-trans-num"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_short_sale_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/short-sale"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_credit_balance_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/credit-balance"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_dividend_rate_request(
    **kwargs: Any,
) -> HttpRequest:  # pylint: disable=name-too-long
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/dividend-rate"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_over_time_fluctuation_rate_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/overtime-fluctuation"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_gen_open_kis_get_ranking_over_time_volume_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    # Construct URL
    _url = "/uapi/domestic-stock/v1/ranking/overtime-volume"

    return HttpRequest(method="GET", url=_url, **kwargs)


class GenOpenKisClientOperationsMixin(
    GenOpenKisClientMixinABC
):  # pylint: disable=too-many-public-methods

    @overload
    def get_access_token(
        self,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """접근 토큰 발급.

        본인 계좌에 필요한 인증 절차로, 인증을 통해 접근 토큰을 부여받아 오픈API 활용이 가능합니다.

        [참고]
        '23.4.28 이후 지나치게 잦은 토큰 발급 요청건을 제어 하기 위해 신규 접근토큰발급 이후 일정시간 이내에 재호출 시에는 직전 토큰값을 리턴하게 되었습니다. 일정시간
        이후 접근토큰발급 API 호출 시에는 신규 토큰값을 리턴합니다.
        접근토큰발급 API 호출 및 코드 작성하실 때 해당 사항을 참고하시길 바랍니다.

        :param body: Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "appkey": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appkey
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "appsecret": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appsecret
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "grant_type": "str"  # "uc778"uc99d"ubc29"uc2dd (client_credentials
                      "uace0"uc815). Required.
                }

                # response body for status code(s): 200
                response == {
                    "access_token": "str",  # Optional. OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token:code:`<br/>`
                      ex) "eyJ0eXUxMiJ9.eyJz"u2026..................................."   *
                      "uc77c"ubc18"uac1c"uc778"uace0"uac1d/"uc77c"ubc18"ubc95"uc778"uace0"uac1d:code:`<br/>`
                      . Access token "uc720"ud6a8"uae30"uac04 1"uc77c:code:`<br/>`   ..
                      "uc77c"uc815"uc2dc"uac04(6"uc2dc"uac04) "uc774"ub0b4"uc5d0 "uc7ac"ud638"ucd9c
                      "uc2dc"uc5d0"ub294 "uc9c1"uc804 "ud1a0"ud070"uac12"uc744
                      "ub9ac"ud134:code:`<br/>`   . OAuth 2.0"uc758 Client Credentials Grant
                      "uc808"ucc28"ub97c "uc900"uc6a9  *    "uc81c"ud734"ubc95"uc778:code:`<br/>`   .
                      Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4:code:`<br/>`   . Refresh
                      token "uc720"ud6a8"uae30"uac04 1"ub144:code:`<br/>`   . OAuth 2.0"uc758
                      Authorization Code Grant "uc808"ucc28"ub97c "uc900"uc6a9.
                    "access_token_token_expire": "2020-02-20 00:00:00",  # Optional. Access token
                      "ub9cc"ub8cc"uc2dc"uac04 ("ub144:"uc6d4:"uc77c "uc2dc:"ubd84:"ucd08).
                    "expires_in": 0,  # Optional. Access token "ub9cc"ub8cc"uc2dc"uac04 ("ucd08).
                    "token_type": "str"  # Optional. "uc811"uadfc"ud1a0"ud070"uc720"ud615 (Bearer
                      "uace0"uc815).
                }
        """

    @overload
    def get_access_token(
        self,
        body: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """접근 토큰 발급.

        본인 계좌에 필요한 인증 절차로, 인증을 통해 접근 토큰을 부여받아 오픈API 활용이 가능합니다.

        [참고]
        '23.4.28 이후 지나치게 잦은 토큰 발급 요청건을 제어 하기 위해 신규 접근토큰발급 이후 일정시간 이내에 재호출 시에는 직전 토큰값을 리턴하게 되었습니다. 일정시간
        이후 접근토큰발급 API 호출 시에는 신규 토큰값을 리턴합니다.
        접근토큰발급 API 호출 및 코드 작성하실 때 해당 사항을 참고하시길 바랍니다.

        :param body: Default value is None.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "access_token": "str",  # Optional. OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token:code:`<br/>`
                      ex) "eyJ0eXUxMiJ9.eyJz"u2026..................................."   *
                      "uc77c"ubc18"uac1c"uc778"uace0"uac1d/"uc77c"ubc18"ubc95"uc778"uace0"uac1d:code:`<br/>`
                      . Access token "uc720"ud6a8"uae30"uac04 1"uc77c:code:`<br/>`   ..
                      "uc77c"uc815"uc2dc"uac04(6"uc2dc"uac04) "uc774"ub0b4"uc5d0 "uc7ac"ud638"ucd9c
                      "uc2dc"uc5d0"ub294 "uc9c1"uc804 "ud1a0"ud070"uac12"uc744
                      "ub9ac"ud134:code:`<br/>`   . OAuth 2.0"uc758 Client Credentials Grant
                      "uc808"ucc28"ub97c "uc900"uc6a9  *    "uc81c"ud734"ubc95"uc778:code:`<br/>`   .
                      Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4:code:`<br/>`   . Refresh
                      token "uc720"ud6a8"uae30"uac04 1"ub144:code:`<br/>`   . OAuth 2.0"uc758
                      Authorization Code Grant "uc808"ucc28"ub97c "uc900"uc6a9.
                    "access_token_token_expire": "2020-02-20 00:00:00",  # Optional. Access token
                      "ub9cc"ub8cc"uc2dc"uac04 ("ub144:"uc6d4:"uc77c "uc2dc:"ubd84:"ucd08).
                    "expires_in": 0,  # Optional. Access token "ub9cc"ub8cc"uc2dc"uac04 ("ucd08).
                    "token_type": "str"  # Optional. "uc811"uadfc"ud1a0"ud070"uc720"ud615 (Bearer
                      "uace0"uc815).
                }
        """

    @distributed_trace
    def get_access_token(
        self, body: Optional[Union[JSON, IO[bytes]]] = None, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """접근 토큰 발급.

        본인 계좌에 필요한 인증 절차로, 인증을 통해 접근 토큰을 부여받아 오픈API 활용이 가능합니다.

        [참고]
        '23.4.28 이후 지나치게 잦은 토큰 발급 요청건을 제어 하기 위해 신규 접근토큰발급 이후 일정시간 이내에 재호출 시에는 직전 토큰값을 리턴하게 되었습니다. 일정시간
        이후 접근토큰발급 API 호출 시에는 신규 토큰값을 리턴합니다.
        접근토큰발급 API 호출 및 코드 작성하실 때 해당 사항을 참고하시길 바랍니다.

        :param body: Is either a JSON type or a IO[bytes] type. Default value is None.
        :type body: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "appkey": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appkey
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "appsecret": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appsecret
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "grant_type": "str"  # "uc778"uc99d"ubc29"uc2dd (client_credentials
                      "uace0"uc815). Required.
                }

                # response body for status code(s): 200
                response == {
                    "access_token": "str",  # Optional. OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token:code:`<br/>`
                      ex) "eyJ0eXUxMiJ9.eyJz"u2026..................................."   *
                      "uc77c"ubc18"uac1c"uc778"uace0"uac1d/"uc77c"ubc18"ubc95"uc778"uace0"uac1d:code:`<br/>`
                      . Access token "uc720"ud6a8"uae30"uac04 1"uc77c:code:`<br/>`   ..
                      "uc77c"uc815"uc2dc"uac04(6"uc2dc"uac04) "uc774"ub0b4"uc5d0 "uc7ac"ud638"ucd9c
                      "uc2dc"uc5d0"ub294 "uc9c1"uc804 "ud1a0"ud070"uac12"uc744
                      "ub9ac"ud134:code:`<br/>`   . OAuth 2.0"uc758 Client Credentials Grant
                      "uc808"ucc28"ub97c "uc900"uc6a9  *    "uc81c"ud734"ubc95"uc778:code:`<br/>`   .
                      Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4:code:`<br/>`   . Refresh
                      token "uc720"ud6a8"uae30"uac04 1"ub144:code:`<br/>`   . OAuth 2.0"uc758
                      Authorization Code Grant "uc808"ucc28"ub97c "uc900"uc6a9.
                    "access_token_token_expire": "2020-02-20 00:00:00",  # Optional. Access token
                      "ub9cc"ub8cc"uc2dc"uac04 ("ub144:"uc6d4:"uc77c "uc2dc:"ubd84:"ucd08).
                    "expires_in": 0,  # Optional. Access token "ub9cc"ub8cc"uc2dc"uac04 ("ucd08).
                    "token_type": "str"  # Optional. "uc811"uadfc"ud1a0"ud070"uc720"ud615 (Bearer
                      "uace0"uc815).
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_gen_open_kis_get_access_token_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def revoke_access_token(
        self,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """접근 토큰 폐기.

        부여받은 접큰토큰을 더 이상 활용하지 않을 때 사용합니다.

        :param body: Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "appkey": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appkey
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "appsecret": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appsecret
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "token": "str"  # "uc811"uadfc"ud1a0"ud070  OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token:code:`<br/>`
                      "uc77c"ubc18"uace0"uac1d(Access token "uc720"ud6a8"uae30"uac04 1"uc77c, OAuth
                      2.0"uc758 Client Credentials Grant "uc808"ucc28"ub97c "uc900"uc6a9):code:`<br/>`
                      "ubc95"uc778(Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4, Refresh token
                      "uc720"ud6a8"uae30"uac04 1"ub144, OAuth 2.0"uc758 Authorization Code Grant
                      "uc808"ucc28"ub97c "uc900"uc6a9). Required.
                }

                # response body for status code(s): 200
                response == {
                    "code": "str",  # Optional. HTTP "uc751"ub2f5"ucf54"ub4dc.
                    "message": "str"  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                }
        """

    @overload
    def revoke_access_token(
        self,
        body: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        """접근 토큰 폐기.

        부여받은 접큰토큰을 더 이상 활용하지 않을 때 사용합니다.

        :param body: Default value is None.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "code": "str",  # Optional. HTTP "uc751"ub2f5"ucf54"ub4dc.
                    "message": "str"  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                }
        """

    @distributed_trace
    def revoke_access_token(
        self, body: Optional[Union[JSON, IO[bytes]]] = None, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """접근 토큰 폐기.

        부여받은 접큰토큰을 더 이상 활용하지 않을 때 사용합니다.

        :param body: Is either a JSON type or a IO[bytes] type. Default value is None.
        :type body: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "appkey": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appkey
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "appsecret": "str",  # "ud55c"uad6d"ud22c"uc790"uc99d"uad8c
                      "ud648"ud398"uc774"uc9c0"uc5d0"uc11c "ubc1c"uae09"ubc1b"uc740 appsecret
                      ("uc808"ub300 "ub178"ucd9c"ub418"uc9c0 "uc54a"ub3c4"ub85d
                      "uc8fc"uc758"ud574"uc8fc"uc138"uc694.). Required.
                    "token": "str"  # "uc811"uadfc"ud1a0"ud070  OAuth "ud1a0"ud070"uc774
                      "ud544"uc694"ud55c API "uacbd"uc6b0 "ubc1c"uae09"ud55c Access token:code:`<br/>`
                      "uc77c"ubc18"uace0"uac1d(Access token "uc720"ud6a8"uae30"uac04 1"uc77c, OAuth
                      2.0"uc758 Client Credentials Grant "uc808"ucc28"ub97c "uc900"uc6a9):code:`<br/>`
                      "ubc95"uc778(Access token "uc720"ud6a8"uae30"uac04 3"uac1c"uc6d4, Refresh token
                      "uc720"ud6a8"uae30"uac04 1"ub144, OAuth 2.0"uc758 Authorization Code Grant
                      "uc808"ucc28"ub97c "uc900"uc6a9). Required.
                }

                # response body for status code(s): 200
                response == {
                    "code": "str",  # Optional. HTTP "uc751"ub2f5"ucf54"ub4dc.
                    "message": "str"  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_gen_open_kis_revoke_access_token_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_hash_key(
        self,
        body: Optional[JSON] = None,
        *,
        appkey: Optional[str] = None,
        appsecret: Optional[str] = None,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Hashkey 생성.

        해쉬키(Hashkey)는 보안을 위한 요소로 사용자가 보낸 요청 값을 중간에 탈취하여 변조하지 못하도록 하는데 사용됩니다.:code:`<br/>`
        해쉬키를 사용하면 POST로 보내는 요청(주로 주문/정정/취소 API 해당)의 body 값을 사전에 암호화시킬 수 있습니다.:code:`<br/>`
        해쉬키는 비필수값으로 사용하지 않아도 POST API 호출은 가능합니다.

        :param body: Default value is None.
        :type body: JSON
        :keyword appkey: Default value is None.
        :paramtype appkey: str
        :keyword appsecret: Default value is None.
        :paramtype appsecret: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "BODY": {},  # Optional. "ud574"uc26c"ud0a4 "uc0dd"uc131 "uc694"uccad Body
                      "ub370"uc774"ud130.
                    "HASH": "str"  # Optional. [POST API "ub300"uc0c1] Client"uac00
                      "uc694"uccad"ud558"ub294 Request Body"ub97c hashkey api"ub85c "uc0dd"uc131"ud55c
                      Hash"uac12   * API"ubb38"uc11c > hashkey "ucc38"uc870.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop(
            "content_type", _headers.pop("content-type", "application/json")
        )
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        if body is not None:
            _json = body
        else:
            _json = None

        _request = build_gen_open_kis_get_hash_key_request(
            appkey=appkey,
            appsecret=appsecret,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_price(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST01010100",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 시세 조회.

        주식 현재가 시세 API입니다. 실시간 시세를 원하신다면 웹소켓 API를 활용하세요.

        ※ 종목코드 마스터파일 파이썬 정제코드는 한국투자증권 Github 참고 부탁드립니다.:code:`<br/>`
          https://github.com/koreainvestment/open-trading-api/tree/main/stocks_info.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKST01010100 : 주식현재가 시세. "FHKST01010100" Default value is "FHKST01010100".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식, ETF, ETN:code:`<br/>`
         W: ELW. Known values are: "J" and "W". Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "apprch_rate": "str",  # Optional. "uc811"uadfc"ub3c4.
                        "aspr_unit": "str",  # Optional. "ud638"uac00"ub2e8"uc704.
                        "bps": "str",  # Optional. BPS.
                        "bstp_kor_isnm": "str",  # Optional. "uc5c5"uc885 "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "clpr_rang_cont_yn": "str",  # Optional. "uc885"uac00 "ubc94"uc704
                          "uc5f0"uc7a5 "uc5ec"ubd80. Known values are: "Y" and "N".
                        "cpfn": "str",  # Optional. "uc790"ubcf8"uae08.
                        "cpfn_cnnm": "str",  # Optional. "uc790"ubcf8"uae08
                          "ud1b5"ud654"uba85:code:`<br/>` "uc678"uad6d"uc8fc"uad8c"uc740
                          "uc5b5"uc73c"ub85c "ub5a8"uc5b4"uc9c0"uba70, "uadf8 "uc678"uc5d0"ub294
                          "ub9cc"uc73c"ub85c "ud45c"uc2dc"ub428.
                        "crdt_able_yn": "str",  # Optional. "uc2e0"uc6a9 "uac00"ub2a5
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "d250_hgpr": "str",  # Optional. 250"uc77c "ucd5c"uace0"uac00.
                        "d250_hgpr_date": "str",  # Optional. 250"uc77c "ucd5c"uace0"uac00
                          "uc77c"uc790.
                        "d250_hgpr_vrss_prpr_rate": "str",  # Optional. 250"uc77c
                          "ucd5c"uace0"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "d250_lwpr": "str",  # Optional. 250"uc77c "ucd5c"uc800"uac00.
                        "d250_lwpr_date": "str",  # Optional. 250"uc77c "ucd5c"uc800"uac00
                          "uc77c"uc790.
                        "d250_lwpr_vrss_prpr_rate": "str",  # Optional. 250"uc77c
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "dryy_hgpr_date": "str",  # Optional. "uc5f0"uc911 "ucd5c"uace0"uac00
                          "uc77c"uc790.
                        "dryy_hgpr_vrss_prpr_rate": "str",  # Optional. "uc5f0"uc911
                          "ucd5c"uace0"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "dryy_lwpr_date": "str",  # Optional. "uc5f0"uc911 "ucd5c"uc800"uac00
                          "uc77c"uc790.
                        "dryy_lwpr_vrss_prpr_rate": "str",  # Optional. "uc5f0"uc911
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "elw_pblc_yn": "str",  # Optional. ELW "ubc1c"ud589 "uc5ec"ubd80.
                          Known values are: "Y" and "N".
                        "eps": "str",  # Optional. EPS.
                        "fcam_cnnm": "str",  # Optional. "uc561"uba74"uac00
                          "ud1b5"ud654"uba85.
                        "frgn_hldn_qty": "str",  # Optional. "uc678"uad6d"uc778 "ubcf4"uc720
                          "uc218"ub7c9.
                        "frgn_ntby_qty": "str",  # Optional. "uc678"uad6d"uc778
                          "uc21c"ub9e4"uc218 "uc218"ub7c9.
                        "grmn_rate_cls_code": "str",  # Optional. "ubcf4"uc99d"uae08
                          "ube44"uc728 "uad6c"ubd84 "ucf54"ub4dc  "ud55c"uad6d"ud22c"uc790
                          "uc99d"uac70"uae08"ube44"uc728 (marg_rate "ucc38"uace0) 40 : 20%, 30%, 40% 50
                          : 50% 60 : 60%. Known values are: "40", "50", and "60".
                        "hts_avls": "str",  # Optional. HTS "uc2dc"uac00"ucd1d"uc561.
                        "hts_deal_qty_unit_val": "str",  # Optional. HTS "ub9e4"ub9e4
                          "uc218"ub7c9 "ub2e8"uc704 "uac12.
                        "hts_frgn_ehrt": "str",  # Optional. HTS "uc678"uad6d"uc778
                          "uc18c"uc9c4"uc728.
                        "invt_caful_yn": "str",  # Optional.
                          "ud22c"uc790"uc720"uc758"uc5ec"ubd80. Known values are: "Y" and "N".
                        "iscd_stat_cls_code": "str",  # Optional.
                          "uc885"ubaa9"uc0c1"ud0dc"uad6c"ubd84"ucf54"ub4dc  00 :
                          "uadf8"uc678:code:`<br/>` 51 : "uad00"ub9ac"uc885"ubaa9:code:`<br/>` 52 :
                          "ud22c"uc790"uc704"ud5d8:code:`<br/>` 53 :
                          "ud22c"uc790"uacbd"uace0:code:`<br/>` 54 :
                          "ud22c"uc790"uc8fc"uc758:code:`<br/>` 55 :
                          "uc2e0"uc6a9"uac00"ub2a5:code:`<br/>` 57 : "uc99d"uac70"uae08
                          100%:code:`<br/>` 58 : "uac70"ub798"uc815"uc9c0:code:`<br/>` 59 :
                          "ub2e8"uae30"uacfc"uc5f4. Known values are: "00", "51", "52", "53", "54",
                          "55", "57", "58", and "59".
                        "last_ssts_cntg_qty": "str",  # Optional. "ucd5c"uc885
                          "uacf5"ub9e4"ub3c4 "uccb4"uacb0 "uc218"ub7c9.
                        "lstn_stcn": "str",  # Optional. "uc0c1"uc7a5 "uc8fc"uc218.
                        "marg_rate": "str",  # Optional. "uc99d"uac70"uae08 "ube44"uc728.
                        "mrkt_warn_cls_code": "str",  # Optional.
                          "uc2dc"uc7a5"uacbd"uace0"ucf54"ub4dc  00 : "uc5c6"uc74c 01 :
                          "ud22c"uc790"uc8fc"uc758 02 : "ud22c"uc790"uacbd"uace0 03 :
                          "ud22c"uc790"uc704"ud5d8. Known values are: "00", "01", "02", and "03".
                        "new_hgpr_lwpr_cls_code": "str",  # Optional. "uc2e0 "uace0"uac00
                          "uc800"uac00 "uad6c"ubd84 "ucf54"ub4dc:code:`<br/>` "uc870"ud68c"ud558"ub294
                          "uc885"ubaa9"uc774 "uc2e0"uace0/"uc2e0"uc800"uc5d0 "ub3c4"ub2ec"ud588"uc744
                          "uacbd"uc6b0"uc5d0"ub9cc "uc870"ud68c"ub428.
                        "oprc_rang_cont_yn": "str",  # Optional. "uc2dc"uac00 "ubc94"uc704
                          "uc5f0"uc7a5 "uc5ec"ubd80. Known values are: "Y" and "N".
                        "ovtm_vi_cls_code": "str",  # Optional.
                          "uc2dc"uac04"uc678"ub2e8"uc77c"uac00VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc.
                          Known values are: "Y" and "N".
                        "pbr": "str",  # Optional. PBR.
                        "per": "str",  # Optional. PER.
                        "pgtr_ntby_qty": "str",  # Optional.
                          "ud504"ub85c"uadf8"ub7a8"ub9e4"ub9e4 "uc21c"ub9e4"uc218 "uc218"ub7c9.
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "prdy_vrss_vol_rate": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "uac70"ub798"ub7c9 "ube44"uc728:code:`<br/>` "uc8fc"uc2dd"ud604"uc7ac"uac00
                          "uc77c"uc790"ubcc4 API "uc751"ub2f5"uac12 "uc0ac"uc6a9.
                        "rprs_mrkt_kor_name": "str",  # Optional. "ub300"ud45c "uc2dc"uc7a5
                          "ud55c"uae00 "uba85.
                        "rstc_wdth_prc": "str",  # Optional. "uc81c"ud55c "ud3ed
                          "uac00"uaca9.
                        "short_over_yn": "str",  # Optional.
                          "ub2e8"uae30"uacfc"uc5f4"uc5ec"ubd80. Known values are: "Y" and "N".
                        "sltr_yn": "str",  # Optional. "uc815"ub9ac"ub9e4"ub9e4"uc5ec"ubd80.
                          Known values are: "Y" and "N".
                        "ssts_yn": "str",  # Optional.
                          "uacf5"ub9e4"ub3c4"uac00"ub2a5"uc5ec"ubd80. Known values are: "Y" and "N".
                        "stac_month": "str",  # Optional. "uacb0"uc0b0 "uc6d4. Known values
                          are: "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", and
                          "12".
                        "stck_dryy_hgpr": "str",  # Optional. "uc8fc"uc2dd "uc5f0"uc911
                          "ucd5c"uace0"uac00.
                        "stck_dryy_lwpr": "str",  # Optional. "uc8fc"uc2dd "uc5f0"uc911
                          "ucd5c"uc800"uac00.
                        "stck_fcam": "str",  # Optional. "uc8fc"uc2dd "uc561"uba74"uac00.
                        "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uace0"uac00.
                        "stck_llam": "str",  # Optional. "uc8fc"uc2dd "ud558"ud55c"uac00.
                        "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uc800"uac00.
                        "stck_mxpr": "str",  # Optional. "uc8fc"uc2dd "uc0c1"ud55c"uac00.
                        "stck_oprc": "str",  # Optional. "uc8fc"uc2dd "uc2dc"uac00.
                        "stck_prpr": "str",  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                        "stck_sdpr": "str",  # Optional. "uc8fc"uc2dd "uae30"uc900"uac00.
                        "stck_shrn_iscd": "str",  # Optional. "uc8fc"uc2dd "ub2e8"ucd95
                          "uc885"ubaa9"ucf54"ub4dc.
                        "stck_sspr": "str",  # Optional. "uc8fc"uc2dd "ub300"uc6a9"uac00.
                        "temp_stop_yn": "str",  # Optional. "uc784"uc2dc "uc815"uc9c0
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "vi_cls_code": "str",  # Optional.
                          VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc. Known values are: "Y" and "N".
                        "vol_tnrt": "str",  # Optional. "uac70"ub798"ub7c9
                          "ud68c"uc804"uc728.
                        "w52_hgpr": "str",  # Optional. 52"uc8fc"uc77c "ucd5c"uace0"uac00.
                        "w52_hgpr_date": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uace0"uac00 "uc77c"uc790.
                        "w52_hgpr_vrss_prpr_ctrt": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uace0"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ub300"ube44.
                        "w52_lwpr": "str",  # Optional. 52"uc8fc"uc77c "ucd5c"uc800"uac00.
                        "w52_lwpr_date": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uc800"uac00 "uc77c"uc790.
                        "w52_lwpr_vrss_prpr_ctrt": "str",  # Optional. 52"uc8fc"uc77c
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ub300"ube44.
                        "wghn_avrg_stck_prc": "str",  # Optional. "uac00"uc911 "ud3c9"uade0
                          "uc8fc"uc2dd "uac00"uaca9.
                        "whol_loan_rmnd_rate": "str"  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc794"uace0 "ube44"uc728.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_price_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_conclusion(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST01010300",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 체결 조회.

        국내현재가 체결 API 입니다. 종목의 체결 정보를 확인할 수 있습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKST01010300 : 주식현재가 체결. "FHKST01010300" Default value is "FHKST01010300".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식, ETF, ETN:code:`<br/>`
         W: ELW. Known values are: "J" and "W". Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "cntg_vol": "str",  # Optional. "uccb4"uacb0
                              "uac70"ub798"ub7c9.
                            "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "stck_cntg_hour": "str",  # Optional. "uc8fc"uc2dd
                              "uccb4"uacb0 "uc2dc"uac04.
                            "stck_prpr": "str",  # Optional. "uc8fc"uc2dd
                              "ud604"uc7ac"uac00.
                            "tday_rltv": "str"  # Optional. "ub2f9"uc77c
                              "uccb4"uacb0"uac15"ub3c4  "uccb4"uacb0"uac70"ub798"uac00
                              "ubc1c"uc0dd"ud558"ub294 "uc2dc"uc810"uc758 "uccb4"uacb0"uac15"ub3c4.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_conclusion_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_daily_price(
        self,
        *,
        fid_input_iscd: str,
        fid_org_adj_prc: str,
        fid_period_div_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST01010400",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 일자별 조회.

        주식현재가 일자별 API입니다. 일/주/월별 주가를 확인할 수 있으며 최근 30일(주,별)로 제한되어 있습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_org_adj_prc: FID 수정주가 원주가 가격

         0 : 수정주가반영:code:`<br/>`
         1 : 수정주가미반영:code:`<br/>`


         * 수정주가는 액면분할/액면병합 등 권리 발생 시 과거 시세를 현재 주가에 맞게 보정한 가격. Known values are: "0" and "1". Required.
        :paramtype fid_org_adj_prc: str
        :keyword fid_period_div_code: FID 기간 분류 코드

         D : (일)최근 30거래일:code:`<br/>`
         W : (주)최근 30주:code:`<br/>`
         M : (월)최근 30개월. Known values are: "D", "W", and "M". Required.
        :paramtype fid_period_div_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKST01010400 : 주식현재가 일자별. "FHKST01010400" Default value is "FHKST01010400".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN. Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "acml_prtt_rate": "str",  # Optional. "ub204"uc801
                              "ubd84"ud560 "ube44"uc728.
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "flng_cls_code": "str",  # Optional. "ub77d "uad6c"ubd84
                              "ucf54"ub4dc  01 : "uad8c"ub9ac"ub77d:code:`<br/>` 02 :
                              "ubc30"ub2f9"ub77d:code:`<br/>` 03 : "ubd84"ubc30"ub77d:code:`<br/>` 04 :
                              "uad8c"ubc30"ub77d:code:`<br/>` 05 :
                              "uc911"uac04("ubd84"uae30)"ubc30"ub2f9"ub77d:code:`<br/>` 06 :
                              "uad8c"ub9ac"uc911"uac04"ubc30"ub2f9"ub77d:code:`<br/>` 07 :
                              "uad8c"ub9ac"ubd84"uae30"ubc30"ub2f9"ub77d. Known values are: "01", "02",
                              "03", "04", "05", "06", and "07".
                            "frgn_ntby_qty": "str",  # Optional. "uc678"uad6d"uc778
                              "uc21c"ub9e4"uc218 "uc218"ub7c9.
                            "hts_frgn_ehrt": "str",  # Optional. HTS "uc678"uad6d"uc778
                              "uc18c"uc9c4"uc728.
                            "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "prdy_vrss_vol_rate": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "uac70"ub798"ub7c9 "ube44"uc728.
                            "stck_bsop_date": "str",  # Optional. "uc8fc"uc2dd
                              "uc601"uc5c5 "uc77c"uc790.
                            "stck_clpr": "str",  # Optional. "uc8fc"uc2dd "uc885"uac00.
                            "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd
                              "ucd5c"uace0"uac00.
                            "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd
                              "ucd5c"uc800"uac00.
                            "stck_oprc": "str"  # Optional. "uc8fc"uc2dd "uc2dc"uac00.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_daily_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_org_adj_prc=fid_org_adj_prc,
            fid_period_div_code=fid_period_div_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_quote_and_expected_conclusion(  # pylint: disable=name-too-long
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST01010200",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 호가/예상체결 조회.

        주식현재가 호가 예상체결 API입니다.

        매수 매도 호가를 확인하실 수 있습니다.:code:`<br/>` 실시간 데이터를 원하신다면 웹소켓 API를 활용하세요.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKST01010200 : 주식현재가 호가 예상체결. "FHKST01010200" Default value is "FHKST01010200".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식, ETF, ETN. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "askp1": "str",  # Optional. "ub9e4"ub3c4"ud638"uac001.
                            "askp10": "str",  # Optional. "ub9e4"ub3c4"ud638"uac0010.
                            "askp2": "str",  # Optional. "ub9e4"ub3c4"ud638"uac002.
                            "askp3": "str",  # Optional. "ub9e4"ub3c4"ud638"uac003.
                            "askp4": "str",  # Optional. "ub9e4"ub3c4"ud638"uac004.
                            "askp5": "str",  # Optional. "ub9e4"ub3c4"ud638"uac005.
                            "askp6": "str",  # Optional. "ub9e4"ub3c4"ud638"uac006.
                            "askp7": "str",  # Optional. "ub9e4"ub3c4"ud638"uac007.
                            "askp8": "str",  # Optional. "ub9e4"ub3c4"ud638"uac008.
                            "askp9": "str",  # Optional. "ub9e4"ub3c4"ud638"uac009.
                            "askp_rsqn1": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c91.
                            "askp_rsqn10": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c910.
                            "askp_rsqn2": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c92.
                            "askp_rsqn3": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c93.
                            "askp_rsqn4": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c94.
                            "askp_rsqn5": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c95.
                            "askp_rsqn6": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c96.
                            "askp_rsqn7": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c97.
                            "askp_rsqn8": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c98.
                            "askp_rsqn9": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00
                              "uc794"ub7c99.
                            "askp_rsqn_icdc1": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac101.
                            "askp_rsqn_icdc10": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac1010.
                            "askp_rsqn_icdc2": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac102.
                            "askp_rsqn_icdc3": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac103.
                            "askp_rsqn_icdc4": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac104.
                            "askp_rsqn_icdc5": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac105.
                            "askp_rsqn_icdc6": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac106.
                            "askp_rsqn_icdc7": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac107.
                            "askp_rsqn_icdc8": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac108.
                            "askp_rsqn_icdc9": "str",  # Optional.
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac109.
                            "aspr_acpt_hour": "str",  # Optional. "ud638"uac00
                              "uc811"uc218 "uc2dc"uac04.
                            "bidp1": "str",  # Optional. "ub9e4"uc218"ud638"uac001.
                            "bidp10": "str",  # Optional. "ub9e4"uc218"ud638"uac0010.
                            "bidp2": "str",  # Optional. "ub9e4"uc218"ud638"uac002.
                            "bidp3": "str",  # Optional. "ub9e4"uc218"ud638"uac003.
                            "bidp4": "str",  # Optional. "ub9e4"uc218"ud638"uac004.
                            "bidp5": "str",  # Optional. "ub9e4"uc218"ud638"uac005.
                            "bidp6": "str",  # Optional. "ub9e4"uc218"ud638"uac006.
                            "bidp7": "str",  # Optional. "ub9e4"uc218"ud638"uac007.
                            "bidp8": "str",  # Optional. "ub9e4"uc218"ud638"uac008.
                            "bidp9": "str",  # Optional. "ub9e4"uc218"ud638"uac009.
                            "bidp_rsqn1": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c91.
                            "bidp_rsqn10": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c910.
                            "bidp_rsqn2": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c92.
                            "bidp_rsqn3": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c93.
                            "bidp_rsqn4": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c94.
                            "bidp_rsqn5": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c95.
                            "bidp_rsqn6": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c96.
                            "bidp_rsqn7": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c97.
                            "bidp_rsqn8": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c98.
                            "bidp_rsqn9": "str",  # Optional. "ub9e4"uc218"ud638"uac00
                              "uc794"ub7c99.
                            "bidp_rsqn_icdc1": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac101.
                            "bidp_rsqn_icdc10": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac1010.
                            "bidp_rsqn_icdc2": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac102.
                            "bidp_rsqn_icdc3": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac103.
                            "bidp_rsqn_icdc4": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac104.
                            "bidp_rsqn_icdc5": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac105.
                            "bidp_rsqn_icdc6": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac106.
                            "bidp_rsqn_icdc7": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac107.
                            "bidp_rsqn_icdc8": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac108.
                            "bidp_rsqn_icdc9": "str",  # Optional.
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac109.
                            "new_mkop_cls_code": "str",  # Optional. "uc2e0
                              "uc7a5"uc6b4"uc601 "uad6c"ubd84 "ucf54"ub4dc  '00' : "uc7a5"uc804
                              "uc608"uc0c1"uccb4"uacb0"uac00"uc640 "uc7a5"ub9c8"uac10
                              "ub3d9"uc2dc"ud638"uac00 '49' : "uc7a5"ud6c4
                              "uc608"uc0c1"uccb4"uacb0"uac00  (1) "uccab "ubc88"uc9f8 "ube44"ud2b8 1 :
                              "uc7a5"uac1c"uc2dc"uc804 2 : "uc7a5"uc911 3 : "uc7a5"uc885"ub8cc"ud6c4 4
                              : "uc2dc"uac04"uc678"ub2e8"uc77c"uac00 7 : "uc77c"ubc18Buy-in 8 :
                              "ub2f9"uc77cBuy-in (2) "ub450 "ubc88"uc9f8 "ube44"ud2b8 0 : "ubcf4"ud1b5
                              1 : "uc885"uac00 2 : "ub300"ub7c9 3 : "ubc14"uc2a4"ucf13 7 :
                              "uc815"ub9ac"ub9e4"ub9e4 8 : Buy-in.
                            "ntby_aspr_rsqn": "str",  # Optional. "uc21c"ub9e4"uc218
                              "ud638"uac00 "uc794"ub7c9.
                            "ovtm_total_askp_icdc": "str",  # Optional.
                              "uc2dc"uac04"uc678 "ucd1d "ub9e4"ub3c4"ud638"uac00 "uc99d"uac10.
                            "ovtm_total_askp_rsqn": "str",  # Optional.
                              "uc2dc"uac04"uc678 "ucd1d "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9.
                            "ovtm_total_bidp_icdc": "str",  # Optional.
                              "uc2dc"uac04"uc678 "ucd1d "ub9e4"uc218"ud638"uac00 "uc99d"uac10.
                            "ovtm_total_bidp_rsqn": "str",  # Optional.
                              "uc2dc"uac04"uc678 "ucd1d "ub9e4"uc218"ud638"uac00 "uc794"ub7c9.
                            "total_askp_rsqn": "str",  # Optional. "ucd1d
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9.
                            "total_askp_rsqn_icdc": "str",  # Optional. "ucd1d
                              "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac10.
                            "total_bidp_rsqn": "str",  # Optional. "ucd1d
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9.
                            "total_bidp_rsqn_icdc": "str"  # Optional. "ucd1d
                              "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac10.
                        }
                    ],
                    "output2": {
                        "antc_cnpr": "str",  # Optional. "uc608"uc0c1 "uccb4"uacb0"uac00.
                        "antc_cntg_prdy_ctrt": "str",  # Optional. "uc608"uc0c1 "uccb4"uacb0
                          "uc804"uc77c "ub300"ube44"uc728.
                        "antc_cntg_vrss": "str",  # Optional. "uc608"uc0c1 "uccb4"uacb0
                          "ub300"ube44.
                        "antc_cntg_vrss_sign": "str",  # Optional. "uc608"uc0c1 "uccb4"uacb0
                          "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                          "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "antc_mkop_cls_code": "str",  # Optional. "uc608"uc0c1
                          "uc7a5"uc6b4"uc601 "uad6c"ubd84 "ucf54"ub4dc  311 :
                          "uc608"uc0c1"uccb4"uacb0"uc2dc"uc791 112 :
                          "uc608"uc0c1"uccb4"uacb0"uc885"ub8cc. Known values are: "311" and "112".
                        "antc_vol": "str",  # Optional. "uc608"uc0c1 "uac70"ub798"ub7c9.
                        "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uace0"uac00.
                        "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uc800"uac00.
                        "stck_oprc": "str",  # Optional. "uc8fc"uc2dd "uc2dc"uac00.
                        "stck_prpr": "str",  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                        "stck_sdpr": "str",  # Optional. "uc8fc"uc2dd "uae30"uc900"uac00.
                        "stck_shrn_iscd": "str",  # Optional. "uc8fc"uc2dd "ub2e8"ucd95
                          "uc885"ubaa9"ucf54"ub4dc.
                        "vi_cls_code": "str"  # Optional.
                          VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc. Known values are: "Y" and "N".
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_kis_get_domestic_stock_quote_and_expected_conclusion_request(
                fid_input_iscd=fid_input_iscd,
                personalseckey=personalseckey,
                tr_cont=tr_cont,
                custtype=custtype,
                seq_no=seq_no,
                mac_address=mac_address,
                phone_number=phone_number,
                ip_address=ip_address,
                hashkey=hashkey,
                gt_uid=gt_uid,
                tr_id=tr_id,
                fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_investor(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST01010900",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 투자자 조회.

        주식현재가 투자자 API입니다. 개인, 외국인, 기관 등 투자 정보를 확인할 수 있습니다.

        [유의사항]:code:`<br/>`


        * 외국인은 외국인(외국인투자등록 고유번호가 있는 경우)+기타 외국인을 지칭합니다.:code:`<br/>`
        * 당일 데이터는 장 종료 후 제공됩니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKST01010900 : 주식현재가 투자자. "FHKST01010900" Default value is "FHKST01010900".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식, ETF, ETN. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "frgn_ntby_qty": "str",  # Optional. "uc678"uad6d"uc778
                              "uc21c"ub9e4"uc218 "uc218"ub7c9.
                            "frgn_ntby_tr_pbmn": "str",  # Optional. "uc678"uad6d"uc778
                              "uc21c"ub9e4"uc218 "uac70"ub798 "ub300"uae08.
                            "frgn_seln_tr_pbmn": "str",  # Optional. "uc678"uad6d"uc778
                              "ub9e4"ub3c4 "uac70"ub798 "ub300"uae08.
                            "frgn_seln_vol": "str",  # Optional. "uc678"uad6d"uc778
                              "ub9e4"ub3c4 "uac70"ub798"ub7c9.
                            "frgn_shnu_tr_pbmn": "str",  # Optional. "uc678"uad6d"uc778
                              "ub9e4"uc2182 "uac70"ub798 "ub300"uae08.
                            "frgn_shnu_vol": "str",  # Optional. "uc678"uad6d"uc778
                              "ub9e4"uc2182 "uac70"ub798"ub7c9.
                            "orgn_ntby_qty": "str",  # Optional. "uae30"uad00"uacc4
                              "uc21c"ub9e4"uc218 "uc218"ub7c9.
                            "orgn_ntby_tr_pbmn": "str",  # Optional. "uae30"uad00"uacc4
                              "uc21c"ub9e4"uc218 "uac70"ub798 "ub300"uae08.
                            "orgn_seln_tr_pbmn": "str",  # Optional. "uae30"uad00"uacc4
                              "ub9e4"ub3c4 "uac70"ub798 "ub300"uae08.
                            "orgn_seln_vol": "str",  # Optional. "uae30"uad00"uacc4
                              "ub9e4"ub3c4 "uac70"ub798"ub7c9.
                            "orgn_shnu_tr_pbmn": "str",  # Optional. "uae30"uad00"uacc4
                              "ub9e4"uc2182 "uac70"ub798 "ub300"uae08.
                            "orgn_shnu_vol": "str",  # Optional. "uae30"uad00"uacc4
                              "ub9e4"uc2182 "uac70"ub798"ub7c9.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "prsn_ntby_qty": "str",  # Optional. "uac1c"uc778
                              "uc21c"ub9e4"uc218 "uc218"ub7c9.
                            "prsn_ntby_tr_pbmn": "str",  # Optional. "uac1c"uc778
                              "uc21c"ub9e4"uc218 "uac70"ub798 "ub300"uae08.
                            "prsn_seln_tr_pbmn": "str",  # Optional. "uac1c"uc778
                              "ub9e4"ub3c4 "uac70"ub798 "ub300"uae08.
                            "prsn_seln_vol": "str",  # Optional. "uac1c"uc778
                              "ub9e4"ub3c4 "uac70"ub798"ub7c9.
                            "prsn_shnu_tr_pbmn": "str",  # Optional. "uac1c"uc778
                              "ub9e4"uc2182 "uac70"ub798 "ub300"uae08.
                            "prsn_shnu_vol": "str",  # Optional. "uac1c"uc778
                              "ub9e4"uc2182 "uac70"ub798"ub7c9.
                            "stck_bsop_date": "str",  # Optional. "uc8fc"uc2dd
                              "uc601"uc5c5 "uc77c"uc790.
                            "stck_clpr": "str"  # Optional. "uc8fc"uc2dd "uc885"uac00.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_investor_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_member(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST01010600",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 회원사 조회.

        주식 현재가 회원사 API입니다. 회원사의 투자 정보를 확인할 수 있습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKST01010600 : 주식현재가 회원사. "FHKST01010600" Default value is "FHKST01010600".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식, ETF, ETN. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_member_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_period_price(
        self,
        *,
        fid_input_iscd: str,
        fid_org_adj_prc: str,
        fid_input_date1: str,
        fid_input_date2: str,
        fid_period_div_code: str,
        custtype: str = "P",
        tr_id: str = "FHKST03010100",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 기간별 시세(일/주/월/년) 조회.

        국내주식기간별시세(일/주/월/년) API입니다.:code:`<br/>`
        실전계좌/모의계좌의 경우, 한 번의 호출에 최대 100건까지 확인 가능합니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_org_adj_prc: FID 수정주가 원주가 가격

         0 : 수정주가반영:code:`<br/>`
         1 : 수정주가미반영:code:`<br/>`


         * 수정주가는 액면분할/액면병합 등 권리 발생 시 과거 시세를 현재 주가에 맞게 보정한 가격. Known values are: "0" and "1". Required.
        :paramtype fid_org_adj_prc: str
        :keyword fid_input_date1: 입력 날짜 (시작):code:`<br/>`
         조회 시작일자 (ex. 20220501). Required.
        :paramtype fid_input_date1: str
        :keyword fid_input_date2: 입력 날짜 (종료):code:`<br/>`
         조회 종료일자 (ex. 20220530). Required.
        :paramtype fid_input_date2: str
        :keyword fid_period_div_code: 기간 분류 코드

         D : 일봉:code:`<br/>`
         W : 주봉:code:`<br/>`
         M : 월봉:code:`<br/>`
         Y : 년봉. Known values are: "D", "W", "M", and "Y". Required.
        :paramtype fid_period_div_code: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKST03010100 : 국내주식 기간별 시세(일/주/월/년). "FHKST03010100" Default value is "FHKST03010100".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN. Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "askp": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00.
                        "bidp": "str",  # Optional. "ub9e4"uc218"ud638"uac00.
                        "cpfn": "str",  # Optional. "uc790"ubcf8"uae08.
                        "eps": "str",  # Optional. EPS.
                        "hts_avls": "str",  # Optional. HTS "uc2dc"uac00"ucd1d"uc561.
                        "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "itewhol_loan_rmnd_ratem": "str",  # Optional. "uc804"uccb4
                          "uc735"uc790 "uc794"uace0 "ube44"uc728.
                        "lstn_stcn": "str",  # Optional. "uc0c1"uc7a5 "uc8fc"uc218.
                        "output2": [
                            {
                                "acml_tr_pbmn": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798 "ub300"uae08.
                                "acml_vol": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798"ub7c9.
                                "flng_cls_code": "str",  # Optional. "ub77d
                                  "uad6c"ubd84 "ucf54"ub4dc
                                  00:"ud574"ub2f9"uc0ac"ud56d"uc5c6"uc74c("ub77d"uc774
                                  "ubc1c"uc0dd"uc548"ud55c "uacbd"uc6b0) 01:"uad8c"ub9ac"ub77d
                                  02:"ubc30"ub2f9"ub77d 03:"ubd84"ubc30"ub77d 04:"uad8c"ubc30"ub77d
                                  05:"uc911"uac04("ubd84"uae30)"ubc30"ub2f9"ub77d
                                  06:"uad8c"ub9ac"uc911"uac04"ubc30"ub2f9"ub77d
                                  07:"uad8c"ub9ac"ubd84"uae30"ubc30"ub2f9"ub77d.
                                "mod_yn": "str",  # Optional.
                                  "ubd84"ud560"ubcc0"uacbd"uc5ec"ubd80. Known values are: "Y" and "N".
                                "prdy_vrss": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44.
                                "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                                "prtt_rate": "str",  # Optional. "ubd84"ud560
                                  "ube44"uc728.
                                "revl_issu_reas": "str",  # Optional.
                                  "uc7ac"ud3c9"uac00"uc0ac"uc720"ucf54"ub4dc.
                                "stck_bsop_date": "str",  # Optional. "uc8fc"uc2dd
                                  "uc601"uc5c5 "uc77c"uc790.
                                "stck_clpr": "str",  # Optional. "uc8fc"uc2dd
                                  "uc885"uac00.
                                "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd
                                  "ucd5c"uace0"uac00.
                                "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd
                                  "ucd5c"uc800"uac00.
                                "stck_oprc": "str"  # Optional. "uc8fc"uc2dd
                                  "uc2dc"uac00.
                            }
                        ],
                        "pbr": "str",  # Optional. PBR.
                        "per": "str",  # Optional. PER.
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "prdy_vrss_vol": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "uac70"ub798"ub7c9.
                        "stck_fcam": "str",  # Optional. "uc8fc"uc2dd "uc561"uba74"uac00.
                        "stck_hgpr": "str",  # Optional. "ucd5c"uace0"uac00.
                        "stck_llam": "str",  # Optional. "ud558"ud55c"uac00.
                        "stck_lwpr": "str",  # Optional. "ucd5c"uc800"uac00.
                        "stck_mxpr": "str",  # Optional. "uc0c1"ud55c"uac00.
                        "stck_oprc": "str",  # Optional. "uc2dc"uac00.
                        "stck_prdy_clpr": "str",  # Optional. "uc8fc"uc2dd "uc804"uc77c
                          "uc885"uac00.
                        "stck_prdy_hgpr": "str",  # Optional. "uc8fc"uc2dd "uc804"uc77c
                          "ucd5c"uace0"uac00.
                        "stck_prdy_lwpr": "str",  # Optional. "uc8fc"uc2dd "uc804"uc77c
                          "ucd5c"uc800"uac00.
                        "stck_prdy_oprc": "str",  # Optional. "uc8fc"uc2dd "uc804"uc77c
                          "uc2dc"uac00.
                        "stck_prpr": "str",  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                        "stck_shrn_iscd": "str",  # Optional. "uc8fc"uc2dd "ub2e8"ucd95
                          "uc885"ubaa9"ucf54"ub4dc.
                        "vol_tnrt": "str"  # Optional. "uac70"ub798"ub7c9 "ud68c"uc804"uc728.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_period_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_org_adj_prc=fid_org_adj_prc,
            fid_input_date1=fid_input_date1,
            fid_input_date2=fid_input_date2,
            fid_period_div_code=fid_period_div_code,
            custtype=custtype,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_time_conclusion(
        self,
        *,
        fid_input_iscd: str,
        fid_input_hour1: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST01060000",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 당일시간대별 체결 조회.

        주식현재가 당일시간대별체결 API입니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_input_hour1: 조회 시작시간

         기준시간 (6자리; HH:MM:SS):code:`<br/>`
         ex) 155000 입력시 15시 50분 00초 기준 이전 체결 내역이 조회됨. Required.
        :paramtype fid_input_hour1: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHPST01060000 : 주식현재가 당일시간대별체결. "FHPST01060000" Default value is "FHPST01060000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN. Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "output2": [
                            {
                                "acml_vol": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798"ub7c9.
                                "askp": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00.
                                "bidp": "str",  # Optional. "ub9e4"uc218"ud638"uac00.
                                "cnqn": "str",  # Optional. "uccb4"uacb0"ub7c9.
                                "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44"uc728.
                                "prdy_vrss": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44.
                                "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                                "stck_cntg_hour": "str",  # Optional. "uc8fc"uc2dd
                                  "uccb4"uacb0 "uc2dc"uac04.
                                "stck_prpr": "str",  # Optional. "uc8fc"uc2dd
                                  "ud604"uc7ac"uac00.
                                "tday_rltv": "str"  # Optional. "ub2f9"uc77c
                                  "uccb4"uacb0"uac15"ub3c4.
                            }
                        ],
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "rprs_mrkt_kor_name": "str",  # Optional. "ub300"ud45c "uc2dc"uc7a5
                          "ud55c"uae00"uba85.
                        "stck_prpr": "str"  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_time_conclusion_request(
            fid_input_iscd=fid_input_iscd,
            fid_input_hour1=fid_input_hour1,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_over_time_conclusion(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02310000",
        fid_cond_mrkt_div_code: str = "J",
        fid_hour_cls_code: str = "1",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 시간외 시간대별 체결 조회.

        주식현재가 시간외시간별체결 API입니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHPST02310000 : 주식현재가 시간외시간별체결. "FHPST02310000" Default value is "FHPST02310000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN. Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_hour_cls_code: 시간 구분 코드

         1 : 시간외 (Default). "1" Default value is "1".
        :paramtype fid_hour_cls_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "lslm_sign": "str",  # Optional. "ud558"ud55c "ubd80"ud638.
                        "output2": [
                            {
                                "acml_vol": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798"ub7c9.
                                "askp": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00.
                                "bidp": "str",  # Optional. "ub9e4"uc218"ud638"uac00.
                                "cntg_vol": "str",  # Optional. "uccb4"uacb0
                                  "uac70"ub798"ub7c9.
                                "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44"uc728.
                                "prdy_vrss": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44.
                                "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                                "stck_cntg_hour": "str",  # Optional. "uc8fc"uc2dd
                                  "uccb4"uacb0 "uc2dc"uac04.
                                "stck_prpr": "str"  # Optional. "uc8fc"uc2dd
                                  "ud604"uc7ac"uac00.
                            }
                        ],
                        "ovtm_untp_antc_cnpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0"uac00.
                        "ovtm_untp_antc_cntg_ctrt": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44"uc728.
                        "ovtm_untp_antc_cntg_vrss": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44.
                        "ovtm_untp_antc_cntg_vrss_sign": "str",  # Optional.
                          "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44
                          1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "ovtm_untp_antc_vol": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uac70"ub798"ub7c9.
                        "ovtm_untp_hgpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd5c"uace0"uac00.
                        "ovtm_untp_llam": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ud558"ud55c"uac00.
                        "ovtm_untp_lwpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd5c"uc800"uac00.
                        "ovtm_untp_mxpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc0c1"ud55c"uac00.
                        "ovtm_untp_oprc": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc2dc"uac002.
                        "ovtm_untp_prdy_ctrt": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44"uc728.
                        "ovtm_untp_prdy_vrss": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44.
                        "ovtm_untp_prdy_vrss_sign": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44 "ubd80"ud638  1 :
                          "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                        "ovtm_untp_prpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ud604"uc7ac"uac00.
                        "ovtm_untp_tr_pbmn": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uac70"ub798 "ub300"uae08.
                        "ovtm_untp_vol": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "uac70"ub798"ub7c9.
                        "uplm_sign": "str"  # Optional. "uc0c1"ud55c "ubd80"ud638.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_over_time_conclusion_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_hour_cls_code=fid_hour_cls_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_over_time_daily_price(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02320000",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 시간외 일자별 주가 조회.

        주식현재가 시간외일자별주가 API입니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHPST02310000 : 주식현재가 시간외일자별체결. "FHPST02320000" Default value is "FHPST02320000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN. Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "output2": [
                            {
                                "acml_vol": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798"ub7c9.
                                "ovtm_untp_prdy_ctrt": "str",  # Optional.
                                  "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "uc804"uc77c
                                  "ub300"ube44"uc728.
                                "ovtm_untp_prdy_vrss": "str",  # Optional.
                                  "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44.
                                "ovtm_untp_prdy_vrss_sign": "str",  # Optional.
                                  "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44
                                  "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                                "ovtm_untp_prpr": "str",  # Optional.
                                  "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "ud604"uc7ac"uac00.
                                "ovtm_untp_tr_pbmn": "str",  # Optional.
                                  "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "uac70"ub798 "ub300"uae08.
                                "ovtm_untp_vol": "str",  # Optional.
                                  "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "uac70"ub798"ub7c9.
                                "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44"uc728.
                                "prdy_vrss": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44.
                                "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                                "stck_bsop_date": "str",  # Optional. "uc8fc"uc2dd
                                  "uc601"uc5c5 "uc77c"uc790.
                                "stck_clpr": "str"  # Optional. "uc8fc"uc2dd
                                  "uc885"uac00.
                            }
                        ],
                        "ovtm_untp_antc_ctrt": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44"uc728.
                        "ovtm_untp_antc_prpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0"uac00.
                        "ovtm_untp_antc_vol": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uac70"ub798"ub7c9.
                        "ovtm_untp_antc_vrss": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44.
                        "ovtm_untp_antc_vrss_sign": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44  1 :
                          "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "ovtm_untp_hgpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd5c"uace0"uac00.
                        "ovtm_untp_llam": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ud558"ud55c"uac00.
                        "ovtm_untp_lwpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd5c"uc800"uac00.
                        "ovtm_untp_mxpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc0c1"ud55c"uac00.
                        "ovtm_untp_oprc": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc2dc"uac00.
                        "ovtm_untp_prdy_ctrt": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44"uc728.
                        "ovtm_untp_prdy_vrss": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44.
                        "ovtm_untp_prdy_vrss_sign": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44 "ubd80"ud638  1 :
                          "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "ovtm_untp_prpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ud604"uc7ac"uac00.
                        "ovtm_untp_tr_pbmn": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uac70"ub798 "ub300"uae08.
                        "ovtm_untp_vol": "str"  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uac70"ub798"ub7c9.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_over_time_daily_price_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_time_minute_price(
        self,
        *,
        fid_input_iscd: str,
        fid_etc_cls_code: str = "",
        fid_input_hour1: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST03010200",
        fid_cond_mrkt_div_code: str = "J",
        fid_pw_data_incu_yn: str = "N",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 당일 분봉 조회.

        주식당일분봉조회 API입니다.:code:`<br/>`
        실전계좌/모의계좌의 경우, 한 번의 호출에 최대 30건까지 확인 가능합니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_etc_cls_code: FID 기타 구분 코드

         기타 구분 코드(""). Required. Default value is "".
        :paramtype fid_etc_cls_code: str
        :keyword fid_input_hour1: FID 입력 시간1

         조회대상(FID_COND_MRKT_DIV_CODE)에 따라 입력하는 값 상이

         종목(J)일 경우, 조회 시작일자(HHMMSS):code:`<br/>`
         ex) "123000" 입력 시 12시 30분 이전부터 1분 간격으로 조회

         업종(U)일 경우, 조회간격(초) (60 or 120 만 입력 가능):code:`<br/>`
         ex) "60" 입력 시 현재시간부터 1분간격으로 조회:code:`<br/>`
         "120" 입력 시 현재시간부터 2분간격으로 조회

         ※ FID_INPUT_HOUR_1 에 미래일시 입력 시에 현재가로 조회됩니다.:code:`<br/>`
         ex) 오전 10시에 113000 입력 시에 오전 10시~11시30분 사이의 데이터가 오전 10시 값으로 조회됨. Required.
        :paramtype fid_input_hour1: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST03010200 : 주식 당일 분봉 조회. "FHKST03010200" Default value is "FHKST03010200".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN:code:`<br/>`
         U: 업종. Known values are: "J" and "U". Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_pw_data_incu_yn: FID 과거 데이터 포함 여부

         과거 데이터 포함 여부(Y/N):code:`<br/>`


         * 업종(U) 조회시에만 동작하는 구분값:code:`<br/>`
           N : 당일데이터만 조회:code:`<br/>`
           Y : 이후데이터도 조회:code:`<br/>`
           (조회시점이 083000(오전8:30)일 경우 전일자 업종 시세 데이터도 같이 조회됨). Known values are: "Y" and "N". Default
         value is "N".
        :paramtype fid_pw_data_incu_yn: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "output2": [
                            {
                                "acml_tr_pbmn": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798 "ub300"uae08.
                                "cntg_vol": "str",  # Optional. "uccb4"uacb0
                                  "uac70"ub798"ub7c9.
                                "stck_bsop_date": "str",  # Optional. "uc8fc"uc2dd
                                  "uc601"uc5c5 "uc77c"uc790.
                                "stck_cntg_hour": "str",  # Optional. "uc8fc"uc2dd
                                  "uccb4"uacb0 "uc2dc"uac04.
                                "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd
                                  "ucd5c"uace0"uac00.
                                "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd
                                  "ucd5c"uc800"uac00.
                                "stck_oprc": "str",  # Optional. "uc8fc"uc2dd
                                  "uc2dc"uac002.
                                "stck_prpr": "str"  # Optional. "uc8fc"uc2dd
                                  "ud604"uc7ac"uac00.
                            }
                        ],
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "stck_prdy_clpr": "str",  # Optional. "uc8fc"uc2dd "uc804"uc77c
                          "uc885"uac00.
                        "stck_prpr": "str"  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_time_minute_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_etc_cls_code=fid_etc_cls_code,
            fid_input_hour1=fid_input_hour1,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_pw_data_incu_yn=fid_pw_data_incu_yn,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_price2(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST01010000",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 현재가 시세2 조회.

        주식현재가 시세2 API입니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST01010000 : 주식현재가 시세2. "FHPST01010000" Default value is "FHPST01010000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN. Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "bstp_cls_code": "str",  # Optional. "uc5c5"uc885 "uad6c"ubd84
                          "ucf54"ub4dc.
                        "bstp_kor_isnm": "str",  # Optional. "uc5c5"uc885 "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "crdt_able_yn": "str",  # Optional. "uc2e0"uc6a9 "uac00"ub2a5
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "crdt_rate": "str",  # Optional. "uc2e0"uc6a9 "ube44"uc728.
                        "divi_app_cls_code": "str",  # Optional.
                          "ub3d9"uc2dc"ud638"uac00"ubc30"ubd84"ucc98"ub9ac"ucf54"ub4dc
                          11:"ub9e4"uc218"uc0c1"ud55c"ubc30"ubd84:code:`<br/>`
                          12:"ub9e4"uc218"ud558"ud55c"ubc30"ubd84:code:`<br/>` 13:
                          "ub9e4"ub3c4"uc0c1"ud55c"ubc30"ubd84:code:`<br/>`
                          14:"ub9e4"ub3c4"ud558"ud55c"ubc30"ubd84. Known values are: "11", "12", "13",
                          and "14".
                        "elw_pblc_yn": "str",  # Optional. ELW "ubc1c"ud589 "uc5ec"ubd80.
                          Known values are: "Y" and "N".
                        "fcam_mod_cls_name": "str",  # Optional. "uc561"uba74"uac00
                          "ubcc0"uacbd "uad6c"ubd84 "uba85:code:`<br/>` "ud2b9"ubcc4"ud55c
                          "uacbd"uc6b0"uc5d0"ub9cc "ub370"uc774"ud130 "ucd9c"ub825.
                        "flng_cls_name": "str",  # Optional. "ub77d "uad6c"ubd84
                          "uc774"ub984:code:`<br/>` "ud2b9"ubcc4"ud55c "uacbd"uc6b0"uc5d0"ub9cc
                          "ub370"uc774"ud130 "ucd9c"ub825.
                        "hgpr_vrss_prpr": "str",  # Optional. "ucd5c"uace0"uac00 "ub300"ube44
                          "ud604"uc7ac"uac00.
                        "hgpr_vrss_prpr_sign": "str",  # Optional. "ucd5c"uace0"uac00
                          "ub300"ube44 "ud604"uc7ac"uac00 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2
                          : "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "insn_pbnt_yn": "str",  # Optional. "ubd88"uc131"uc2e4 "uacf5"uc2dc
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "invt_caful_yn": "str",  # Optional.
                          "ud22c"uc790"uc720"uc758"uc5ec"ubd80. Known values are: "Y" and "N".
                        "low_current_yn": "str",  # Optional. "uc800"uc720"ub3d9"uc131
                          "uc885"ubaa9 "uc5ec"ubd80. Known values are: "Y" and "N".
                        "lwpr_vrss_prpr": "str",  # Optional. "ucd5c"uc800"uac00 "ub300"ube44
                          "ud604"uc7ac"uac00.
                        "lwpr_vrss_prpr_sign": "str",  # Optional. "ucd5c"uc800"uac00
                          "ub300"ube44 "ud604"uc7ac"uac00 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2
                          : "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "mang_issu_yn": "str",  # Optional. "uad00"ub9ac "uc885"ubaa9
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "marg_rate": "str",  # Optional. "uc99d"uac70"uae08 "ube44"uc728.
                        "mrkt_warn_cls_code": "str",  # Optional.
                          "uc2dc"uc7a5"uacbd"uace0"ucf54"ub4dc  00: "uc5c6"uc74c 01:
                          "ud22c"uc790"uc8fc"uc758 02:"ud22c"uc790"uacbd"uace0
                          03:"ud22c"uc790"uc704"ud5d8. Known values are: "00", "01", "02", and "03".
                        "mrkt_warn_cls_name": "str",  # Optional. "uc2dc"uc7a5 "uacbd"uace0
                          "uad6c"ubd84 "uba85:code:`<br/>` "ud2b9"ubcc4"ud55c "uacbd"uc6b0"uc5d0"ub9cc
                          "ub370"uc774"ud130 "ucd9c"ub825:code:`<br/>` ""ud22c"uc790"ud658"uae30" /
                          ""ud22c"uc790"uacbd"uace0".
                        "mxpr_llam_cls_code": "str",  # Optional. "uc0c1"ud558"ud55c"uac00
                          "uad6c"ubd84 "ucf54"ub4dc:code:`<br/>` "uc870"ud68c"ud558"ub294
                          "uc885"ubaa9"uc774 "uc0c1/"ud558"ud55c"uac00"uc5d0 "ub3c4"ub2ec"ud588"uc744
                          "uacbd"uc6b0"uc5d0"ub9cc "uc870"ud68c"ub428.
                        "new_hgpr_lwpr_cls_code": "str",  # Optional. "uc2e0 "uace0"uac00
                          "uc800"uac00 "uad6c"ubd84 "ucf54"ub4dc:code:`<br/>` "uc870"ud68c"ud558"ub294
                          "uc885"ubaa9"uc774 "uc2e0"uace0/"uc2e0"uc800"uc5d0 "ub3c4"ub2ec"ud588"uc744
                          "uacbd"uc6b0"uc5d0"ub9cc "uc870"ud68c"ub428.
                        "new_lstn_cls_name": "str",  # Optional. "uc2e0"uaddc "uc0c1"uc7a5
                          "uad6c"ubd84 "uba85.
                        "oprc_rang_cont_yn": "str",  # Optional. "uc2dc"uac00 "ubc94"uc704
                          "uc5f0"uc7a5 "uc5ec"ubd80. Known values are: "Y" and "N".
                        "oprc_vrss_prpr": "str",  # Optional. "uc2dc"uac002 "ub300"ube44
                          "ud604"uc7ac"uac00.
                        "oprc_vrss_prpr_sign": "str",  # Optional. "uc2dc"uac002 "ub300"ube44
                          "ud604"uc7ac"uac00 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                          "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "prdy_clpr_vrss_hgpr_rate": "str",  # Optional. "uc804"uc77c
                          "uc885"uac00 "ub300"ube44 "ucd5c"uace0"uac00 "ube44"uc728.
                        "prdy_clpr_vrss_lwpr_rate": "str",  # Optional. "uc804"uc77c
                          "uc885"uac00 "ub300"ube44 "ucd5c"uc800"uac00 "ube44"uc728.
                        "prdy_clpr_vrss_oprc_rate": "str",  # Optional. "uc804"uc77c
                          "uc885"uac00 "ub300"ube44 "uc2dc"uac002 "ube44"uc728.
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "prdy_vrss_vol_rate": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "uac70"ub798"ub7c9 "ube44"uc728.
                        "revl_issu_reas_name": "str",  # Optional. "uc7ac"ud3c9"uac00
                          "uc885"ubaa9 "uc0ac"uc720 "uba85:code:`<br/>` "ud2b9"ubcc4"ud55c
                          "uacbd"uc6b0"uc5d0"ub9cc "ub370"uc774"ud130 "ucd9c"ub825.
                        "rprs_mrkt_kor_name": "str",  # Optional. "ub300"ud45c "uc2dc"uc7a5
                          "ud55c"uae00 "uba85.
                        "short_over_cls_code": "str",  # Optional.
                          "ub2e8"uae30"uacfc"uc5f4"uad6c"ubd84"ucf54"ub4dc.
                        "short_over_yn": "str",  # Optional.
                          "ub2e8"uae30"uacfc"uc5f4"uc5ec"ubd80. Known values are: "Y" and "N".
                        "sltr_yn": "str",  # Optional. "uc815"ub9ac"ub9e4"ub9e4 "uc5ec"ubd80.
                          Known values are: "Y" and "N".
                        "ssts_hot_yn": "str",  # Optional. "uacf5"ub9e4"ub3c4"uacfc"uc5f4
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "stange_runup_yn": "str",  # Optional.
                          "uc774"uc0c1"uae09"ub4f1"uc5ec"ubd80. Known values are: "Y" and "N".
                        "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uace0"uac00.
                        "stck_llam": "str",  # Optional. "uc8fc"uc2dd "ud558"ud55c"uac00.
                        "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uc800"uac00.
                        "stck_mxpr": "str",  # Optional. "uc8fc"uc2dd "uc0c1"ud55c"uac00.
                        "stck_oprc": "str",  # Optional. "uc8fc"uc2dd "uc2dc"uac002.
                        "stck_prdy_clpr": "str",  # Optional. "uc8fc"uc2dd "uc804"uc77c
                          "uc885"uac00.
                        "stck_prpr": "str",  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                        "stck_sdpr": "str",  # Optional. "uc8fc"uc2dd "uae30"uc900"uac00.
                        "trht_yn": "str",  # Optional. "uac70"ub798"uc815"uc9c0 "uc5ec"ubd80.
                          Known values are: "Y" and "N".
                        "vi_cls_code": "str",  # Optional.
                          VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc. Known values are: "Y" and "N".
                        "vlnt_deal_cls_name": "str",  # Optional. "uc784"uc758 "ub9e4"ub9e4
                          "uad6c"ubd84 "uba85.
                        "vlnt_fin_cls_code": "str"  # Optional. "uc784"uc758 "uc885"ub8cc
                          "uad6c"ubd84 "ucf54"ub4dc. Known values are: "Y" and "N".
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_price2_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_over_time_price(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02300000",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 시간외 현재가 조회.

        국내주식 시간외현재가 API입니다.

        한국투자 HTS(eFriend Plus) > [0230] 시간외 현재가 화면의 좌측 상단기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST02300000 : 국내주식 시간외 현재가. "FHPST02300000" Default value is "FHPST02300000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN. Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "askp": "str",  # Optional. "ub9e4"ub3c4"ud638"uac00.
                        "bidp": "str",  # Optional. "ub9e4"uc218"ud638"uac00.
                        "bstp_kor_isnm": "str",  # Optional. "uc5c5"uc885 "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "crdt_able_yn": "str",  # Optional. "uc2e0"uc6a9 "uac00"ub2a5
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "flng_cls_name": "str",  # Optional. "ub77d "uad6c"ubd84
                          "uc774"ub984.
                        "insn_pbnt_yn": "str",  # Optional. "ubd88"uc131"uc2e4 "uacf5"uc2dc
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "mang_issu_cls_name": "str",  # Optional. "uad00"ub9ac "uc885"ubaa9
                          "uad6c"ubd84 "uba85.
                        "mang_issu_yn": "str",  # Optional. "uad00"ub9ac "uc885"ubaa9
                          "uc5ec"ubd80. Known values are: "Y" and "N".
                        "marg_rate": "str",  # Optional. "uc99d"uac70"uae08 "ube44"uc728.
                        "mrkt_warn_cls_code": "str",  # Optional. "uc2dc"uc7a5 "uacbd"uace0
                          "uad6c"ubd84 "ucf54"ub4dc.
                        "mrkt_warn_cls_name": "str",  # Optional. "uc2dc"uc7a5 "uacbd"uad6c
                          "uad6c"ubd84 "uba85.
                        "new_lstn_cls_name": "str",  # Optional. "uc2e0"uaddc "uc0c1"uc7a5
                          "uad6c"ubd84 "uba85.
                        "ovtm_untp_antc_cnpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0"uac00.
                        "ovtm_untp_antc_cnqn": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0"ub7c9.
                        "ovtm_untp_antc_cntg_ctrt": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44"uc728.
                        "ovtm_untp_antc_cntg_vrss": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44.
                        "ovtm_untp_antc_cntg_vrss_sign": "str",  # Optional.
                          "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "uc608"uc0c1 "uccb4"uacb0 "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "ovtm_untp_hgpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd5c"uace0"uac00.
                        "ovtm_untp_llam": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ud558"ud55c"uac00.
                        "ovtm_untp_lwpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd5c"uc800"uac00.
                        "ovtm_untp_mxpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc0c1"ud55c"uac00.
                        "ovtm_untp_oprc": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc2dc"uac002.
                        "ovtm_untp_prdy_ctrt": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44"uc728.
                        "ovtm_untp_prdy_vrss": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44.
                        "ovtm_untp_prdy_vrss_sign": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "ub300"ube44 "ubd80"ud638  1 :
                          "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "ovtm_untp_prpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ud604"uc7ac"uac00.
                        "ovtm_untp_sdpr": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uae30"uc900"uac00.
                        "ovtm_untp_tr_pbmn": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "uac70"ub798 "ub300"uae08.
                        "ovtm_untp_vol": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc804"uc77c "uac70"ub798"ub7c9.
                        "ovtm_vi_cls_code": "str",  # Optional.
                          "uc2dc"uac04"uc678"ub2e8"uc77c"uac00VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc.
                        "revl_issu_reas_name": "str",  # Optional. "uc7ac"ud3c9"uac00
                          "uc885"ubaa9 "uc0ac"uc720 "uba85.
                        "rprs_mrkt_kor_name": "str",  # Optional. "ub300"ud45c "uc2dc"uc7a5
                          "ud55c"uae00 "uba85.
                        "sltr_yn": "str",  # Optional. "uc815"ub9ac"ub9e4"ub9e4 "uc5ec"ubd80.
                          Known values are: "Y" and "N".
                        "trht_yn": "str",  # Optional. "uac70"ub798"uc815"uc9c0 "uc5ec"ubd80.
                          Known values are: "Y" and "N".
                        "vlnt_deal_cls_name": "str"  # Optional. "uc784"uc758 "ub9e4"ub9e4
                          "uad6c"ubd84 "uba85.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_over_time_price_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_over_time_quote(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02300400",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 시간외 호가 조회.

        국내주식 시간외호가 API입니다.

        한국투자 HTS(eFriend Plus) > [0230] 시간외 현재가 화면의 '호가' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST02300400 : 국내주식 시간외호가 조회. "FHPST02300400" Default value is "FHPST02300400".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 시장 분류 코드:code:`<br/>`
         J : 주식, ETF, ETN:code:`<br/>`. Known values are: "J" and "U". Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "ovtm_total_askp_icdc": "str",  # Optional. "uc2dc"uac04"uc678 "ucd1d
                          "ub9e4"ub3c4"ud638"uac00 "uc99d"uac10.
                        "ovtm_total_askp_rsqn": "str",  # Optional. "uc2dc"uac04"uc678 "ucd1d
                          "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9.
                        "ovtm_total_bidp_icdc": "str",  # Optional. "uc2dc"uac04"uc678 "ucd1d
                          "ub9e4"uc218"ud638"uac00 "uc99d"uac10.
                        "ovtm_total_bidp_rsqn": "str",  # Optional. "uc2dc"uac04"uc678 "ucd1d
                          "ub9e4"uc218"ud638"uac00 "uc794"ub7c9.
                        "ovtm_untp_askp1": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac001.
                        "ovtm_untp_askp10": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac0010.
                        "ovtm_untp_askp2": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac002.
                        "ovtm_untp_askp3": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac003.
                        "ovtm_untp_askp4": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac004.
                        "ovtm_untp_askp5": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac005.
                        "ovtm_untp_askp6": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac006.
                        "ovtm_untp_askp7": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac007.
                        "ovtm_untp_askp8": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac008.
                        "ovtm_untp_askp9": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac009.
                        "ovtm_untp_askp_icdc1": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc99d"uac101.
                        "ovtm_untp_askp_icdc2": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc99d"uac102.
                        "ovtm_untp_askp_icdc3": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc99d"uac103.
                        "ovtm_untp_askp_rsqn1": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c91.
                        "ovtm_untp_askp_rsqn10": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c910.
                        "ovtm_untp_askp_rsqn2": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c92.
                        "ovtm_untp_askp_rsqn3": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c93.
                        "ovtm_untp_askp_rsqn4": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c94.
                        "ovtm_untp_askp_rsqn5": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c95.
                        "ovtm_untp_askp_rsqn6": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c96.
                        "ovtm_untp_askp_rsqn7": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c97.
                        "ovtm_untp_askp_rsqn8": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c98.
                        "ovtm_untp_askp_rsqn9": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c99.
                        "ovtm_untp_bidp1": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac001.
                        "ovtm_untp_bidp10": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac0010.
                        "ovtm_untp_bidp2": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac002.
                        "ovtm_untp_bidp3": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac003.
                        "ovtm_untp_bidp4": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac004.
                        "ovtm_untp_bidp5": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac005.
                        "ovtm_untp_bidp6": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac006.
                        "ovtm_untp_bidp7": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac007.
                        "ovtm_untp_bidp8": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac008.
                        "ovtm_untp_bidp9": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac009.
                        "ovtm_untp_bidp_icdc1": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc99d"uac101.
                        "ovtm_untp_bidp_icdc2": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc99d"uac102.
                        "ovtm_untp_bidp_icdc3": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc99d"uac103.
                        "ovtm_untp_bidp_rsqn1": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c91.
                        "ovtm_untp_bidp_rsqn10": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c910.
                        "ovtm_untp_bidp_rsqn2": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c92.
                        "ovtm_untp_bidp_rsqn3": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c93.
                        "ovtm_untp_bidp_rsqn4": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c94.
                        "ovtm_untp_bidp_rsqn5": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c95.
                        "ovtm_untp_bidp_rsqn6": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c96.
                        "ovtm_untp_bidp_rsqn7": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c97.
                        "ovtm_untp_bidp_rsqn8": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c98.
                        "ovtm_untp_bidp_rsqn9": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ub9e4"uc218"ud638"uac00 "uc794"ub7c99.
                        "ovtm_untp_last_hour": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd5c"uc885 "uc2dc"uac04.
                        "ovtm_untp_ntby_bidp_rsqn": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "uc21c"ub9e4"uc218 "ud638"uac00 "uc794"ub7c9.
                        "ovtm_untp_total_askp_rsqn": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd1d "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9.
                        "ovtm_untp_total_askp_rsqn_icdc": "str",  # Optional.
                          "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "ucd1d "ub9e4"ub3c4"ud638"uac00
                          "uc99d"uac10.
                        "ovtm_untp_total_bidp_rsqn": "str",  # Optional. "uc2dc"uac04"uc678
                          "ub2e8"uc77c"uac00 "ucd1d "ub9e4"uc218"ud638"uac00 "uc794"ub7c9.
                        "ovtm_untp_total_bidp_rsqn_icdc": "str",  # Optional.
                          "uc2dc"uac04"uc678 "ub2e8"uc77c"uac00 "ucd1d "ub9e4"uc218"ud638"uac00
                          "uc99d"uac10.
                        "total_askp_rsqn": "str",  # Optional. "ucd1d
                          "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9.
                        "total_askp_rsqn_icdc": "str",  # Optional. "ucd1d
                          "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9 "uc99d"uac10.
                        "total_bidp_rsqn": "str",  # Optional. "ucd1d
                          "ub9e4"uc218"ud638"uac00 "uc794"ub7c9.
                        "total_bidp_rsqn_icdc": "str"  # Optional. "ucd1d
                          "ub9e4"uc218"ud638"uac00 "uc794"ub7c9 "uc99d"uac10.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_over_time_quote_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_closing_expected_conclusion(  # pylint: disable=name-too-long
        self,
        *,
        fid_rank_sort_cls_code: str = "0",
        fid_input_iscd: str = "0",
        fid_blng_cls_code: str = "0",
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST117300C0",
        fid_cond_mrkt_div_code: str = "J",
        fid_cond_scr_div_code: str = "11173",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 장마감 예상체결가 조회.

        국내주식 장마감 예상체결가 API입니다.

        한국투자 HTS(eFriend Plus) > [0183] 장마감 예상체결가 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_rank_sort_cls_code: 순위 정렬 구분 코드

         0:전체:code:`<br/>`
         1:상한가마감예상:code:`<br/>`
         2:하한가마감예상:code:`<br/>`
         3:직전대비상승률상위:code:`<br/>`
         4:직전대비하락률상위. Known values are: "0", "1", "2", "3", and "4". Required. Default value is "0".
        :paramtype fid_rank_sort_cls_code: str
        :keyword fid_input_iscd: 종목코드

         0000:전체:code:`<br/>`
         0001:거래소:code:`<br/>`
         1001:코스닥:code:`<br/>`
         2001:코스피200:code:`<br/>`
         4001: KRX100. Known values are: "0000", "0001", "1001", "2001", and "4001". Required. Default
         value is "0".
        :paramtype fid_input_iscd: str
        :keyword fid_blng_cls_code: 소속 구분 코드

         0:전체:code:`<br/>`
         1:종가범위연장. Known values are: "0" and "1". Required. Default value is "0".
        :paramtype fid_blng_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST117300C0 : 국내주식 장마감 예상체결가 조회. "FHKST117300C0" Default value is "FHKST117300C0".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_cond_scr_div_code: FID 조건 화면 구분 코드:code:`<br/>`
         Unique key(11173). "11173" Default value is "11173".
        :paramtype fid_cond_scr_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "cntg_vol": "str",  # Optional. "uccb4"uacb0
                              "uac70"ub798"ub7c9.
                            "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                              "uc885"ubaa9"uba85.
                            "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "sdpr_vrss_prpr": "str",  # Optional. "uae30"uc900"uac00
                              "ub300"ube44 "ud604"uc7ac"uac00.
                            "sdpr_vrss_prpr_rate": "str",  # Optional. "uae30"uc900"uac00
                              "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                            "stck_prpr": "str",  # Optional. "uc8fc"uc2dd
                              "ud604"uc7ac"uac00.
                            "stck_shrn_iscd": "str"  # Optional. "uc8fc"uc2dd
                              "ub2e8"ucd95 "uc885"ubaa9"ucf54"ub4dc.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_kis_get_domestic_stock_closing_expected_conclusion_request(
                fid_rank_sort_cls_code=fid_rank_sort_cls_code,
                fid_input_iscd=fid_input_iscd,
                fid_blng_cls_code=fid_blng_cls_code,
                personalseckey=personalseckey,
                tr_cont=tr_cont,
                custtype=custtype,
                seq_no=seq_no,
                mac_address=mac_address,
                phone_number=phone_number,
                ip_address=ip_address,
                hashkey=hashkey,
                gt_uid=gt_uid,
                tr_id=tr_id,
                fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
                fid_cond_scr_div_code=fid_cond_scr_div_code,
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_vi_status(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str = "0",
        fid_mrkt_cls_code: str = "0",
        fid_rank_sort_cls_code: str = "0",
        fid_input_date1: str,
        fid_trgt_cls_code: str,
        fid_trgt_exls_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST01390000",
        fid_cond_scr_div_code: str = "20139",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 변동성완화장치(VI) 현황.

        HTS(eFriend Plus) [0139] 변동성 완화장치(VI) 현황 데이터를 확인할 수 있는 API입니다.

        최근 30건까지 확인 가능합니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: FID 분류 구분 코드

         0: 전체:code:`<br/>`
         1: 상승:code:`<br/>`
         2: 하락. Known values are: "0", "1", and "2". Required. Default value is "0".
        :paramtype fid_div_cls_code: str
        :keyword fid_mrkt_cls_code: FID 시장 구분 코드

         0: 전체:code:`<br/>`
         1: 거래소:code:`<br/>`
         2: 코스닥. Known values are: "0", "1", and "2". Required. Default value is "0".
        :paramtype fid_mrkt_cls_code: str
        :keyword fid_rank_sort_cls_code: FID 순위 정렬 구분 코드

         0: 전체:code:`<br/>`
         1: 정적:code:`<br/>`
         2: 동적:code:`<br/>`
         3: 정적&동적. Known values are: "0", "1", "2", and "3". Required. Default value is "0".
        :paramtype fid_rank_sort_cls_code: str
        :keyword fid_input_date1: FID 입력일자

         YYYYMMDD. Required.
        :paramtype fid_input_date1: str
        :keyword fid_trgt_cls_code: FID 대상 구분 코드. Required.
        :paramtype fid_trgt_cls_code: str
        :keyword fid_trgt_exls_cls_code: FID 대상 제외 구분 코드. Required.
        :paramtype fid_trgt_exls_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST01390000 : 변동성완화장치(VI) 현황. "FHPST01390000" Default value is "FHPST01390000".
        :paramtype tr_id: str
        :keyword fid_cond_scr_div_code: FID 조건 화면 구분 코드:code:`<br/>`
         Unique key(20139). "20139" Default value is "20139".
        :paramtype fid_cond_scr_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "bsop_date": "str",  # Optional. "uc601"uc5c5 "uc77c"uc790.
                            "cntg_vi_hour": "str",  # Optional.
                              VI"ubc1c"ub3d9"uc2dc"uac04.
                            "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                              "uc885"ubaa9"uba85.
                            "mksc_shrn_iscd": "str",  # Optional.
                              "uc720"uac00"uc99d"uad8c "ub2e8"ucd95 "uc885"ubaa9"ucf54"ub4dc.
                            "vi_cls_code": "str",  # Optional.
                              VI"ubc1c"ub3d9"uc0c1"ud0dc:code:`<br/>` Y: "ubc1c"ub3d9 / N:
                              "ud574"uc81c. Known values are: "Y" and "N".
                            "vi_cncl_hour": "str",  # Optional.
                              VI"ud574"uc81c"uc2dc"uac04.
                            "vi_count": "str",  # Optional. VI"ubc1c"ub3d9"ud69f"uc218.
                            "vi_dmc_dprt": "str",  # Optional.
                              "ub3d9"uc801VI"ubc1c"ub3d9"uad34"ub9ac"uc728.
                            "vi_dmc_stnd_prc": "str",  # Optional.
                              "ub3d9"uc801VI"ubc1c"ub3d9"uae30"uc900"uac00"uaca9.
                            "vi_dprt": "str",  # Optional.
                              "uc815"uc801VI"ubc1c"ub3d9"uad34"ub9ac"uc728.
                            "vi_kind_code": "str",  # Optional.
                              VI"uc885"ub958"ucf54"ub4dc  1:"uc815"uc801:code:`<br/>`
                              2:"ub3d9"uc801:code:`<br/>` 3:"uc815"uc801&"ub3d9"uc801. Known values
                              are: "1", "2", and "3".
                            "vi_prc": "str",  # Optional. VI"ubc1c"ub3d9"uac00"uaca9.
                            "vi_stnd_prc": "str"  # Optional.
                              "uc815"uc801VI"ubc1c"ub3d9"uae30"uc900"uac00"uaca9.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_vi_status_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            fid_mrkt_cls_code=fid_mrkt_cls_code,
            fid_rank_sort_cls_code=fid_rank_sort_cls_code,
            fid_input_date1=fid_input_date1,
            fid_trgt_cls_code=fid_trgt_cls_code,
            fid_trgt_exls_cls_code=fid_trgt_exls_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_credit_by_company(
        self,
        *,
        fid_rank_sort_cls_code: str = "0",
        fid_slct_yn: str = "0",
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST04770000",
        fid_cond_scr_div_code: str = "20477",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 당사 신용가능종목.

        국내주식 당사 신용가능종목 API입니다.

        한국투자 HTS(eFriend Plus) > [0477] 당사 신용가능 종목 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 100건 확인 가능하며, 다음 조회가 불가합니다.

        :keyword fid_rank_sort_cls_code: 순위 정렬 구분 코드:code:`<br/>`
         0:코드순, 1:이름순. Known values are: "0" and "1". Required. Default value is "0".
        :paramtype fid_rank_sort_cls_code: str
        :keyword fid_slct_yn: 선택 여부:code:`<br/>`
         0:신용주문가능, 1: 신용주문불가. Known values are: "0" and "1". Required. Default value is "0".
        :paramtype fid_slct_yn: str
        :keyword fid_input_iscd: 입력 종목코드

         0000:전체, 0001:거래소, 1001:코스닥, 2001:코스피200, 4001: KRX100. Known values are: "0000", "0001",
         "1001", "2001", and "4001". Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST04770000 : 국내주식 당사 신용 가능종목 조회. "FHPST04770000" Default value is "FHPST04770000".
        :paramtype tr_id: str
        :keyword fid_cond_scr_div_code: 조건 화면 분류 코드

         Unique key(20477). "20477" Default value is "20477".
        :paramtype fid_cond_scr_div_code: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         시장구분코드 (주식 J). "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "crdt_rate": "str",  # Optional. "uc2e0"uc6a9 "ube44"uc728.
                            "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                              "uc885"ubaa9"uba85.
                            "stck_shrn_iscd": "str"  # Optional. "uc8fc"uc2dd
                              "ub2e8"ucd95 "uc885"ubaa9"ucf54"ub4dc.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_credit_by_company_request(
            fid_rank_sort_cls_code=fid_rank_sort_cls_code,
            fid_slct_yn=fid_slct_yn,
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_invest_opinion(
        self,
        *,
        fid_input_iscd: str,
        fid_input_date1: str,
        fid_input_date2: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST663300C0",
        fid_cond_mrkt_div_code: str = "J",
        fid_cond_scr_div_code: str = "16633",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 종목투자의견.

        국내주식 종목투자의견 API입니다.

        한국투자 HTS(eFriend Plus) > [0605] 종목투자의견 화면 의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        한 번의 호출에 100건까지 조회가 가능하기에, 일자 파라미터(FID_INPUT_DATE_1, FID_INPUT_DATE_2)를 조절하여 다음 데이터 조회하시기 바랍니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_input_date1: 입력날짜1:code:`<br/>`
         이후 ~(ex) 20231113. Required.
        :paramtype fid_input_date1: str
        :keyword fid_input_date2: 입력날짜2:code:`<br/>`
         ~ 이전(ex) 20240513. Required.
        :paramtype fid_input_date2: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST663300C0 : 국내주식 종목투자의견. "FHKST663300C0" Default value is "FHKST663300C0".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건시장분류코드:code:`<br/>`
         J : 주식. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_cond_scr_div_code: 조건화면분류코드:code:`<br/>`
         16633 : Primary key. "16633" Default value is "16633".
        :paramtype fid_cond_scr_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "dprt": "str",  # Optional. "uad34"ub9ac"uc728.
                            "hts_goal_prc": "str",  # Optional.
                              HTS"ubaa9"ud45c"uac00"uaca9.
                            "invt_opnn": "str",  # Optional. "ud22c"uc790"uc758"uacac.
                            "invt_opnn_cls_code": "str",  # Optional.
                              "ud22c"uc790"uc758"uacac"uad6c"ubd84"ucf54"ub4dc.
                            "mbcr_name": "str",  # Optional. "ud68c"uc6d0"uc0ac"uba85.
                            "nday_dprt": "str",  # Optional. N"uc77c"uad34"ub9ac"uc728.
                            "rgbf_invt_opnn": "str",  # Optional.
                              "uc9c1"uc804"ud22c"uc790"uc758"uacac.
                            "rgbf_invt_opnn_cls_code": "str",  # Optional.
                              "uc9c1"uc804"ud22c"uc790"uc758"uacac"uad6c"ubd84"ucf54"ub4dc.
                            "stck_bsop_date": "str",  # Optional.
                              "uc8fc"uc2dd"uc601"uc5c5"uc77c"uc790.
                            "stck_nday_esdg": "str",  # Optional.
                              "uc8fc"uc2ddN"uc77c"uad34"ub9ac"ub3c4.
                            "stck_prdy_clpr": "str",  # Optional.
                              "uc8fc"uc2dd"uc804"uc77c"uc885"uac00.
                            "stft_esdg": "str"  # Optional.
                              "uc8fc"uc2dd"uc120"ubb3c"uad34"ub9ac"ub3c4.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_invest_opinion_request(
            fid_input_iscd=fid_input_iscd,
            fid_input_date1=fid_input_date1,
            fid_input_date2=fid_input_date2,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_domestic_stock_securities_opinion(
        self,
        *,
        fid_input_iscd: str,
        fid_input_date1: str,
        fid_input_date2: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST663400C0",
        fid_cond_mrkt_div_code: str = "J",
        fid_cond_scr_div_code: str = "16634",
        fid_div_cls_code: str = "0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 증권사별 투자의견.

        국내주식 증권사별 투자의견 API입니다.

        한국투자 HTS(eFriend Plus) > [0608] 증권사별 투자의견 화면 의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        한 번의 호출에 20건까지 조회가 가능하기에, 일자 파라미터(FID_INPUT_DATE_1, FID_INPUT_DATE_2)를 조절하여 다음 데이터 조회하시기 바랍니다.

        :keyword fid_input_iscd: 입력종목코드

         회원사코드 (kis developers 포탈 사이트 포럼-> FAQ -> 종목정보 다운로드(국내) 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_input_date1: 입력날짜1

         이후 ~. Required.
        :paramtype fid_input_date1: str
        :keyword fid_input_date2: 입력날짜2

         ~ 이전. Required.
        :paramtype fid_input_date2: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST663400C0 : 국내주식 증권사별 투자의견. "FHKST663400C0" Default value is "FHKST663400C0".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건시장분류코드

         J(시장 구분 코드). "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_cond_scr_div_code: 조건화면분류코드

         16634(Primary key). "16634" Default value is "16634".
        :paramtype fid_cond_scr_div_code: str
        :keyword fid_div_cls_code: 분류구분코드

         전체(0) 매수(1) 중립(2) 매도(3). Known values are: "0", "1", "2", and "3". Default value is "0".
        :paramtype fid_div_cls_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "dprt": "str",  # Optional. "uad34"ub9ac"uc728.
                            "hts_goal_prc": "str",  # Optional.
                              HTS"ubaa9"ud45c"uac00"uaca9.
                            "hts_kor_isnm": "str",  # Optional.
                              HTS"ud55c"uae00"uc885"ubaa9"uba85.
                            "invt_opnn": "str",  # Optional. "ud22c"uc790"uc758"uacac.
                            "invt_opnn_cls_code": "str",  # Optional.
                              "ud22c"uc790"uc758"uacac"uad6c"ubd84"ucf54"ub4dc.
                            "mbcr_name": "str",  # Optional. "ud68c"uc6d0"uc0ac"uba85.
                            "prdy_ctrt": "str",  # Optional.
                              "uc804"uc77c"ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c"ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional.
                              "uc804"uc77c"ub300"ube44"ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "rgbf_invt_opnn": "str",  # Optional.
                              "uc9c1"uc804"ud22c"uc790"uc758"uacac.
                            "rgbf_invt_opnn_cls_code": "str",  # Optional.
                              "uc9c1"uc804"ud22c"uc790"uc758"uacac"uad6c"ubd84"ucf54"ub4dc.
                            "stck_bsop_date": "str",  # Optional.
                              "uc8fc"uc2dd"uc601"uc5c5"uc77c"uc790.
                            "stck_prdy_clpr": "str",  # Optional.
                              "uc8fc"uc2dd"uc804"uc77c"uc885"uac00.
                            "stck_prpr": "str",  # Optional.
                              "uc8fc"uc2dd"ud604"uc7ac"uac00.
                            "stck_shrn_iscd": "str",  # Optional.
                              "uc8fc"uc2dd"ub2e8"ucd95"uc885"ubaa9"ucf54"ub4dc.
                            "stft_esdg": "str"  # Optional.
                              "uc8fc"uc2dd"uc120"ubb3c"uad34"ub9ac"ub3c4.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_domestic_stock_securities_opinion_request(
            fid_input_iscd=fid_input_iscd,
            fid_input_date1=fid_input_date1,
            fid_input_date2=fid_input_date2,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            fid_div_cls_code=fid_div_cls_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def check_domestic_holiday(
        self,
        *,
        bass_dt: str,
        ctx_area_nk: str = "",
        ctx_area_fk: str = "",
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "CTCA0903R",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내 휴장일 확인.

        국내휴장일조회 API입니다.

        영업일, 거래일, 개장일, 결제일 여부를 조회할 수 있습니다.:code:`<br/>`
        주문을 넣을 수 있는지 확인하고자 하실 경우 개장일여부(opnd_yn)을 사용하시면 됩니다.

        :keyword bass_dt: 기준일자

         기준일자(YYYYMMDD). Required.
        :paramtype bass_dt: str
        :keyword ctx_area_nk: 연속조회키. Required. Default value is "".
        :paramtype ctx_area_nk: str
        :keyword ctx_area_fk: 연속조회검색조건. Required. Default value is "".
        :paramtype ctx_area_fk: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         CTCA0903R : 주식현재가 시간외일자별체결. "CTCA0903R" Default value is "CTCA0903R".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ctx_area_fk": "str",  # Optional.
                      "uc5f0"uc18d"uc870"ud68c"uac80"uc0c9"uc870"uac74.
                    "ctx_area_nk": "str",  # Optional. "uc5f0"uc18d"uc870"ud68c"ud0a4.
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "bass_dt": "str",  # Optional.
                              "uae30"uc900"uc77c"uc790(YYYYMMDD).
                            "bzdy_yn": "str",  # Optional.
                              "uc601"uc5c5"uc77c"uc5ec"ubd80:code:`<br/>`
                              "uae08"uc735"uae30"uad00"uc774 "uc5c5"ubb34"ub97c "ud558"ub294 "ub0a0.
                              Known values are: "Y" and "N".
                            "opnd_yn": "str",  # Optional.
                              "uac1c"uc7a5"uc77c"uc5ec"ubd80:code:`<br/>`
                              "uc8fc"uc2dd"uc2dc"uc7a5"uc774 "uac1c"uc7a5"ub418"ub294
                              "ub0a0:code:`<br/>`   * "uc8fc"ubb38"uc744 "ub123"uace0"uc790 "ud560
                              "uacbd"uc6b0 "uac1c"uc7a5"uc77c"uc5ec"ubd80(opnd_yn)"ub97c "uc0ac"uc6a9.
                              Known values are: "Y" and "N".
                            "sttl_day_yn": "str",  # Optional.
                              "uacb0"uc81c"uc77c"uc5ec"ubd80:code:`<br/>` "uc8fc"uc2dd
                              "uac70"ub798"uc5d0"uc11c "uc2e4"uc81c"ub85c "uc8fc"uc2dd"uc744
                              "uc778"uc218"ud558"uace0 "ub3c8"uc744 "uc9c0"ubd88"ud558"ub294 "ub0a0.
                              Known values are: "Y" and "N".
                            "tr_day_yn": "str",  # Optional.
                              "uac70"ub798"uc77c"uc5ec"ubd80:code:`<br/>` "uc99d"uad8c
                              "uc5c5"ubb34"uac00 "uac00"ub2a5"ud55c "ub0a0("uc785"ucd9c"uae08,
                              "uc774"uccb4 "ub4f1"uc758 "uc5c5"ubb34 "ud3ec"ud568). Known values are:
                              "Y" and "N".
                            "wday_dvsn_cd": "str"  # Optional.
                              "uc694"uc77c"uad6c"ubd84"ucf54"ub4dc  01:"uc77c"uc694"uc77c:code:`<br/>`
                              02:"uc6d4"uc694"uc77c:code:`<br/>` 03:"ud654"uc694"uc77c:code:`<br/>`
                              04:"uc218"uc694"uc77c:code:`<br/>` 05:"ubaa9"uc694"uc77c:code:`<br/>`
                              06:"uae08"uc694"uc77c:code:`<br/>` 07:"ud1a0"uc694"uc77c. Known values
                              are: "01", "02", "03", "04", "05", "06", and "07".
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_check_domestic_holiday_request(
            bass_dt=bass_dt,
            ctx_area_nk=ctx_area_nk,
            ctx_area_fk=ctx_area_fk,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def search_product_info(
        self,
        *,
        pdno: str,
        prdt_type_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "CTPF1604R",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """상품기본조회.

        국내주식뿐 아니라 선물, 채권, 해외주식의 기본 정보를 조회하는 API 입니다.

        :keyword pdno: 상품번호

         주식(하이닉스) : 000660 (코드 : 300)
         선물(101S12) : KR4101SC0009 (코드 : 301)
         미국(AAPL) : AAPL (코드 : 512). Required.
        :paramtype pdno: str
        :keyword prdt_type_cd: 상품유형코드

         300 주식
         301 선물옵션
         302 채권
         512 미국 나스닥 / 513 미국 뉴욕 / 529 미국 아멕스
         515 일본
         501 홍콩 / 543 홍콩CNY / 558 홍콩USD
         507 베트남 하노이 / 508 베트남 호치민
         551 중국 상해A / 552 중국 심천A. Known values are: "300", "301", "302", "512", "513", "529", "515",
         "501", "543", "558", "507", "508", "551", and "552". Required.
        :paramtype prdt_type_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         CTPF1604R : 주식현재가 시간외일자별체결. "CTPF1604R" Default value is "CTPF1604R".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "frst_erlm_dt": "str",  # Optional.
                          "ucd5c"ucd08"ub4f1"ub85d"uc77c"uc790.
                        "ivst_prdt_type_cd": "str",  # Optional.
                          "ud22c"uc790"uc0c1"ud488"uc720"ud615"ucf54"ub4dc.
                        "ivst_prdt_type_cd_name": "str",  # Optional.
                          "ud22c"uc790"uc0c1"ud488"uc720"ud615"ucf54"ub4dc"uba85.
                        "pdno": "str",  # Optional. "uc0c1"ud488"ubc88"ud638.
                        "prdt_abrv_name": "str",  # Optional. "uc0c1"ud488"uc57d"uc5b4"uba85.
                        "prdt_clsf_cd": "str",  # Optional.
                          "uc0c1"ud488"ubd84"ub958"ucf54"ub4dc.
                        "prdt_clsf_name": "str",  # Optional. "uc0c1"ud488"ubd84"ub958"uba85.
                        "prdt_eng_abrv_name": "str",  # Optional.
                          "uc0c1"ud488"uc601"ubb38"uc57d"uc5b4"uba85.
                        "prdt_eng_name": "str",  # Optional. "uc0c1"ud488"uc601"ubb38"uba85.
                        "prdt_eng_name120": "str",  # Optional.
                          "uc0c1"ud488"uc601"ubb38"uba85120.
                        "prdt_name": "str",  # Optional. "uc0c1"ud488"uba85.
                        "prdt_name120": "str",  # Optional. "uc0c1"ud488"uba85120.
                        "prdt_risk_grad_cd": "str",  # Optional.
                          "uc0c1"ud488"uc704"ud5d8"ub4f1"uae09"ucf54"ub4dc.
                        "prdt_sale_stat_cd": "str",  # Optional.
                          "uc0c1"ud488"ud310"ub9e4"uc0c1"ud0dc"ucf54"ub4dc.
                        "prdt_type_cd": "str",  # Optional.
                          "uc0c1"ud488"uc720"ud615"ucf54"ub4dc.
                        "sale_end_dt": "str",  # Optional.
                          "ud310"ub9e4"uc885"ub8cc"uc77c"uc790.
                        "sale_strt_dt": "str",  # Optional.
                          "ud310"ub9e4"uc2dc"uc791"uc77c"uc790.
                        "shtn_pdno": "str",  # Optional.
                          "ub2e8"ucd95"uc0c1"ud488"ubc88"ud638.
                        "std_pdno": "str",  # Optional. "ud45c"uc900"uc0c1"ud488"ubc88"ud638.
                        "wrap_asst_type_cd": "str"  # Optional.
                          "ub7a9"uc5b4"uce74"uc6b4"ud2b8"uc790"uc0b0"uc720"ud615"ucf54"ub4dc.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_search_product_info_request(
            pdno=pdno,
            prdt_type_cd=prdt_type_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def search_stock_info(
        self,
        *,
        prdt_type_cd: str,
        pdno: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "CTPF1002R",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 기본조회.

        주식기본조회 API입니다.

        국내주식 종목의 종목상세정보를 확인할 수 있습니다.

        :keyword prdt_type_cd: 상품유형코드

         300: 주식, ETF, ETN, ELW:code:`<br/>`
         301 : 선물옵션:code:`<br/>`
         302 : 채권:code:`<br/>`
         306 : ELS. Known values are: "300", "301", "302", and "306". Required.
        :paramtype prdt_type_cd: str
        :keyword pdno: 상품코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype pdno: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         CTPF1002R : 국내주식 종목투자의견. "CTPF1002R" Default value is "CTPF1002R".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "dprt": "str",  # Optional. "uad34"ub9ac"uc728.
                            "hts_goal_prc": "str",  # Optional.
                              HTS"ubaa9"ud45c"uac00"uaca9.
                            "invt_opnn": "str",  # Optional. "ud22c"uc790"uc758"uacac.
                            "invt_opnn_cls_code": "str",  # Optional.
                              "ud22c"uc790"uc758"uacac"uad6c"ubd84"ucf54"ub4dc.
                            "mbcr_name": "str",  # Optional. "ud68c"uc6d0"uc0ac"uba85.
                            "nday_dprt": "str",  # Optional. N"uc77c"uad34"ub9ac"uc728.
                            "rgbf_invt_opnn": "str",  # Optional.
                              "uc9c1"uc804"ud22c"uc790"uc758"uacac.
                            "rgbf_invt_opnn_cls_code": "str",  # Optional.
                              "uc9c1"uc804"ud22c"uc790"uc758"uacac"uad6c"ubd84"ucf54"ub4dc.
                            "stck_bsop_date": "str",  # Optional.
                              "uc8fc"uc2dd"uc601"uc5c5"uc77c"uc790.
                            "stck_nday_esdg": "str",  # Optional.
                              "uc8fc"uc2ddN"uc77c"uad34"ub9ac"ub3c4.
                            "stck_prdy_clpr": "str",  # Optional.
                              "uc8fc"uc2dd"uc804"uc77c"uc885"uac00.
                            "stft_esdg": "str"  # Optional.
                              "uc8fc"uc2dd"uc120"ubb3c"uad34"ub9ac"ub3c4.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_search_stock_info_request(
            prdt_type_cd=prdt_type_cd,
            pdno=pdno,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_etf_n_etn_price(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02400000",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """ETF/ETN 현재가 기본시세 조회.

        ETF/ETN 현재가 API입니다.

        한국투자 HTS(eFriend Plus) > [0240] ETF/ETN 현재가 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST02400000 : ETF/ETN 현재가. "FHPST02400000" Default value is "FHPST02400000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건시장분류코드:code:`<br/>`
         J : 주식. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "bstp_kor_isnm": "str",  # Optional. "uc5c5"uc885 "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "crcd": "str",  # Optional. "ud1b5"ud654 "ucf54"ub4dc.
                        "dprt": "str",  # Optional. "uad34"ub9ac"uc728.
                        "dryy_hgpr_date": "str",  # Optional. "uc5f0"uc911 "ucd5c"uace0"uac00
                          "uc77c"uc790.
                        "dryy_hgpr_vrss_prpr_rate": "str",  # Optional. "uc5f0"uc911
                          "ucd5c"uace0"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "dryy_lwpr_date": "str",  # Optional. "uc5f0"uc911 "ucd5c"uc800"uac00
                          "uc77c"uc790.
                        "dryy_lwpr_vrss_prpr_rate": "str",  # Optional. "uc5f0"uc911
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "etf_cnfg_issu_cnt": "str",  # Optional. ETF "uad6c"uc131
                          "uc885"ubaa9 "uc218.
                        "etf_crcl_ntas_ttam": "str",  # Optional. ETF "uc720"ud1b5
                          "uc21c"uc790"uc0b0 "ucd1d"uc561.
                        "etf_crcl_stcn": "str",  # Optional. ETF "uc720"ud1b5 "uc8fc"uc218.
                        "etf_cu_unit_scrt_cnt": "str",  # Optional. ETF CU "ub2e8"uc704
                          "uc99d"uad8c "uc218.
                        "etf_div_name": "str",  # Optional. ETF "ubd84"ub958 "uba85.
                        "etf_dvdn_cycl": "str",  # Optional. ETF "ubc30"ub2f9 "uc8fc"uae30.
                        "etf_frcr_crcl_ntas_ttam": "str",  # Optional. ETF "uc678"ud654
                          "uc720"ud1b5 "uc21c"uc790"uc0b0 "ucd1d"uc561.
                        "etf_frcr_last_ntas_wrth_val": "str",  # Optional. ETF "uc678"ud654
                          "ucd5c"uc885 "uc21c"uc790"uc0b0 "uac00"uce58 "uac12.
                        "etf_frcr_ntas_ttam": "str",  # Optional. ETF "uc678"ud654
                          "uc21c"uc790"uc0b0 "ucd1d"uc561.
                        "etf_ntas_ttam": "str",  # Optional. ETF "uc21c"uc790"uc0b0
                          "ucd1d"uc561.
                        "etf_rprs_bstp_kor_isnm": "str",  # Optional. ETF "ub300"ud45c
                          "uc5c5"uc885 "ud55c"uae00 "uc885"ubaa9"uba85.
                        "etf_trc_ert_mltp": "str",  # Optional. ETF "ucd94"uc801
                          "uc218"uc775"ub960 "ubc30"uc218.
                        "etf_trgt_nmix_bstp_code": "str",  # Optional.
                          ETF"ub300"uc0c1"uc9c0"uc218"uc5c5"uc885"ucf54"ub4dc.
                        "frgn_hldn_qty": "str",  # Optional. "uc678"uad6d"uc778 "ubcf4"uc720
                          "uc218"ub7c9.
                        "frgn_hldn_qty_rate": "str",  # Optional. "uc678"uad6d"uc778
                          "ubcf4"uc720 "uc218"ub7c9 "ube44"uc728.
                        "frgn_limt_rate": "str",  # Optional. "uc678"uad6d"uc778 "ud55c"ub3c4
                          "ube44"uc728.
                        "frgn_oder_able_qty": "str",  # Optional. "uc678"uad6d"uc778
                          "uc8fc"ubb38 "uac00"ub2a5 "uc218"ub7c9.
                        "lp_hldn_rate": "str",  # Optional. LP "ubcf4"uc720 "ube44"uc728.
                        "lp_hldn_vol": "str",  # Optional. ETN LP "ubcf4"uc720"ub7c9.
                        "lp_oder_able_cls_code": "str",  # Optional. LP "uc8fc"ubb38
                          "uac00"ub2a5 "uad6c"ubd84 "ucf54"ub4dc.
                        "lstn_stcn": "str",  # Optional. "uc0c1"uc7a5 "uc8fc"uc218.
                        "mbcr_name": "str",  # Optional. "ud68c"uc6d0"uc0ac "uba85.
                        "mtrt_date": "str",  # Optional. "ub9cc"uae30 "uc77c"uc790.
                        "nav": "str",  # Optional. NAV.
                        "nav_prdy_ctrt": "str",  # Optional. NAV "uc804"uc77c
                          "ub300"ube44"uc728.
                        "nav_prdy_vrss": "str",  # Optional. NAV "uc804"uc77c "ub300"ube44.
                        "nav_prdy_vrss_sign": "str",  # Optional. NAV "uc804"uc77c
                          "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                          "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "prdy_clpr_vrss_hgpr_rate": "str",  # Optional. "uc804"uc77c
                          "uc885"uac00 "ub300"ube44 "ucd5c"uace0"uac00 "ube44"uc728.
                        "prdy_clpr_vrss_lwpr_rate": "str",  # Optional. "uc804"uc77c
                          "uc885"uac00 "ub300"ube44 "ucd5c"uc800"uac00 "ube44"uc728.
                        "prdy_clpr_vrss_oprc_rate": "str",  # Optional. "uc804"uc77c
                          "uc885"uac00 "ub300"ube44 "uc2dc"uac002 "ube44"uc728.
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_last_nav": "str",  # Optional. "uc804"uc77c "ucd5c"uc885 NAV.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "shrg_type_code": "str",  # Optional.
                          "ubd84"ubc30"uae08"ud615"ud0dc"ucf54"ub4dc.
                        "stck_dryy_hgpr": "str",  # Optional. "uc8fc"uc2dd "uc5f0"uc911
                          "ucd5c"uace0"uac00.
                        "stck_dryy_lwpr": "str",  # Optional. "uc8fc"uc2dd "uc5f0"uc911
                          "ucd5c"uc800"uac00.
                        "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uace0"uac00.
                        "stck_llam": "str",  # Optional. "uc8fc"uc2dd "ud558"ud55c"uac00.
                        "stck_lstn_date": "str",  # Optional. "uc8fc"uc2dd "uc0c1"uc7a5
                          "uc77c"uc790.
                        "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd "ucd5c"uc800"uac00.
                        "stck_mxpr": "str",  # Optional. "uc8fc"uc2dd "uc0c1"ud55c"uac00.
                        "stck_oprc": "str",  # Optional. "uc8fc"uc2dd "uc2dc"uac002.
                        "stck_prdy_clpr": "str",  # Optional. "uc8fc"uc2dd "uc804"uc77c
                          "uc885"uac00.
                        "stck_prpr": "str",  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                        "stck_sdpr": "str",  # Optional. "uc8fc"uc2dd "uae30"uc900"uac00.
                        "stck_sspr": "str",  # Optional. "uc8fc"uc2dd "ub300"uc6a9"uac00.
                        "trc_errt": "str",  # Optional. "ucd94"uc801 "uc624"ucc28"uc728.
                        "vi_cls_code": "str"  # Optional.
                          VI"uc801"uc6a9"uad6c"ubd84"ucf54"ub4dc. Known values are: "Y" and "N".
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_etf_n_etn_price_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_etf_n_etn_nav_comparison_trend(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02440000",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """ETF/ETN NAV 비교 추이(종목) 조회.

        NAV 비교추이(종목) API입니다.

        한국투자 HTS(eFriend Plus) > [0244] ETF/ETN 비교추이(NAV/IIV) 좌측 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면
        기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST02440000 : ETF/ETN NAV 비교 추이(종목). "FHPST02440000" Default value is "FHPST02440000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                              "ub300"uae08.
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "stck_hgpr": "str",  # Optional. "uc8fc"uc2dd
                              "ucd5c"uace0"uac00.
                            "stck_llam": "str",  # Optional. "uc8fc"uc2dd
                              "ud558"ud55c"uac00.
                            "stck_lwpr": "str",  # Optional. "uc8fc"uc2dd
                              "ucd5c"uc800"uac00.
                            "stck_mxpr": "str",  # Optional. "uc8fc"uc2dd
                              "uc0c1"ud55c"uac00.
                            "stck_oprc": "str",  # Optional. "uc8fc"uc2dd "uc2dc"uac00.
                            "stck_prdy_clpr": "str",  # Optional. "uc8fc"uc2dd
                              "uc804"uc77c "uc885"uac00.
                            "stck_prpr": "str"  # Optional. "uc8fc"uc2dd
                              "ud604"uc7ac"uac00.
                        }
                    ],
                    "output2": {
                        "hprc_nav": "str",  # Optional. NAV"uace0"uac00.
                        "lprc_nav": "str",  # Optional. NAV"uc800"uac00.
                        "nav": "str",  # Optional. NAV.
                        "nav_prdy_ctrt": "str",  # Optional. NAV "uc804"uc77c
                          "ub300"ube44"uc728.
                        "nav_prdy_vrss": "str",  # Optional. NAV "uc804"uc77c "ub300"ube44.
                        "nav_prdy_vrss_sign": "str",  # Optional. NAV "uc804"uc77c
                          "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                          "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "oprc_nav": "str",  # Optional. NAV"uc2dc"uac00.
                        "prdy_clpr_nav": "str"  # Optional. NAV"uc804"uc77c"uc885"uac00.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_etf_n_etn_nav_comparison_trend_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_etf_n_etn_nav_minute_trend(
        self,
        *,
        fid_input_iscd: str,
        fid_hour_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02440100",
        fid_cond_mrkt_div_code: str = "E",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """ETF/ETN NAV 비교 추이(분) 조회.

        NAV 비교추이(분) API입니다.

        한국투자 HTS(eFriend Plus) > [0244] ETF/ETN 비교추이(NAV/IIV) 좌측 화면 "분별" 비교추이 기능을 API로 개발한 사항으로, 해당 화면을
        참고하시면 기능을 이해하기 쉽습니다.:code:`<br/>`
        실전계좌의 경우, 한 번의 호출에 최근 30건까지 확인 가능합니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_hour_cls_code: FID 시간대 구분 코드

         1분 :60:code:`<br/>`
         3분: 180:code:`<br/>`
         …:code:`<br/>`
         120분:7200. Required.
        :paramtype fid_hour_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST02440100 : ETF/ETN NAV 비교 추이(분). "FHPST02440100" Default value is "FHPST02440100".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         E : 고정값. "E" Default value is "E".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "bsop_hour": "str",  # Optional. "uc601"uc5c5 "uc2dc"uac04
                              hhmmss.
                            "cntg_vol": "str",  # Optional. "uccb4"uacb0
                              "uac70"ub798"ub7c9.
                            "dprt": "str",  # Optional. "uad34"ub9ac"uc728.
                            "nav": "str",  # Optional. NAV.
                            "nav_prdy_ctrt": "str",  # Optional. NAV "uc804"uc77c
                              "ub300"ube44"uc728.
                            "nav_prdy_vrss": "str",  # Optional. NAV "uc804"uc77c
                              "ub300"ube44.
                            "nav_prdy_vrss_sign": "str",  # Optional. NAV "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "nav_vrss_prpr": "str",  # Optional. NAV "ub300"ube44
                              "ud604"uc7ac"uac00.
                            "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "stck_prpr": "str"  # Optional. "uc8fc"uc2dd
                              "ud604"uc7ac"uac00.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_etf_n_etn_nav_minute_trend_request(
            fid_input_iscd=fid_input_iscd,
            fid_hour_cls_code=fid_hour_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_etf_n_etn_nav_daily_trend(
        self,
        *,
        fid_input_iscd: str,
        fid_input_date1: str,
        fid_input_date2: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST02440200",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """ETF/ETN NAV 비교 추이(일) 조회.

        NAV 비교추이(일) API입니다.

        한국투자 HTS(eFriend Plus) > [0244] ETF/ETN 비교추이(NAV/IIV) 좌측 화면 "일별" 비교추이 기능을 API로 개발한 사항으로, 해당 화면을
        참고하시면 기능을 이해하기 쉽습니다.:code:`<br/>`
        실전계좌의 경우, 한 번의 호출에 최대 100건까지 확인 가능합니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_input_date1: FID 입력 일자 1

         조회 시작일자 (ex. 20240101, YYYYMMDD). Required.
        :paramtype fid_input_date1: str
        :keyword fid_input_date2: FID 입력 일자 2

         조회 종료일자 (ex. 20240220, YYYYMMDD). Required.
        :paramtype fid_input_date2: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST02440200 : ETF/ETN NAV 비교 추이(일). "FHPST02440200" Default value is "FHPST02440200".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "cntg_vol": "str",  # Optional. "uccb4"uacb0
                              "uac70"ub798"ub7c9.
                            "dprt": "str",  # Optional. "uad34"ub9ac"uc728.
                            "nav": "str",  # Optional. NAV.
                            "nav_prdy_ctrt": "str",  # Optional. NAV "uc804"uc77c
                              "ub300"ube44"uc728.
                            "nav_prdy_vrss": "str",  # Optional. NAV "uc804"uc77c
                              "ub300"ube44.
                            "nav_prdy_vrss_sign": "str",  # Optional. NAV "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "nav_vrss_prpr": "str",  # Optional. NAV "ub300"ube44
                              "ud604"uc7ac"uac00.
                            "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "stck_bsop_date": "str",  # Optional. "uc8fc"uc2dd
                              "uc601"uc5c5 "uc77c"uc790.
                            "stck_clpr": "str"  # Optional. "uc8fc"uc2dd "uc885"uac00.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_etf_n_etn_nav_daily_trend_request(
            fid_input_iscd=fid_input_iscd,
            fid_input_date1=fid_input_date1,
            fid_input_date2=fid_input_date2,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_etf_n_etn_component_stock_price(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST121600C0",
        fid_cond_mrkt_div_code: str = "J",
        fid_cond_scr_div_code: str = "11216",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """ETF/ETN 구성종목 시세 조회.

        ETF 구성종목시세 API입니다.

        한국투자 HTS(eFriend Plus) > [0245] ETF/ETN 구성종목시세 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.

        :keyword fid_input_iscd: FID 조건 종목코드

         종목번호 (6자리):code:`<br/>`
         ETN의 경우, Q로 시작 (EX. Q500001). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST121600C0 : ETF/ETN 구성종목 시세. "FHKST121600C0" Default value is "FHKST121600C0".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         J : 주식. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_cond_scr_div_code: 조건 화면 분류 코드

         Unique key( 11216 ). "11216" Default value is "11216".
        :paramtype fid_cond_scr_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "etf_cnfg_issu_avls": "str",  # Optional. "uc804"uc77c
                          "ub300"ube44"uc728.
                        "etf_cnfg_issu_cnt": "str",  # Optional. "uc804"uccb4 "ub300"uc8fc
                          "uc2e0"uaddc "uc8fc"uc218.
                        "etf_cu_unit_scrt_cnt": "str",  # Optional. ETF CU "ub2e8"uc704
                          "uc99d"uad8c "uc218.
                        "etf_ntas_ttam": "str",  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc794"uace0 "uc8fc"uc218.
                        "hprc_nav": "str",  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc794"uace0 "uae08"uc561.
                        "lprc_nav": "str",  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc794"uace0 "ube44"uc728.
                        "nav": "str",  # Optional. NAV.
                        "nav_prdy_ctrt": "str",  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc0c1"ud658 "uc8fc"uc218.
                        "nav_prdy_vrss": "str",  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc2e0"uaddc "uc8fc"uc218.
                        "nav_prdy_vrss_sign": "str",  # Optional. "uacb0"uc81c "uc77c"uc790
                          1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "oprc_nav": "str",  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc0c1"ud658 "uae08"uc561.
                        "prdy_clpr_nav": "str",  # Optional. "uc804"uccb4 "uc735"uc790
                          "uc2e0"uaddc "uae08"uc561.
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "stck_prpr": "str"  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00.
                    },
                    "output2": [
                        {
                            "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                              "ub300"uae08.
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "etf_cnfg_issu_avls": "str",  # Optional.
                              ETF"uad6c"uc131"uc885"ubaa9"uc2dc"uac00"ucd1d"uc561.
                            "etf_cnfg_issu_rlim": "str",  # Optional.
                              ETF"uad6c"uc131"uc885"ubaa9"ube44"uc911.
                            "etf_vltn_amt": "str",  # Optional.
                              ETF"uad6c"uc131"uc885"ubaa9"ub0b4"ud3c9"uac00"uae08"uc561.
                            "hts_avls": "str",  # Optional. HTS "uc2dc"uac00"ucd1d"uc561.
                            "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                              "uc885"ubaa9"uba85.
                            "prdy_ctrt": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44"uc728.
                            "prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "prdy_vrss_vol": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "uac70"ub798"ub7c9.
                            "stck_prpr": "str",  # Optional. "uc8fc"uc2dd
                              "ud604"uc7ac"uac00.
                            "stck_shrn_iscd": "str",  # Optional. "uc8fc"uc2dd
                              "ub2e8"ucd95 "uc885"ubaa9"ucf54"ub4dc.
                            "tday_rsfl_rate": "str",  # Optional. "ub2f9"uc77c
                              "ub4f1"ub77d "ube44"uc728.
                            "tr_pbmn_tnrt": "str"  # Optional.
                              "uac70"ub798"ub300"uae08"ud68c"uc804"uc728.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_etf_n_etn_component_stock_price_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_chart_price(
        self,
        *,
        fid_input_iscd: str,
        fid_input_date1: str,
        fid_input_date2: str,
        fid_period_div_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKUP03500100",
        fid_cond_mrkt_div_code: str = "U",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 업종기간별 시세(일/주/월/년) 조회.

        국내주식 업종기간별시세(일/주/월/년) API입니다.

        실전계좌/모의계좌의 경우, 한 번의 호출에 최대 50건까지 확인 가능합니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체, 0001:코스피, 1001:코스닥, 2001:코스피200.. 등:code:`<br/>`
         포탈 (FAQ : 종목정보 다운로드(국내) - 업종코드 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_input_date1: 조회 시작일자 (ex. 20220501). Required.
        :paramtype fid_input_date1: str
        :keyword fid_input_date2: 조회 종료일자 (ex. 20220530). Required.
        :paramtype fid_input_date2: str
        :keyword fid_period_div_code: FID 기간 구분 코드

         D : 일:code:`<br/>`
         W : 주:code:`<br/>`
         M : 월:code:`<br/>`
         Y : 년. Known values are: "D", "W", "M", and "Y". Required.
        :paramtype fid_period_div_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         [실전투자/모의투자]:code:`<br/>`
         FHKUP03500100 : 국내업종 현재 지수. "FHKUP03500100" Default value is "FHKUP03500100".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "bstp_cls_code": "str",  # Optional. "uc5c5"uc885 "uad6c"ubd84
                          "ucf54"ub4dc.
                        "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uace0"uac00.
                        "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uc800"uac00.
                        "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc2dc"uac002.
                        "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "futs_prdy_hgpr": "str",  # Optional. "uc5c5"uc885 "uc804"uc77c
                          "ucd5c"uace0"uac00.
                        "futs_prdy_lwpr": "str",  # Optional. "uc5c5"uc885 "uc804"uc77c
                          "ucd5c"uc800"uac00.
                        "futs_prdy_oprc": "str",  # Optional. "uc5c5"uc885 "uc804"uc77c
                          "uc2dc"uac00.
                        "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "prdy_nmix": "str",  # Optional. "uc804"uc77c "uc9c0"uc218.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss_sign": "str"  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                    },
                    "output2": [
                        {
                            "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                              "ub300"uae08.
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ucd5c"uace0"uac00.
                            "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ucd5c"uc800"uac00.
                            "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "uc2dc"uac00.
                            "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ud604"uc7ac"uac00.
                            "mod_yn": "str",  # Optional. "ubcc0"uacbd "uc5ec"ubd80.
                            "stck_bsop_date": "str"  # Optional. "uc601"uc5c5
                              "uc77c"uc790.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_chart_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_input_date1=fid_input_date1,
            fid_input_date2=fid_input_date2,
            fid_period_div_code=fid_period_div_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_minute_chart_price(
        self,
        *,
        fid_input_iscd: str,
        fid_etc_cls_code: str,
        fid_input_hour1: str,
        fid_pw_data_incu_yn: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKUP03500200",
        fid_cond_mrkt_div_code: str = "U",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 업종분봉 조회.

        국내주식 업종분봉조회 API입니다.

        실전계좌의 경우, 한 번의 호출에 최대 102건까지 확인 가능합니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체, 0001:코스피, 1001:코스닥, 2001:코스피200.. 등:code:`<br/>`
         포탈 (FAQ : 종목정보 다운로드(국내) - 업종코드 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_etc_cls_code: FID 기타 구분 코드

         0: 기본:code:`<br/>`
         1:장마감, 시간외 제외. Known values are: "0" and "1". Required.
        :paramtype fid_etc_cls_code: str
        :keyword fid_input_hour1: FID 입력 시간

         30(30초), 60(1분), 300(5분), 600(10분). Required.
        :paramtype fid_input_hour1: str
        :keyword fid_pw_data_incu_yn: FID 과거 데이터 포함 여부

         Y : 과거:code:`<br/>`
         N : 당일. Known values are: "Y" and "N". Required.
        :paramtype fid_pw_data_incu_yn: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKUP03500200 : 국내주식 업종 분봉조회. "FHKUP03500200" Default value is "FHKUP03500200".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "bstp_cls_code": "str",  # Optional. "uc5c5"uc885 "uad6c"ubd84
                          "ucf54"ub4dc.
                        "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uace0"uac00.
                        "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uc800"uac00.
                        "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc2dc"uac002.
                        "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "futs_prdy_hgpr": "str",  # Optional. "uc120"ubb3c "uc804"uc77c
                          "ucd5c"uace0"uac00.
                        "futs_prdy_lwpr": "str",  # Optional. "uc120"ubb3c "uc804"uc77c
                          "ucd5c"uc800"uac00.
                        "futs_prdy_oprc": "str",  # Optional. "uc120"ubb3c "uc804"uc77c
                          "uc2dc"uac00.
                        "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "prdy_nmix": "str",  # Optional. "uc804"uc77c "uc9c0"uc218.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss_sign": "str"  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                    },
                    "output2": [
                        {
                            "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                              "ub300"uae08.
                            "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ucd5c"uace0"uac00.
                            "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ucd5c"uc800"uac00.
                            "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "uc2dc"uac002.
                            "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ud604"uc7ac"uac00.
                            "cntg_vol": "str",  # Optional. "uccb4"uacb0
                              "uac70"ub798"ub7c9.
                            "stck_bsop_date": "str",  # Optional. "uc8fc"uc2dd
                              "uc601"uc5c5 "uc77c"uc790.
                            "stck_cntg_hour": "str"  # Optional. "uc8fc"uc2dd
                              "uccb4"uacb0 "uc2dc"uac04.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_minute_chart_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_etc_cls_code=fid_etc_cls_code,
            fid_input_hour1=fid_input_hour1,
            fid_pw_data_incu_yn=fid_pw_data_incu_yn,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_price(
        self,
        *,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPUP02100000",
        fid_cond_mrkt_div_code: str = "U",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내업종 현재 지수 조회.

        국내업종 현재지수 API입니다.

        한국투자 HTS(eFriend Plus) > [0210] 업종 현재지수 화면 의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체, 0001:코스피, 1001:코스닥, 2001:코스피200.. 등:code:`<br/>`
         포탈 (FAQ : 종목정보 다운로드(국내) - 업종코드 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPUP02100000 : 국내업종 현재 지수. "FHPUP02100000" Default value is "FHPUP02100000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "ascn_issu_cnt": "str",  # Optional. "uc0c1"uc2b9 "uc885"ubaa9
                          "uc218.
                        "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uace0"uac00.
                        "bstp_nmix_hgpr_prdy_ctrt": "str",  # Optional. "uc5c5"uc885
                          "uc9c0"uc218 "ucd5c"uace0"uac00 "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uc800"uac00.
                        "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc2dc"uac002.
                        "bstp_nmix_oprc_prdy_ctrt": "str",  # Optional. "uc5c5"uc885
                          "uc9c0"uc218 "uc2dc"uac002 "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "down_issu_cnt": "str",  # Optional. "ud558"ub77d "uc885"ubaa9
                          "uc218.
                        "dryy_bstp_nmix_hgpr": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uace0"uac00.
                        "dryy_bstp_nmix_hgpr_date": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uace0"uac00"uc77c"uc790.
                        "dryy_bstp_nmix_lwpr": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uc800"uac00.
                        "dryy_bstp_nmix_lwpr_date": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uc800"uac00"uc77c"uc790.
                        "dryy_hgpr_vrss_prpr_rate": "str",  # Optional. "uc5f0"uc911
                          "ucd5c"uace0"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "dryy_lwpr_vrss_prpr_rate": "str",  # Optional. "uc5f0"uc911
                          "ucd5c"uc800"uac00 "ub300"ube44 "ud604"uc7ac"uac00 "ube44"uc728.
                        "hgpr_vrss_prpr_sign": "str",  # Optional. "ucd5c"uace0"uac00
                          "ub300"ube44 "ud604"uc7ac"uac00 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2
                          : "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "lslm_issu_cnt": "str",  # Optional. "ud558"ud55c "uc885"ubaa9
                          "uc218.
                        "lwpr_vrss_prpr_sign": "str",  # Optional. "ucd5c"uc800"uac00
                          "ub300"ube44 "ud604"uc7ac"uac00 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2
                          : "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "ntby_rsqn": "str",  # Optional. "uc21c"ub9e4"uc218 "uc794"ub7c9.
                        "oprc_vrss_prpr_sign": "str",  # Optional. "uc2dc"uac002 "ub300"ube44
                          "ud604"uc7ac"uac00 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                          "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                          "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2", "3",
                          "4", and "5".
                        "prdy_clpr_vrss_lwpr": "str",  # Optional. "uc804"uc77c "uc885"uac00
                          "ub300"ube44 "ucd5c"uc800"uac00.
                        "prdy_clpr_vrss_lwpr_rate": "str",  # Optional. "uc804"uc77c
                          "uc885"uac00 "ub300"ube44 "ucd5c"uc800"uac00 "ube44"uc728.
                        "prdy_nmix_vrss_nmix_hgpr": "str",  # Optional. "uc804"uc77c
                          "uc9c0"uc218 "ub300"ube44 "uc9c0"uc218 "ucd5c"uace0"uac00.
                        "prdy_nmix_vrss_nmix_oprc": "str",  # Optional. "uc804"uc77c
                          "uc9c0"uc218 "ub300"ube44 "uc9c0"uc218 "uc2dc"uac002.
                        "prdy_tr_pbmn": "str",  # Optional. "uc804"uc77c "uac70"ub798
                          "ub300"uae08.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "seln_rsqn_rate": "str",  # Optional. "ub9e4"ub3c4 "uc794"ub7c9
                          "ube44"uc728.
                        "shnu_rsqn_rate": "str",  # Optional. "ub9e4"uc2182 "uc794"ub7c9
                          "ube44"uc728.
                        "stnr_issu_cnt": "str",  # Optional. "ubcf4"ud569 "uc885"ubaa9
                          "uc218.
                        "total_askp_rsqn": "str",  # Optional. "ucd1d
                          "ub9e4"ub3c4"ud638"uac00 "uc794"ub7c9.
                        "total_bidp_rsqn": "str",  # Optional. "ucd1d
                          "ub9e4"uc218"ud638"uac00 "uc794"ub7c9.
                        "uplm_issu_cnt": "str"  # Optional. "uc0c1"ud55c "uc885"ubaa9 "uc218.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_price_request(
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_daily_price(
        self,
        *,
        fid_input_iscd: str,
        fid_input_date1: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPUP02120000",
        fid_cond_mrkt_div_code: str = "U",
        fid_period_div_code: str = "D",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내업종 일자별 지수 조회.

        국내업종 일자별지수 API입니다. 한 번의 조회에 100건까지 확인 가능합니다.

        한국투자 HTS(eFriend Plus) > [0212] 업종 일자별지수 화면 의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체, 0001:코스피, 1001:코스닥, 2001:코스피200.. 등:code:`<br/>`
         포탈 (FAQ : 종목정보 다운로드(국내) - 업종코드 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_input_date1: FID 입력 날짜1

         입력 날짜(ex. 20240223, yyyyMMdd). Required.
        :paramtype fid_input_date1: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPUP02120000 : 국내업종 일자별 지수. "FHPUP02120000" Default value is "FHPUP02120000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_period_div_code: FID 기간 구분 코드

         일/주/월 구분코드 ( D:일별 , W:주별, M:월별 ). Known values are: "D", "W", and "M". Default value is "D".
        :paramtype fid_period_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "ascn_issu_cnt": "str",  # Optional. "uc0c1"uc2b9 "uc885"ubaa9
                          "uc218.
                        "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uace0"uac00.
                        "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uc800"uac00.
                        "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc2dc"uac00.
                        "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "down_issu_cnt": "str",  # Optional. "ud558"ub77d "uc885"ubaa9
                          "uc218.
                        "dryy_bstp_nmix_hgpr": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uace0"uac00.
                        "dryy_bstp_nmix_hgpr_date": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uace0"uac00"uc77c"uc790.
                        "dryy_bstp_nmix_lwpr": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uc800"uac00.
                        "dryy_bstp_nmix_lwpr_date": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uc800"uac00"uc77c"uc790.
                        "lslm_issu_cnt": "str",  # Optional. "ud558"ud55c "uc885"ubaa9
                          "uc218.
                        "prdy_tr_pbmn": "str",  # Optional. "uc804"uc77c "uac70"ub798
                          "ub300"uae08.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "stnr_issu_cnt": "str",  # Optional. "ubcf4"ud569 "uc885"ubaa9
                          "uc218.
                        "uplm_issu_cnt": "str"  # Optional. "uc0c1"ud55c "uc885"ubaa9 "uc218.
                    },
                    "output2": [
                        {
                            "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                              "ub300"uae08.
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "acml_vol_rlim": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9 "ube44"uc911.
                            "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ucd5c"uace0"uac00.
                            "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ucd5c"uc800"uac00.
                            "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "uc2dc"uac002.
                            "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "uc804"uc77c "ub300"ube44"uc728.
                            "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "uc804"uc77c "ub300"ube44.
                            "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ud604"uc7ac"uac00.
                            "d20_dsrt": "str",  # Optional. 20"uc77c "uc774"uaca9"ub3c4.
                            "invt_new_psdg": "str",  # Optional. "ud22c"uc790 "uc2e0
                              "uc2ec"ub9ac"ub3c4.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "stck_bsop_date": "str"  # Optional. "uc8fc"uc2dd
                              "uc601"uc5c5 "uc77c"uc790.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_daily_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_input_date1=fid_input_date1,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_period_div_code=fid_period_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_category_price(
        self,
        *,
        fid_input_iscd: str,
        fid_mrkt_cls_code: str,
        fid_blng_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPUP02140000",
        fid_cond_mrkt_div_code: str = "U",
        fid_cond_scr_div_code: str = "20214",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내업종 구분별 전체 시세 조회.

        국내업종 구분별전체시세 API입니다.

        한국투자 HTS(eFriend Plus) > [0214] 업종 전체시세 화면 의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체, 0001:코스피, 1001:코스닥, 2001:코스피200.. 등:code:`<br/>`
         포탈 (FAQ : 종목정보 다운로드(국내) - 업종코드 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_mrkt_cls_code: FID 시장 구분 코드

         K:거래소:code:`<br/>`
         Q:코스닥:code:`<br/>`
         K2:코스피200:code:`<br/>`. Known values are: "K", "Q", and "K2". Required.
        :paramtype fid_mrkt_cls_code: str
        :keyword fid_blng_cls_code: FID 소속 구분 코드

         시장구분코드에 따라 아래와 같이 입력:code:`<br/>`
         시장구분코드(K:거래소) 0:전업종, 1:기타구분, 2:자본금구분 3:상업별구분:code:`<br/>`
         시장구분코드(Q:코스닥) 0:전업종, 1:기타구분, 2:벤처구분 3:일반구분:code:`<br/>`
         시장구분코드(K2:코스닥) 0:전업종. Known values are: "0", "1", "2", and "3". Required.
        :paramtype fid_blng_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPUP02140000 : 국내업종 현재 지수. "FHPUP02140000" Default value is "FHPUP02140000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_cond_scr_div_code: FID 조건 화면 분류 코드

         Unique key( 20214 ). "20214" Default value is "20214".
        :paramtype fid_cond_scr_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "ascn_issu_cnt": "str",  # Optional. "uc0c1"uc2b9 "uc885"ubaa9
                          "uc218.
                        "bstp_nmix_hgpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uace0"uac00.
                        "bstp_nmix_lwpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ucd5c"uc800"uac00.
                        "bstp_nmix_oprc": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc2dc"uac00.
                        "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "down_issu_cnt": "str",  # Optional. "ud558"ub77d "uc885"ubaa9
                          "uc218.
                        "dryy_bstp_nmix_hgpr": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uace0"uac00.
                        "dryy_bstp_nmix_hgpr_date": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uace0"uac00"uc77c"uc790.
                        "dryy_bstp_nmix_lwpr": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uc800"uac00.
                        "dryy_bstp_nmix_lwpr_date": "str",  # Optional.
                          "uc5f0"uc911"uc5c5"uc885"uc9c0"uc218"ucd5c"uc800"uac00"uc77c"uc790.
                        "lslm_issu_cnt": "str",  # Optional. "ud558"ud55c "uc885"ubaa9
                          "uc218.
                        "output2": [
                            {
                                "acml_tr_pbmn": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798 "ub300"uae08.
                                "acml_tr_pbmn_rlim": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798 "ub300"uae08 "ube44"uc911.
                                "acml_vol": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798"ub7c9.
                                "acml_vol_rlim": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798"ub7c9 "ube44"uc911.
                                "bstp_cls_code": "str",  # Optional. "uc5c5"uc885
                                  "uad6c"ubd84 "ucf54"ub4dc.
                                "bstp_nmix_prdy_ctrt": "str",  # Optional.
                                  "uc5c5"uc885 "uc9c0"uc218 "uc804"uc77c "ub300"ube44"uc728.
                                "bstp_nmix_prdy_vrss": "str",  # Optional.
                                  "uc5c5"uc885 "uc9c0"uc218 "uc804"uc77c "ub300"ube44.
                                "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885
                                  "uc9c0"uc218 "ud604"uc7ac"uac00.
                                "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                                  "uc885"ubaa9"uba85.
                                "prdy_vrss_sign": "str"  # Optional. "uc804"uc77c
                                  "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                            }
                        ],
                        "prdy_tr_pbmn": "str",  # Optional. "uc804"uc77c "uac70"ub798
                          "ub300"uae08.
                        "prdy_vol": "str",  # Optional. "uc804"uc77c "uac70"ub798"ub7c9.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "stnr_issu_cnt": "str",  # Optional. "ubcf4"ud569 "uc885"ubaa9
                          "uc218.
                        "uplm_issu_cnt": "str"  # Optional. "uc0c1"ud55c "uc885"ubaa9 "uc218.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_category_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_mrkt_cls_code=fid_mrkt_cls_code,
            fid_blng_cls_code=fid_blng_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_total_expected_conclusion(
        self,
        *,
        fid_input_iscd: str,
        fid_mrkt_cls_code: str,
        fid_mkop_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKUP11750000",
        fid_cond_mrkt_div_code: str = "U",
        fid_cond_scr_div_code: str = "11175",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 예상체결 전체지수 조회.

        국내주식 예상체결 전체지수 API입니다.

        한국투자 HTS(eFriend Plus) > [0185] 예상체결 전체지수 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체, 0001:코스피, 1001:코스닥, 2001:코스피200.. 등:code:`<br/>`
         포탈 (FAQ : 종목정보 다운로드(국내) - 업종코드 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_mrkt_cls_code: FID 시장 구분 코드

         O: 전체
         K: 거래소
         Q: 코스닥. Known values are: "O", "K", and "Q". Required.
        :paramtype fid_mrkt_cls_code: str
        :keyword fid_mkop_cls_code: 장운영 구분 코드

         1: 장시작전:code:`<br/>`
         2: 장마감. Known values are: "1" and "2". Required.
        :paramtype fid_mkop_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKUP11750000 : 국내주식 예상체결 전체지수. "FHKUP11750000" Default value is "FHKUP11750000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_cond_scr_div_code: 조건 화면 분류 코드 Unique key(11175). "11175" Default value is
         "11175".
        :paramtype fid_cond_scr_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "ascn_issu_cnt": "str",  # Optional. "uc0c1"uc2b9 "uc885"ubaa9
                          "uc218.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "down_issu_cnt": "str",  # Optional. "ud558"ub77d "uc885"ubaa9
                          "uc218.
                        "output2": [
                            {
                                "acml_vol": "str",  # Optional. "ub204"uc801
                                  "uac70"ub798"ub7c9.
                                "ascn_issu_cnt": "str",  # Optional. "uc0c1"uc2b9
                                  "uc885"ubaa9 "uc218.
                                "bstp_cls_code": "str",  # Optional. "uc5c5"uc885
                                  "uad6c"ubd84 "ucf54"ub4dc.
                                "bstp_nmix_prdy_ctrt": "str",  # Optional.
                                  "uc5c5"uc885 "uc9c0"uc218 "uc804"uc77c "ub300"ube44"uc728.
                                "bstp_nmix_prdy_vrss": "str",  # Optional.
                                  "uc5c5"uc885 "uc9c0"uc218 "uc804"uc77c "ub300"ube44.
                                "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885
                                  "uc9c0"uc218 "ud604"uc7ac"uac00.
                                "down_issu_cnt": "str",  # Optional. "ud558"ub77d
                                  "uc885"ubaa9 "uc218.
                                "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                                  "uc885"ubaa9"uba85.
                                "nmix_sdpr": "str",  # Optional. "uc9c0"uc218
                                  "uae30"uc900"uac00.
                                "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                                "stnr_issu_cnt": "str"  # Optional. "ubcf4"ud569
                                  "uc885"ubaa9 "uc218.
                            }
                        ],
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "stnr_issu_cnt": "str"  # Optional. "ubcf4"ud569 "uc885"ubaa9 "uc218.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_total_expected_conclusion_request(
            fid_input_iscd=fid_input_iscd,
            fid_mrkt_cls_code=fid_mrkt_cls_code,
            fid_mkop_cls_code=fid_mkop_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_tick_price(
        self,
        *,
        fid_input_iscd: str,
        fid_input_hour1: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPUP02110100",
        fid_cond_mrkt_div_code: str = "U",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내업종 시간별지수(초) 조회.

        국내업종 시간별지수(초) API입니다.

        한국투자 HTS(eFriend Plus) > [0211] 업종 시간별지수 화면에서 우측 '10초' 선택 시의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면
        기능을 이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력종목코드

         0001:거래소:code:`<br/>`
         1001:코스닥:code:`<br/>`
         2001:코스피200:code:`<br/>`
         3003:KSQ150. Known values are: "0001", "1001", "2001", and "3003". Required.
        :paramtype fid_input_iscd: str
        :keyword fid_input_hour1: FID 입력시간1

         초단위, 60(1분), 300(5분), 600(10분). Known values are: "60", "300", and "600". Required.
        :paramtype fid_input_hour1: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPUP02110100 : 국내업종 시간별지수(초). "FHPUP02110100" Default value is "FHPUP02110100".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                              "ub300"uae08.
                            "acml_vol": "str",  # Optional. "ub204"uc801
                              "uac70"ub798"ub7c9.
                            "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "uc804"uc77c "ub300"ube44"uc728.
                            "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "uc804"uc77c "ub300"ube44.
                            "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885
                              "uc9c0"uc218 "ud604"uc7ac"uac00.
                            "cntg_vol": "str",  # Optional. "uccb4"uacb0
                              "uac70"ub798"ub7c9.
                            "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                              "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                              "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                              "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1", "2",
                              "3", "4", and "5".
                            "stck_cntg_hour": "str"  # Optional. "uc8fc"uc2dd
                              "uccb4"uacb0 "uc2dc"uac04.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_tick_price_request(
            fid_input_iscd=fid_input_iscd,
            fid_input_hour1=fid_input_hour1,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_minute_price(
        self,
        *,
        fid_input_hour1: str,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPUP02110200",
        fid_cond_mrkt_div_code: str = "U",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내업종 시간별지수(분) 조회.

        국내업종 시간별지수(분) API입니다.

        한국투자 HTS(eFriend Plus) > [0211] 업종 시간별지수 화면에서 우측 '1분' 선택 시의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_input_hour1: FID 입력 시간

         초단위, 60(1분), 300(5분), 600(10분). Required.
        :paramtype fid_input_hour1: str
        :keyword fid_input_iscd: FID 입력 종목코드

         0001: 거래소:code:`<br/>`
         1001: 코스닥:code:`<br/>`
         2001: 코스피200:code:`<br/>`
         3003: KSQ150. Known values are: "0001", "1001", "2001", and "3003". Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPUP02110200 : 국내업종 시간별지수(분). "FHPUP02110200" Default value is "FHPUP02110200".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_tr_pbmn": "str",  # Optional. "ub204"uc801 "uac70"ub798
                          "ub300"uae08.
                        "acml_vol": "str",  # Optional. "ub204"uc801 "uac70"ub798"ub7c9.
                        "bsop_hour": "str",  # Optional. "uc601"uc5c5 "uc2dc"uac04.
                        "bstp_nmix_prdy_ctrt": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "cntg_vol": "str",  # Optional. "uccb4"uacb0 "uac70"ub798"ub7c9.
                        "prdy_vrss_sign": "str"  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_minute_price_request(
            fid_input_hour1=fid_input_hour1,
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_expected_conclusion_trend(
        self,
        *,
        fid_mkop_cls_code: str,
        fid_input_hour1: str,
        fid_input_iscd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST01840000",
        fid_cond_mrkt_div_code: str = "U",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내업종 예상체결지수 추이.

        국내주식 예상체결지수 추이 API입니다.

        한국투자 HTS(eFriend Plus) > [0184] 예상체결지수 추이 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :keyword fid_mkop_cls_code: FID 장운영 구분 코드

         1: 장시작전:code:`<br/>`
         2: 장마감. Known values are: "1" and "2". Required.
        :paramtype fid_mkop_cls_code: str
        :keyword fid_input_hour1: FID 입력 시간1

         10(10초), 30(30초), 60(1분), 600(10분). Known values are: "10", "30", "60", and "600". Required.
        :paramtype fid_input_hour1: str
        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체:code:`<br/>`
         0001:코스피:code:`<br/>`
         1001:코스닥:code:`<br/>`
         2001:코스피200:code:`<br/>`
         4001: KRX100. Known values are: "0000", "0001", "1001", "2001", and "4001". Required.
        :paramtype fid_input_iscd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST01840000 : 국내주식 예상체결지수 추이. "FHPST01840000" Default value is "FHPST01840000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         U : 업종. "U" Default value is "U".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "acml_tr_pbmn": "str",  # Optional. "uae30"uc900"uac00 "ub300"ube44
                          "ud604"uc7ac"uac00.
                        "acml_vol": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "bstp_nmix_prdy_vrss": "str",  # Optional. "uc804"uc77c "ub300"ube44.
                        "bstp_nmix_prpr": "str",  # Optional. "uc5c5"uc885 "uc9c0"uc218
                          "ud604"uc7ac"uac00.
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638.
                        "prdy_vrss_sign": "str",  # Optional. "uc8fc"uc2dd "ud604"uc7ac"uac00
                          1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "stck_cntg_hour": "str"  # Optional. "uc8fc"uc2dd "ub2e8"ucd95
                          "uc885"ubaa9"ucf54"ub4dc.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_expected_conclusion_trend_request(
            fid_mkop_cls_code=fid_mkop_cls_code,
            fid_input_hour1=fid_input_hour1,
            fid_input_iscd=fid_input_iscd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_interest(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code1: str = "",
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHPST07020000",
        fid_cond_mrkt_div_code: str = "I",
        fid_cond_scr_div_code: str = "20702",
        fid_div_cls_code: str = "1",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """금리종합(국내채권/금리).

        금리 종합(국내채권/금리) API입니다.

        한국투자 HTS(eFriend Plus) > [0702] 금리 종합 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        ※ 11:30 이후에 신규데이터가 수신되는 점 참고하시기 바랍니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         0000:전체, 0001:코스피, 1001:코스닥, 2001:코스피200.. 등:code:`<br/>`
         포탈 (FAQ : 종목정보 다운로드(국내) - 업종코드 참조). Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code1: 분류구분코드

         공백 : 전체. Required. Default value is "".
        :paramtype fid_div_cls_code1: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHPST07020000 : 금리종합(국내채권/금리). "FHPST07020000" Default value is "FHPST07020000".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: FID 조건 시장 분류 코드

         I : 지수. "I" Default value is "I".
        :paramtype fid_cond_mrkt_div_code: str
        :keyword fid_cond_scr_div_code: 조건화면분류코드

         Unique key(20702). "20702" Default value is "20702".
        :paramtype fid_cond_scr_div_code: str
        :keyword fid_div_cls_code: 분류구분코드

         1: 해외금리지표. "1" Default value is "1".
        :paramtype fid_div_cls_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "bcdt_code": "str",  # Optional. "uc790"ub8cc"ucf54"ub4dc.
                        "bond_mnrt_prdy_vrss": "str",  # Optional. "ucc44"uad8c"uae08"ub9ac
                          "uc804"uc77c "ub300"ube44.
                        "bond_mnrt_prpr": "str",  # Optional. "ucc44"uad8c"uae08"ub9ac
                          "ud604"uc7ac"uac00.
                        "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                          "uc885"ubaa9"uba85.
                        "output2": [
                            {
                                "bcdt_code": "str",  # Optional.
                                  "uc790"ub8cc"ucf54"ub4dc.
                                "bond_mnrt_prdy_vrss": "str",  # Optional.
                                  "ucc44"uad8c"uae08"ub9ac "uc804"uc77c "ub300"ube44.
                                "bond_mnrt_prpr": "str",  # Optional.
                                  "ucc44"uad8c"uae08"ub9ac "ud604"uc7ac"uac00.
                                "bstp_nmix_prdy_ctrt": "str",  # Optional.
                                  "uc5c5"uc885 "uc9c0"uc218 "uc804"uc77c "ub300"ube44"uc728.
                                "hts_kor_isnm": "str",  # Optional. HTS "ud55c"uae00
                                  "uc885"ubaa9"uba85.
                                "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c
                                  "ub300"ube44 "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 :
                                  "uc0c1"uc2b9:code:`<br/>` 3 : "ubcf4"ud569:code:`<br/>` 4 :
                                  "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d. Known values are: "1",
                                  "2", "3", "4", and "5".
                                "stck_bsop_date": "str"  # Optional. "uc8fc"uc2dd
                                  "uc601"uc5c5"uc77c"uc790.
                            }
                        ],
                        "prdy_ctrt": "str",  # Optional. "uc804"uc77c "ub300"ube44"uc728.
                        "prdy_vrss_sign": "str",  # Optional. "uc804"uc77c "ub300"ube44
                          "ubd80"ud638  1 : "uc0c1"ud55c:code:`<br/>` 2 : "uc0c1"uc2b9:code:`<br/>` 3 :
                          "ubcf4"ud569:code:`<br/>` 4 : "ud558"ud55c:code:`<br/>` 5 : "ud558"ub77d.
                          Known values are: "1", "2", "3", "4", and "5".
                        "stck_bsop_date": "str"  # Optional. "uc8fc"uc2dd
                          "uc601"uc5c5"uc77c"uc790.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_interest_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code1=fid_div_cls_code1,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            fid_cond_scr_div_code=fid_cond_scr_div_code,
            fid_div_cls_code=fid_div_cls_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_index_news_title(
        self,
        *,
        fid_news_ofer_entp_code: str = "",
        fid_cond_mrkt_cls_code: str = "",
        fid_input_iscd: str = "",
        fid_titl_cntt: str = "",
        fid_input_date1: str = "",
        fid_input_hour1: str = "",
        fid_rank_sort_cls_code: str = "",
        fid_input_srno: str = "",
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST01011800",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """종합 시황/공시(제목만).

        종합 시황/공시(제목) API입니다.

        한국투자 HTS(eFriend Plus) > [0601] 종합 시황/공시 화면의 "우측 상단 리스트" 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_news_ofer_entp_code: 뉴스 제공 업체 코드 (공백). Required. Default value is "".
        :paramtype fid_news_ofer_entp_code: str
        :keyword fid_cond_mrkt_cls_code: 조건 시장 구분 코드(공백). Required. Default value is "".
        :paramtype fid_cond_mrkt_cls_code: str
        :keyword fid_input_iscd: 입력 종목코드

         공백: 전체:code:`<br/>`
         종목코드 : 해당코드가 등록된 뉴스. Required. Default value is "".
        :paramtype fid_input_iscd: str
        :keyword fid_titl_cntt: 제목 내용 (공백). Required. Default value is "".
        :paramtype fid_titl_cntt: str
        :keyword fid_input_date1: 입력 날짜

         공백: 현재기준:code:`<br/>`
         조회일자(ex 00YYYYMMDD). Required. Default value is "".
        :paramtype fid_input_date1: str
        :keyword fid_input_hour1: 입력 시간

         공백: 현재기준:code:`<br/>`
         조회시간(ex 0000HHMMSS). Required. Default value is "".
        :paramtype fid_input_hour1: str
        :keyword fid_rank_sort_cls_code: 순위 정렬 구분 코드 (공백). Required. Default value is "".
        :paramtype fid_rank_sort_cls_code: str
        :keyword fid_input_srno: 입력 일련번호 (공백). Required. Default value is "".
        :paramtype fid_input_srno: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST01011800 : 종합 시황/공시(제목). "FHKST01011800" Default value is "FHKST01011800".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": [
                        {
                            "cntt_usiq_srno": "str",  # Optional. "ub0b4"uc6a9
                              "uc870"ud68c"uc6a9 "uc77c"ub828"ubc88"ud638.
                            "data_dt": "str",  # Optional. "uc791"uc131"uc77c"uc790.
                            "data_tm": "str",  # Optional. "uc791"uc131"uc2dc"uac04.
                            "dorg": "str",  # Optional. "uc790"ub8cc"uc6d0.
                            "hts_pbnt_titl_cntt": "str",  # Optional. HTS "uacf5"uc2dc
                              "uc81c"ubaa9 "ub0b4"uc6a9.
                            "iscd1": "str",  # Optional. "uc885"ubaa9 "ucf54"ub4dc1.
                            "iscd2": "str",  # Optional. "uc885"ubaa9 "ucf54"ub4dc2.
                            "iscd3": "str",  # Optional. "uc885"ubaa9 "ucf54"ub4dc3.
                            "iscd4": "str",  # Optional. "uc885"ubaa9 "ucf54"ub4dc4.
                            "iscd5": "str",  # Optional. "uc885"ubaa9 "ucf54"ub4dc5.
                            "kor_isnm1": "str",  # Optional. "uc885"ubaa9"uba851.
                            "kor_isnm10": "str",  # Optional. "uc885"ubaa9"uba8510.
                            "kor_isnm2": "str",  # Optional. "uc885"ubaa9"uba852.
                            "kor_isnm3": "str",  # Optional. "uc885"ubaa9"uba853.
                            "kor_isnm4": "str",  # Optional. "uc885"ubaa9"uba854.
                            "kor_isnm5": "str",  # Optional. "uc885"ubaa9"uba855.
                            "kor_isnm6": "str",  # Optional. "uc885"ubaa9"uba856.
                            "kor_isnm7": "str",  # Optional. "uc885"ubaa9"uba857.
                            "kor_isnm8": "str",  # Optional. "uc885"ubaa9"uba858.
                            "kor_isnm9": "str",  # Optional. "uc885"ubaa9"uba859.
                            "news_lrdv_code": "str",  # Optional. "ub274"uc2a4
                              "ub300"uad6c"ubd84  "ub274"uc2a4 "uc81c"uacf5"uc5c5"uccb4
                              "ucf54"ub4dc"uc5d0 "ub530"ub77c "ub2e4"ub984:code:`<br/>` :code:`<b><u>2
                              : "ud55c"uacbd news</u></b>`:code:`<br/>` 01: "uc99d"uad8c:code:`<br/>`
                              04: "uacbd"uc81c:code:`<br/>` 03: "ubd80"ub3d9"uc0b0:code:`<br/>` 07:
                              IT/"uacfc"ud559:code:`<br/>` 08: "uc815"uce58:code:`<br/>` 09:
                              "uad6d"uc81c:code:`<br/>` 10: "uc0ac"ud68c:code:`<br/>` 11:
                              "uc0dd"ud65c/"ubb38"ud654:code:`<br/>` 00:
                              "uc624"ud53c"ub2c8"uc5b8:code:`<br/>` 12: "uc2a4"ud3ec"uce20:code:`<br/>`
                              20: "uc5f0"uc608:code:`<br/>` 18: "ubcf4"ub3c4"uc790"ub8cc:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>4 :
                              "uc774"ub370"uc77c"ub9ac</u></b>`:code:`<br/>` B1:
                              "ucc44"uad8c"uc2dc"ud669:code:`<br/>` B2:
                              "uc2e0"uc885"ucc44"uad8c:code:`<br/>` F1:
                              "uc678"ud658"uc2dc"ud669:code:`<br/>` G1:
                              "ubcf4"ub3c4"uc790"ub8cc:code:`<br/>` H1:
                              "uc815"ucc45"ub274"uc2a4:code:`<br/>` H2:
                              "uae08"uc735"ub274"uc2a4:code:`<br/>` H3:
                              "uae08"uc735"uae08"ub9ac/"uc218"uc775"uc728:code:`<br/>` I1:
                              IPO"ub274"uc2a4:code:`<br/>` J1: "ub274"uc695:code:`<br/>` J2:
                              "uc544"uc2dc"uc544/"uc720"ub7fd:code:`<br/>` J3:
                              "uc6d4"ub4dc"ub9c8"ucf13:code:`<br/>` J4:
                              "uad6d"uc81c"uae30"uc5c5/"uc0b0"uc5c5:code:`<br/>` J5:
                              "uacbd"uc81c"ud750"ub984:code:`<br/>` L1:
                              "uae30"uc5c5"ub274"uc2a4:code:`<br/>` L2: IT:code:`<br/>` L3:
                              "ubca4"ucc98:code:`<br/>` L4: e3"ube44"uc988"uc6d4"ub4dc:code:`<br/>` S1:
                              "uc8fc"uc2dd"uc2dc"ud669:code:`<br/>` S2: "uac70"ub798"uc18c:code:`<br/>`
                              S3: "ucf54"uc2a4"ub2e5&"uc7a5"uc678:code:`<br/>` S4:
                              "ub8e8"uba38:code:`<br/>` S5: "uc99d"uad8c"uac00:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>5 :
                              "uba38"ub2c8"ud22c"ub370"uc774</u></b>`:code:`<br/>` A01:
                              "uc8fc"uc2dd:code:`<br/>` A02: "uc120"ubb3c"uc635"uc158:code:`<br/>` A05:
                              "ud574"uc678"uc99d"uc2dc:code:`<br/>` A06: "uc678"ud658:code:`<br/>` A07:
                              "ucc44"uad8c:code:`<br/>` A08: "ud380"ub4dc:code:`<br/>` B01:
                              "uacbd"uc81c:code:`<br/>` B02: "uc0b0"uc5c5:code:`<br/>` B03:
                              "uc815"ubcf4"uacfc"ud559:code:`<br/>` B04: "uad6d"uc81c:code:`<br/>` B05:
                              "uae08"uc735"ubcf4"ud5d8:code:`<br/>` B07:
                              "ubd80"ub3d9"uc0b0:code:`<br/>` B08: "uc131"uacf5"ud559:code:`<br/>` B09:
                              "uc7ac"ud14c"ud06c:code:`<br/>` B10: "ubc14"uc774"uc624:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>6 :
                              "uc5f0"ud569"ub274"uc2a4</u></b>`:code:`<br/>` 01:
                              "uc815"uce58:code:`<br/>` 02: "uacbd"uc81c:code:`<br/>` 03:
                              "uc99d"uad8c/"uae08"uc735:code:`<br/>` 04: "uc0b0"uc5c5:code:`<br/>` 05:
                              "uc0ac"ud68c:code:`<br/>` 06: "uc0ac"uac74"uc0ac"uace0:code:`<br/>` 07:
                              "ubb38"ud654:code:`<br/>` 08: "uc0dd"ud65c"uac74"uac15:code:`<br/>` 09:
                              IT. "uacfc"ud559:code:`<br/>` 10: "ubd81"ud55c:code:`<br/>` 11:
                              "uad6d"uc81c:code:`<br/>` 12: "uc2a4"ud3ec"uce20:code:`<br/>` 13:
                              "uae30"ud0c0:code:`<br/>` :code:`<br/>` :code:`<b><u>7 :
                              "uc778"ud3ec"uc2a4"ud0c1</u></b>`:code:`<br/>` 01:
                              "uac70"ub798"uc18c"uc885"ubaa9:code:`<br/>` 02:
                              "ucf54"uc2a4"ub2e5"uc885"ubaa9:code:`<br/>` 03:
                              "ud574"uc678"uc99d"uc2dc:code:`<br/>` 04:
                              "uc120"ubb3c"ub3d9"ud5a5:code:`<br/>` 00: "uae30"ud0c0:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>8 :
                              "uc544"uc2dc"uc544"uacbd"uc81c</u></b>`:code:`<br/>` A0:
                              "uc99d"uad8c:code:`<br/>` B0: "uae08"uc735:code:`<br/>` C0:
                              "ubd80"ub3d9"uc0b0:code:`<br/>` D0: "uc0b0"uc5c5:code:`<br/>` E0:
                              "uacbd"uc81c:code:`<br/>` F0: "uc815"uce58,"uc0ac"ud68c:code:`<br/>` G0:
                              "uc0ac"uc124,"uce7c"ub7fc:code:`<br/>` H0:
                              "uc778"uc0ac,"ub3d9"uc815,"ubd80"uace0:code:`<br/>` I0:
                              "ub8e8"uba38&"ud329"ud2b8:code:`<br/>` J0:
                              "uad6d"ub0b4"ub274"uc2a4:code:`<br/>` K0:
                              "uc544"uc2dc"uc544"uc2dc"uac01:code:`<br/>` L0: "uace8"ud504:code:`<br/>`
                              M0: "ubaa8"ub2dd"ube0c"ub9ac"ud551:code:`<br/>` N0:
                              "uc5f0"uc608:code:`<br/>` 10: "uad6d"uc81c:code:`<br/>` 20:
                              "uc911"uad6d:code:`<br/>` 30: "uc778"ub3c4:code:`<br/>` 40:
                              "uc77c"ubcf8:code:`<br/>` 50: "uc774"uba38"uc9d5"ub9c8"ucf13:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>9 : "ub274"uc2a4"ud54c</u></b>`:code:`<br/>`
                              01: "uc8fc"uc2dd:code:`<br/>` 02: "ucc44"uad8c:code:`<br/>` 03:
                              "uc678"ud658:code:`<br/>` 04: "uad6d"uc81c:code:`<br/>` 05:
                              "uae08"uc735/"uc81c"ud14c"ud06c:code:`<br/>` 06:
                              "uc0b0"uc5c5:code:`<br/>` 07: "uacbd"uc81c:code:`<br/>` 08:
                              "uad11"uc7a5:code:`<br/>` 09: "uc804"ubb38"uac00"uae30"uace0:code:`<br/>`
                              90: "uae30"ud0c0:code:`<br/>` :code:`<br/>` :code:`<b><u>A :
                              "ub9e4"uc77c"uacbd"uc81c</u></b>`:code:`<br/>` 01:
                              "uacbd"uc81c:code:`<br/>` 02: "uae08"uc735:code:`<br/>` 03:
                              "uc0b0"uc5c5/"uae30"uc5c5:code:`<br/>` 04:
                              "uc911"uae30/"ubca4"uccd0/"uacfc"uae30:code:`<br/>` 05:
                              "uc99d"uad8c:code:`<br/>` 06: "ubd80"ub3d9"uc0b0:code:`<br/>` 07:
                              "uc815"uce58:code:`<br/>` 08: "uc0ac"ud68c:code:`<br/>` 09:
                              "uc778"ubb3c/"ub3d9"uc815:code:`<br/>` 10: "uad6d"uc81c:code:`<br/>` 11:
                              "ubb38"ud654:code:`<br/>` 12:
                              "ub808"uc800/"uc2a4"ud3ec"uce20:code:`<br/>` 13:
                              "uc0ac"uc124/"uce7c"ub7fc:code:`<br/>` 14:
                              "uae30"ud68d/"ubd84"uc11d:code:`<br/>` 15: "uc139"uc158:code:`<br/>` 16:
                              English News:code:`<br/>` 17:
                              "ub9e4"uacbd"uc774"ucf54"ub178"ubbf8:code:`<br/>` 18: mbn:code:`<br/>`
                              90: "uae30"ud0c0:code:`<br/>` :code:`<br/>` :code:`<b><u>B :
                              "ud5e4"ub7f4"ub4dc"uacbd"uc81c</u></b>`:code:`<br/>` 01:
                              "ub274"uc2a4:code:`<br/>` 02: "uae30"uc5c5:code:`<br/>` 03:
                              "uc7ac"ud14c"ud06c:code:`<br/>` 04: "uc2a4"ud0c0:code:`<br/>` 05:
                              "ubb38"ud654:code:`<br/>` 90: "uae30"ud0c0:code:`<br/>` :code:`<br/>`
                              :code:`<b><u>C : "ud30c"uc774"ub0b8"uc15c</u></b>`:code:`<br/>` 01:
                              "uc99d"uad8c:code:`<br/>` 02: "uae08"uc735:code:`<br/>` 03:
                              "ubd80"ub3d9"uc0b0:code:`<br/>` 04: "uc0b0"uc5c5:code:`<br/>` 05:
                              "uacbd"uc81c:code:`<br/>` 06: "uc815"ubcf4"uacfc"ud559:code:`<br/>` 07:
                              "uc720"ud1b5:code:`<br/>` 08: "uad6d"uc81c:code:`<br/>` 09:
                              "uc815"uce58:code:`<br/>` 10: "uc804"uad6d/"uc0ac"ud68c:code:`<br/>` 11:
                              "ubb38"ud654:code:`<br/>` 12: "uc2a4"ud3ec"uce20:code:`<br/>` 13:
                              "uad50"uc721:code:`<br/>` 14: "ud53c"ud50c:code:`<br/>` 15:
                              "uc0ac"uc124/"uceec"ub7fc:code:`<br/>` 16:
                              "uae30"ud68d/"uc5f0"uc7ac:code:`<br/>` 17:
                              fn"uc7ac"ud14c"ud06c:code:`<br/>` 18: "uad11"uace0:code:`<br/>` 90:
                              "uae30"ud0c0:code:`<br/>` :code:`<br/>` :code:`<b><u>D :
                              "uc774"ud22c"ub370"uc774</u></b>`:code:`<br/>` 21:
                              "uc99d"uad8c:code:`<br/>` 51: "uae08"uc735:code:`<br/>` 22:
                              "uc815"uce58/"uc815"ucc45:code:`<br/>` 31:
                              "uae00"ub85c"ubc8c:code:`<br/>` 23: "uc0b0"uc5c5:code:`<br/>` 24:
                              "ubd80"ub3d9"uc0b0:code:`<br/>` 26: "ub77c"uc774"ud504:code:`<br/>` 25:
                              "uce7c"ub7fc/"uc778"ubb3c:code:`<br/>` 41:
                              "uc5f0"uc608/"uc2a4"ud3ec"uce20:code:`<br/>` 90:
                              "uae30"ud0c0:code:`<br/>` :code:`<br/>` :code:`<b><u>S :
                              "ucee8"uc288"uba38"ud0c0"uc784"uc2a4</u></b>`:code:`<br/>`
                              3:01:"uc885"ud569:code:`<br/>`
                              3:02:"ud30c"uc774"ub0b8"uc15c"ucee8"uc288"uba38:code:`<br/>`
                              3:03:"ucee8"uc288"uba38"ub9ac"ubdf0:code:`<br/>`
                              3:04:"uc815"uce58,"uc0ac"ud68c:code:`<br/>`
                              3:05:"uc2a4"ud3ec"uce20,"uc5f0"uc608:code:`<br/>`
                              3:06:"ucee8"uc288"uba38"ubdf0"ud2f0:code:`<br/>`
                              3:07:"uc624"ud53c"ub2c8"uc5b8:code:`<br/>` 3:09:"uae30"ud0c0:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>U : "uc11c"uc6b8
                              "uacbd"uc81c</u></b>`:code:`<br/>` 31: "uc99d"uad8c:code:`<br/>` 32:
                              "ubd80"ub3d9"uc0b0:code:`<br/>` 33:
                              "uacbd"uc81c/"uae08"uc735:code:`<br/>` 34:
                              "uc0b0"uc5c5/"uae30"uc5c5:code:`<br/>` 35: IT/"uacfc"ud559:code:`<br/>`
                              36: "uc815"uce58:code:`<br/>` 37: "uc0ac"ud68c:code:`<br/>` 38:
                              "uad6d"uc81c:code:`<br/>` 39: "uce7c"ub7fc:code:`<br/>` 3A:
                              "uc778"uc0ac/"ub3d9"uc815/"ubd80"uc74c:code:`<br/>` 3B:
                              "ubb38"ud654/"uac74"uac15/"ub808"uc800:code:`<br/>` 3C:
                              "uace8"ud504/"uc2a4"ud3ec"uce20:code:`<br/>` :code:`<br/>` :code:`<b><u>V
                              : "uc870"uc120 "uacbd"uc81c</u></b>`:code:`<br/>`
                              3:1:"ub274"uc2a4:code:`<br/>` 3:2:Market:code:`<br/>`
                              3:4:"ubd80"ub3d9"uc0b0:code:`<br/>`
                              3:6:"uae00"ub85c"ubc8c"uacbd"uc81c:code:`<br/>`
                              3:8:"uc704"ud074"ub9ac"ube44"uc988:code:`<br/>`
                              3:B:"uc790"ub3d9"ucc28:code:`<br/>` 3:C:"ub179"uc0c9BIZ:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>X :
                              CEO"uc2a4"ucf54"uc5b4</u></b>`:code:`<br/>` 01: "uacbd"uc81c:code:`<br/>`
                              02: "uc0b0"uc5c5:code:`<br/>` 03: "uae08"uc735:code:`<br/>` 04:
                              "uacf5"uae30"uc5c5:code:`<br/>` 05: "uc804"uc790:code:`<br/>` 06:
                              "ud1b5"uc2e0:code:`<br/>` 07:
                              "uac8c"uc784,"uc778"ud130"ub137:code:`<br/>` 08:
                              "uc790"ub3d9"ucc28:code:`<br/>` 09:
                              "uc870"uc120,"ucca0"uac15:code:`<br/>` 10:
                              "uc2dd"uc74c"ub8cc:code:`<br/>` 11: "uc720"ud1b5:code:`<br/>` 12:
                              "uac74"uc124:code:`<br/>` 13: "uc81c"uc57d:code:`<br/>` 14:
                              "ud654"ud559,"uc5d0"ub108"uc9c0:code:`<br/>` 15:
                              "uc0dd"ud65c"uc0b0"uc5c5:code:`<br/>` 16: "uae30"ud0c0:code:`<br/>`
                              :code:`<br/>` :code:`<b><u>Y : "uc774"ud504"ub80c"ub4dc Air
                              "ub274"uc2a4</u></b>`:code:`<br/>` 01:
                              "uc885"ubaa9"uc0c1"ub2f4:code:`<br/>` 02: VOD:code:`<br/>` :code:`<br/>`
                              :code:`<b><u>Z :
                              "uc778"ubca0"uc2a4"ud2b8"uc870"uc120</u></b>`:code:`<br/>` 01:
                              "uc99d"uad8c/"uae08"uc735:code:`<br/>` :code:`<br/>` :code:`<b><u>d :
                              NSP"ud1b5"uc2e0</u></b>`:code:`<br/>` 11: IT/"uacfc"ud559:code:`<br/>`
                              12: "uae08"uc735/"uc99d"uad8c:code:`<br/>` 13:
                              "ubd80"ub3d9"uc0b0:code:`<br/>` 14: "uc790"ub3d9"ucc28:code:`<br/>` 15:
                              "uc5f0"uc608/"ubb38"ud654:code:`<br/>` 16:
                              "uc0dd"ud65c"uacbd"uc81c:code:`<br/>` 17:
                              "ubb3c"ub958/"uc720"ud1b5:code:`<br/>` 18:
                              "uc778"uc0ac/"ub3d9"uc815:code:`<br/>` 19:
                              "uc815"uce58/"uc0ac"ud68c:code:`<br/>` 20: "uae30"uc5c5:code:`<br/>` 21:
                              "uc758"ud559/"uac74"uac15:code:`<br/>` 23:
                              "uc2e0"uc0c1"ud488/"ub9ac"ubdf0:code:`<br/>` 24:
                              "ud574"uba85/"ubc18"ub860:code:`<br/>` :code:`<br/>` :code:`<b><u>a :
                              IRGO</u></b>`:code:`<br/>` 10:IR"uc815"ubcf4:code:`<br/>`
                              20:IR"uc77c"uc815:code:`<br/>` 50:IR FOCUS:code:`<br/>` :code:`<br/>`
                              :code:`<b><u>F : "uac70"ub798"uc18c, G : "ucf54"uc2a4"ub2e5, N:
                              "ucf54"ub125"uc2a4</u></b>`:code:`<br/>` 01:
                              "uc218"uc2dc"uacf5"uc2dc:code:`<br/>` 02:
                              "uacf5"uc815"uacf5"uc2dc:code:`<br/>` 03:
                              "uc2dc"uc7a5"uc870"uce58:code:`<br/>` 04:
                              "uc2e0"uace0"uc0ac"ud56d:code:`<br/>` 05:
                              "uc815"uae30"uacf5"uc2dc:code:`<br/>` 06:
                              "ud2b9"uc218"uacf5"uc2dc:code:`<br/>` 07:
                              "ubc1c"ud589"uacf5"uc2dc:code:`<br/>` 08:
                              "uc9c0"ubd84"uacf5"uc2dc:code:`<br/>` 09:
                              "uc6cc"ub7f0"ud2b8"uacf5"uc2dc:code:`<br/>` 10:
                              "uc758"uacb0"uad8c"ud589"uc0ac"uacf5"uc2dc:code:`<br/>` 11:
                              "uacf5"uc815"uc704"uacf5"uc2dc:code:`<br/>` 12:
                              "uc120"ubb3c"uc2dc"uc7a5"uacf5"uc2dc:code:`<br/>` A1:
                              "uc2dc"uc7a5"uc870"uce58"uc548"ub0b4:code:`<br/>` A2:
                              "uc0c1"uc7a5"uc548"ub0b4:code:`<br/>` A3:
                              "uc548"ub0b4"uc0ac"ud56d:code:`<br/>` A4:
                              "ud22c"uc790"uc720"uc758"uc0ac"ud56d:code:`<br/>` A5:
                              "uc218"uc775"uc99d"uad8c:code:`<br/>` A6:
                              "ud22c"uc790"uc790"ucc38"uace0"uc0ac"ud56d:code:`<br/>` A7:
                              "ubba4"uce04"uc5bc"ud380"ub4dc:code:`<br/>`.
                            "news_ofer_entp_code": "str"  # Optional. "ub274"uc2a4
                              "uc81c"uacf5 "uc5c5"uccb4 "ucf54"ub4dc  2 : "ud55c"uacbd
                              news:code:`<br/>` 3 : "uc0ac"uc6a9"uc548"ud568:code:`<br/>` 4 :
                              "uc774"ub370"uc77c"ub9ac:code:`<br/>` 5 :
                              "uba38"ub2c8"ud22c"ub370"uc774:code:`<br/>` 6 :
                              "uc5f0"ud569"ub274"uc2a4:code:`<br/>` 7 :
                              "uc778"ud3ec"uc2a4"ud0c1:code:`<br/>` 8 :
                              "uc544"uc2dc"uc544"uacbd"uc81c:code:`<br/>` 9 :
                              "ub274"uc2a4"ud54c:code:`<br/>` A : "ub9e4"uc77c"uacbd"uc81c:code:`<br/>`
                              B : "ud5e4"ub7f4"ub4dc"uacbd"uc81c:code:`<br/>` C :
                              "ud30c"uc774"ub0b8"uc15c:code:`<br/>` D :
                              "uc774"ud22c"ub370"uc774:code:`<br/>` F :
                              "uc7a5"ub0b4"uacf5"uc2dc:code:`<br/>` G :
                              "ucf54"uc2a4"ub2e5"uacf5"uc2dc:code:`<br/>` H :
                              "ud504"ub9ac"ubcf4"ub4dc"uacf5"uc2dc:code:`<br/>` I :
                              "uae30"ud0c0"uacf5"uc2dc:code:`<br/>` N :
                              "ucf54"ub125"uc2a4"uacf5"uc2dc:code:`<br/>` J : "ub3d9"ud5a5:code:`<br/>`
                              K : "uccad"uc57d"uc548"ub0b4 "uc804"uc1a1:code:`<br/>` M : "ud0c0"uc0ac
                              "ucd94"ucc9c"uc885"ubaa9:code:`<br/>` O : edaily fx:code:`<br/>` S :
                              "ucee8"uc288"uba38"ud0c0"uc784"uc2a4:code:`<br/>` U : "uc11c"uc6b8
                              "uacbd"uc81c:code:`<br/>` V : "uc870"uc120 "uacbd"uc81c:code:`<br/>` X :
                              CEO"uc2a4"ucf54"uc5b4:code:`<br/>` Y : "uc774"ud504"ub80c"ub4dc Air
                              "ub274"uc2a4:code:`<br/>` Z :
                              "uc778"ubca0"uc2a4"ud2b8"uc870"uc120:code:`<br/>` a : IRGO:code:`<br/>` d
                              : NSP"ud1b5"uc2e0:code:`<br/>`.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_index_news_title_request(
            fid_news_ofer_entp_code=fid_news_ofer_entp_code,
            fid_cond_mrkt_cls_code=fid_cond_mrkt_cls_code,
            fid_input_iscd=fid_input_iscd,
            fid_titl_cntt=fid_titl_cntt,
            fid_input_date1=fid_input_date1,
            fid_input_hour1=fid_input_hour1,
            fid_rank_sort_cls_code=fid_rank_sort_cls_code,
            fid_input_srno=fid_input_srno,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_balance_sheet(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST66430100",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 대차대조표.

        국내주식 대차대조표 API입니다.

        한국투자 HTS(eFriend Plus) > [0635] 재무분석종합 화면의 하단 '1. 대차대조표' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         000660: 종목코드. Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: 분류 구분 코드

         0: 년, 1: 분기. Known values are: "0" and "1". Required.
        :paramtype fid_div_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST66430100 : 국내주식 대차대조표. "FHKST66430100" Default value is "FHKST66430100".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         J. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "cfp_surp": "str",  # Optional. "uc790"ubcf8 "uc789"uc5ec"uae08,
                          "ucd9c"ub825"ub418"uc9c0 "uc54a"ub294 "ub370"uc774"ud130(99.99"ub85c
                          "ud45c"uc2dc).
                        "cpfn": "str",  # Optional. "uc790"ubcf8"uae08.
                        "cras": "str",  # Optional. "uc720"ub3d9"uc790"uc0b0.
                        "fix_lblt": "str",  # Optional. "uace0"uc815"ubd80"ucc44.
                        "flow_lblt": "str",  # Optional. "uc720"ub3d9"ubd80"ucc44.
                        "fxas": "str",  # Optional. "uace0"uc815"uc790"uc0b0.
                        "prfi_surp": "str",  # Optional. "uc774"uc775 "uc789"uc5ec"uae08,
                          "ucd9c"ub825"ub418"uc9c0 "uc54a"ub294 "ub370"uc774"ud130(99.99"ub85c
                          "ud45c"uc2dc).
                        "stac_yymm": "str",  # Optional. "uacb0"uc0b0 "ub144"uc6d4.
                        "total_aset": "str",  # Optional. "uc790"uc0b0"ucd1d"uacc4.
                        "total_cptl": "str",  # Optional. "uc790"ubcf8"ucd1d"uacc4.
                        "total_lblt": "str"  # Optional. "ubd80"ucc44"ucd1d"uacc4.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_balance_sheet_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_income_statement(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST66430200",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 손익계산서.

        국내주식 손익계산서 API입니다.

        한국투자 HTS(eFriend Plus) > [0635] 재무분석종합 화면의 하단 '2. 손익계산서' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         000660: 종목코드. Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: 분류 구분 코드

         0: 년, 1: 분기. Known values are: "0" and "1". Required.
        :paramtype fid_div_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST66430200 : 국내주식 손익계산서. "FHKST66430200" Default value is "FHKST66430200".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         J. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "bsop_non_ernn": "str",  # Optional. "uc601"uc5c5 "uc678
                          "uc218"uc775.
                        "bsop_non_expn": "str",  # Optional. "uc601"uc5c5 "uc678
                          "ube44"uc6a9.
                        "bsop_prti": "str",  # Optional. "uc601"uc5c5 "uc774"uc775.
                        "depr_cost": "str",  # Optional. "uac10"uac00"uc0c1"uac01"ube44.
                        "op_prfi": "str",  # Optional. "uacbd"uc0c1 "uc774"uc775.
                        "sale_account": "str",  # Optional. "ub9e4"ucd9c"uc561.
                        "sale_cost": "str",  # Optional. "ub9e4"ucd9c "uc6d0"uac00.
                        "sale_totl_prfi": "str",  # Optional. "ub9e4"ucd9c "ucd1d
                          "uc774"uc775.
                        "sell_mang": "str",  # Optional. "ud310"ub9e4 "ubc0f
                          "uad00"ub9ac"ube44.
                        "spec_loss": "str",  # Optional. "ud2b9"ubcc4 "uc190"uc2e4.
                        "spec_prfi": "str",  # Optional. "ud2b9"ubcc4 "uc774"uc775.
                        "stac_yymm": "str",  # Optional. "uacb0"uc0b0 "ub144"uc6d4.
                        "thtr_ntin": "str"  # Optional. "ub2f9"uae30"uc21c"uc774"uc775.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_income_statement_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_ratio(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST66430300",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 재무비율.

        국내주식 재무비율 API입니다.

        한국투자 HTS(eFriend Plus) > [0635] 재무분석종합 화면의 우측의 '재무 비율' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         000660: 종목코드. Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: 분류 구분 코드

         0: 년, 1: 분기. Known values are: "0" and "1". Required.
        :paramtype fid_div_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST66430300 : 국내주식 재무비율. "FHKST66430300" Default value is "FHKST66430300".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         J. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "bps": "str",  # Optional. BPS.
                        "bsop_prfi_inrt": "str",  # Optional. "uc601"uc5c5 "uc774"uc775
                          "uc99d"uac00"uc728.
                        "eps": "str",  # Optional. EPS.
                        "grs": "str",  # Optional. "ub9e4"ucd9c"uc561 "uc99d"uac00"uc728.
                        "lblt_rate": "str",  # Optional. "ubd80"ucc44 "ube44"uc728.
                        "ntin_inrt": "str",  # Optional. "uc21c"uc774"uc775
                          "uc99d"uac00"uc728.
                        "roe_val": "str",  # Optional. ROE "uac12.
                        "rsrv_rate": "str",  # Optional. "uc720"ubcf4 "ube44"uc728.
                        "sps": "str",  # Optional. "uc8fc"ub2f9"ub9e4"ucd9c"uc561.
                        "stac_yymm": "str"  # Optional. "uacb0"uc0b0 "ub144"uc6d4.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_ratio_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_profit_ratio(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST66430400",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 수익성비율.

        국내주식 수익성비율 API입니다.

        한국투자 HTS(eFriend Plus) > [0635] 재무분석종합 화면의 하단 '4. 수익성비율' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         000660: 종목코드. Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: 분류 구분 코드

         0: 년, 1: 분기. Known values are: "0" and "1". Required.
        :paramtype fid_div_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST66430400 : 국내주식 수익성비율. "FHKST66430400" Default value is "FHKST66430400".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         J. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "cptl_ntin_rate": "str",  # Optional. "ucd1d"uc790"ubcf8
                          "uc21c"uc774"uc775"uc728.
                        "sale_ntin_rate": "str",  # Optional. "ub9e4"ucd9c"uc561
                          "uc21c"uc774"uc775"uc728.
                        "sale_totl_rate": "str",  # Optional. "ub9e4"ucd9c"uc561
                          "ucd1d"uc774"uc775"uc728.
                        "self_cptl_ntin_inrt": "str",  # Optional. "uc790"uae30"uc790"ubcf8
                          "uc21c"uc774"uc775"uc728.
                        "stac_yymm": "str"  # Optional. "uacb0"uc0b0 "ub144"uc6d4.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_profit_ratio_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_other_major_ratio(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST66430500",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 기타주요비율.

        국내주식 기타주요비율 API입니다.

        한국투자 HTS(eFriend Plus) > [0635] 재무분석종합 화면의 하단 '9. 기타주요비율' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         000660: 종목코드. Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: 분류 구분 코드

         0: 년, 1: 분기. Known values are: "0" and "1". Required.
        :paramtype fid_div_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST66430500 : 국내주식 기타주요비율. "FHKST66430500" Default value is "FHKST66430500".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         J. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "ebitda": "str",  # Optional. EBITDA.
                        "ev_ebitda": "str",  # Optional. EV_EBITDA.
                        "eva": "str",  # Optional. EVA.
                        "payout_rate": "str",  # Optional. "ubc30"ub2f9 "uc131"ud5a5.
                        "stac_yymm": "str"  # Optional. "uacb0"uc0b0 "ub144"uc6d4.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_other_major_ratio_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_stability_ratio(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST66430600",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 안정성비율.

        국내주식 안정성비율 API입니다.

        한국투자 HTS(eFriend Plus) > [0635] 재무분석종합 화면의 하단 '5. 안정성비율' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         000660: 종목코드. Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: 분류 구분 코드

         0: 년, 1: 분기. Known values are: "0" and "1". Required.
        :paramtype fid_div_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST66430600 : 국내주식 대차대조표. "FHKST66430600" Default value is "FHKST66430600".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         J. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "bram_depn": "str",  # Optional. "ucc28"uc785"uae08
                          "uc758"uc874"ub3c4.
                        "crnt_rate": "str",  # Optional. "uc720"ub3d9 "ube44"uc728.
                        "lblt_rate": "str",  # Optional. "ubd80"ucc44 "ube44"uc728.
                        "quck_rate": "str",  # Optional. "ub2f9"uc88c "ube44"uc728.
                        "stacc_yymm": "str"  # Optional. "uacb0"uc0b0 "ub144"uc6d4.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_stability_ratio_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_growth_ratio(
        self,
        *,
        fid_input_iscd: str,
        fid_div_cls_code: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "FHKST66430800",
        fid_cond_mrkt_div_code: str = "J",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 성장성비율.

        국내주식 성장성비율 API입니다.

        한국투자 HTS(eFriend Plus) > [0635] 재무분석종합 화면의 하단 '7.성장성비율' 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을
        이해하기 쉽습니다.

        :keyword fid_input_iscd: FID 입력 종목코드

         000660: 종목코드. Required.
        :paramtype fid_input_iscd: str
        :keyword fid_div_cls_code: 분류 구분 코드

         0: 년, 1: 분기. Known values are: "0" and "1". Required.
        :paramtype fid_div_cls_code: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         FHKST66430800 : 국내주식 성장성비율. "FHKST66430800" Default value is "FHKST66430800".
        :paramtype tr_id: str
        :keyword fid_cond_mrkt_div_code: 조건 시장 분류 코드

         J. "J" Default value is "J".
        :paramtype fid_cond_mrkt_div_code: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output": {
                        "bsop_prfi_inrt": "str",  # Optional. "uc601"uc5c5 "uc774"uc775
                          "uc99d"uac00"uc728.
                        "equt_inrt": "str",  # Optional. "uc790"uae30"uc790"ubcf8
                          "uc99d"uac00"uc728.
                        "grs": "str",  # Optional. "ub9e4"ucd9c"uc561 "uc99d"uac00"uc728.
                        "stac_yymm": "str",  # Optional. "uacb0"uc0b0 "ub144"uc6d4.
                        "totl_aset_inrt": "str"  # Optional. "ucd1d"uc790"uc0b0
                          "uc99d"uac00"uc728.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_growth_ratio_request(
            fid_input_iscd=fid_input_iscd,
            fid_div_cls_code=fid_div_cls_code,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            fid_cond_mrkt_div_code=fid_cond_mrkt_div_code,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_financial_estimate_perform(
        self,
        *,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKST668300C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """국내주식 종목추정실적.

        국내주식 종목추정실적 API입니다.

        한국투자 HTS(eFriend Plus) > [0613] 종목추정실적 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 본 화면의 추정실적 및 투자의견은 당월 초의 애널리스트의 의견사항이므로 월중 변동 사항이 있을 수 있음을 유의하시기 바랍니다.:code:`<br/>`
        ※ 종목별 수익추정은 리서치본부에서 매월 발표되는 거래소, 코스닥 160여개 기업에 한정합니다. 구체적인 종목 리스트는 추정종목리스트를 참고하기 바랍니다.

        :keyword sht_cd: 종목코드 (ex, 005930). Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKST668300C0 : 국내주식 종목추정실적. "HHKST668300C0" Default value is "HHKST668300C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "capital": "str",  # Optional. "uc790"ubcf8"uae08.
                        "estdate": "str",  # Optional. "ucd94"uc815"uc77c"uc790.
                        "forn_item_lmtrt": "str",  # Optional. "ud589"uc0ac"uac00.
                        "item_kor_nm": "str",  # Optional. HTS"ud55c"uae00"uc885"ubaa9"uba85.
                        "name1": "str",  # Optional. "uc791"uc131"uc7901.
                        "name2": "str",  # Optional. "uc791"uc131"uc7902.
                        "rcmd_name": "str",  # Optional. "uc758"uacac.
                        "sht_cd": "str"  # Optional. ELW"ub2e8"ucd95"uc885"ubaa9"ucf54"ub4dc.
                    },
                    "output2": [
                        {
                            "data1": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data2": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data3": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data4": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data5": "str"  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                        }
                    ],
                    "output3": [
                        {
                            "data1": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data2": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data3": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data4": "str",  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                            "data5": "str"  # Optional.
                              "uacb0"uc0b0"uc5f0"uc6d4(outblock4) "ucc38"uc870.
                        }
                    ],
                    "output4": [
                        {
                            "dt": "str"  # Optional. "uacb0"uc0b0"ub144"uc6d4.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_financial_estimate_perform_request(
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_dividend_info(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        high_gb: str,
        gb1: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669102C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (배당일정).

        예탁원정보(배당일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0658] 배당 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.
        '주식배당지급일'은 배당주식의 주식교부일자를 말합니다. 배당주식의 계좌입고는 배당주식 상장일인데 일반적으로 주권교부일의 익영업일입니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword high_gb: 고배당구분코드

         0:배당전체:code:`<br/>`
         1:결산배당:code:`<br/>`
         2:중간배당. Known values are: "0", "1", and "2". Required.
        :paramtype high_gb: str
        :keyword gb1: 배당구분코드

         0:배당전체:code:`<br/>`
         1:결산배당:code:`<br/>`
         2:중간배당. Known values are: "0", "1", and "2". Required.
        :paramtype gb1: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669102C0 : 예탁원정보 (배당일정). "HHKDB669102C0" Default value is "HHKDB669102C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "divi_kind": "str",  # Optional. "ubc30"ub2f9"uc885"ub958.
                            "divi_pay_dt": "str",  # Optional.
                              "ubc30"ub2f9"uae08"uc9c0"uae09"uc77c.
                            "divi_rate": "str",  # Optional.
                              "ud604"uae08"ubc30"ub2f9"ub960(%).
                            "face_val": "str",  # Optional. "uc561"uba74"uac00.
                            "high_divi_gb": "str",  # Optional.
                              "uace0"ubc30"ub2f9"uc885"ubaa9"uc5ec"ubd80.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "odd_pay_dt": "str",  # Optional.
                              "ub2e8"uc8fc"ub300"uae08"uc9c0"uae09"uc77c.
                            "per_sto_divi_amt": "str",  # Optional.
                              "ud604"uae08"ubc30"ub2f9"uae08.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "stk_div_pay_dt": "str",  # Optional.
                              "uc8fc"uc2dd"ubc30"ub2f9"uc9c0"uae09"uc77c.
                            "stk_divi_rate": "str",  # Optional.
                              "uc8fc"uc2dd"ubc30"ub2f9"ub960(%).
                            "stk_kind": "str"  # Optional. "uc8fc"uc2dd"uc885"ub958.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_dividend_info_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            high_gb=high_gb,
            gb1=gb1,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_purchase_request(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669103C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (주식매수청구일정).

        예탁원정보(주식매수청구일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0663] 주식매수청구 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669103C0 : 예탁원정보 (주식매수청구일정). "HHKDB669103C0" Default value is "HHKDB669103C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "buy_amt_pay_dt": "str",  # Optional.
                              "ub9e4"uc218"ub300"uae08"uc9c0"uae09"uc77c.
                            "buy_req_price": "str",  # Optional.
                              "ub9e4"uc218"uccad"uad6c"uac00"uaca9.
                            "buy_req_rcpt_term": "str",  # Optional.
                              "ub9e4"uc218"uccad"uad6c"uc811"uc218"uc2dc"ud55c.
                            "get_meet_dt": "str",  # Optional. "uc8fc"ucd1d"uc77c.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "opp_opi_rcpt_term": "str",  # Optional.
                              "ubc18"ub300"uc758"uc0ac"uc811"uc218"uc2dc"ud55c.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "stk_kind": "str"  # Optional. "uc8fc"uc2dd"uc885"ub958.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_purchase_request_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_merger_and_split(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669104C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (합병/분할일정).

        예탁원정보(합병/분할일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0664] 합병/분할 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669104C0 : 예탁원정보 (합병/분할일정). "HHKDB669104C0" Default value is "HHKDB669104C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "cust_cd": "str",  # Optional.
                              "ud569"ubcd1("ubd84"ud560)"ud68c"uc0ac"ucf54"ub4dc.
                            "cust_nm": "str",  # Optional.
                              "ud569"ubcd1("ubd84"ud560)"ud68c"uc0ac"uba85.
                            "issue_stk_qty": "str",  # Optional.
                              "ubc1c"ud589"ud560"uc8fc"uc2dd.
                            "list_dt": "str",  # Optional.
                              "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                            "merge_rate": "str",  # Optional. "ube44"uc728.
                            "merge_type": "str",  # Optional. "ud569"ubcd1"uc0ac"uc720.
                            "odd_amt_pay_dt": "str",  # Optional.
                              "ub2e8"uc8fc"ub300"uae08"uc9c0"uae09"uc77c.
                            "opp_cust_cd": "str",  # Optional.
                              "ud53c"ud569"ubcd1("ud53c"ubd84"ud560)"ud68c"uc0ac"ucf54"ub4dc.
                            "opp_cust_nm": "str",  # Optional.
                              "ud53c"ud569"ubcd1("ud53c"ubd84"ud560)"ud68c"uc0ac"uba85.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "seq": "str",  # Optional. "uc5f0"ubc88.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "td_stop_dt": "str",  # Optional.
                              "ub9e4"ub9e4"uac70"ub798"uc815"uc9c0"uae30"uac04.
                            "tot_issue_stk_qty": "str"  # Optional.
                              "ubc1c"ud589"uc8fc"uc2dd.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_merger_and_split_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_change_par_value(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        market_gb: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669105C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (액면교체일정).

        예탁원정보(액면교체일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0657] 액면교체 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword market_gb: 시장구분

         0: 전체, 1: 코스피, 2: 코스닥. Known values are: "0", "1", and "2". Required.
        :paramtype market_gb: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669105C0 : 예탁원정보 (액면교체일정). "HHKDB669105C0" Default value is "HHKDB669105C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "inter_af_face_amt": "str",  # Optional.
                              "ubcc0"uacbd"ud6c4"uc561"uba74"uac00.
                            "inter_bf_face_amt": "str",  # Optional.
                              "ubcc0"uacbd"uc804"uc561"uba74"uac00.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "list_dt": "str",  # Optional.
                              "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "td_stop_dt": "str"  # Optional.
                              "ub9e4"ub9e4"uac70"ub798"uc815"uc9c0"uae30"uac04.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_change_par_value_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            market_gb=market_gb,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_decrease_capital(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669106C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (자본감소일정).

        예탁원정보(자본감소일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0665] 자본감소 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669106C0 : 예탁원정보 (자본감소일정). "HHKDB669106C0" Default value is "HHKDB669106C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "comp_way": "str",  # Optional. "uacc4"uc0b0"ubc29"ubc95.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "list_dt": "str",  # Optional.
                              "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "reduce_cap_rate": "str",  # Optional.
                              "uac10"uc790"ubc30"uc815"uc728.
                            "reduce_cap_type": "str",  # Optional.
                              "uac10"uc790"uad6c"ubd84.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "stk_kind": "str",  # Optional. "uc8fc"uc2dd"uc885"ub958.
                            "td_stop_dt": "str"  # Optional.
                              "ub9e4"ub9e4"uac70"ub798"uc815"uc9c0"uae30"uac04.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_decrease_capital_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_list_info(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669107C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (상장정보일정).

        예탁원정보(상장정보일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0666] 상장정보 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669107C0 : 예탁원정보 (상장정보일정). "HHKDB669107C0" Default value is "HHKDB669107C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "issue_price": "str",  # Optional. "ubc1c"ud589"uac00.
                            "issue_stk_qty": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "issue_type": "str",  # Optional. "uc0ac"uc720.
                            "list_dt": "str",  # Optional.
                              "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "stk_kind": "str",  # Optional. "uc8fc"uc2dd"uc885"ub958.
                            "tot_issue_stk_qty": "str"  # Optional.
                              "ucd1d"ubc1c"ud589"uc8fc"uc2dd"uc218.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_list_info_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_public_offer_subscription(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669108C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (공모주청약일정).

        예탁원정보(공모주청약일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0667] 공모주청약 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669108C0 : 예탁원정보 (공모주청약일정). "HHKDB669108C0" Default value is "HHKDB669108C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "assign_stk_qty": "str",  # Optional.
                              "ub2f9"uc0ac"ubc30"uc815"ubb3c"ub7c9.
                            "face_value": "str",  # Optional. "uc561"uba74"uac00.
                            "fix_subscr_pri": "str",  # Optional. "uacf5"ubaa8"uac00.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "lead_mgr": "str",  # Optional. "uc8fc"uac04"uc0ac.
                            "list_dt": "str",  # Optional.
                              "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                            "pay_dt": "str",  # Optional. "ub0a9"uc785"uc77c.
                            "pub_af_cap": "str",  # Optional.
                              "uacf5"ubaa8"ud6c4"uc790"ubcf8"uae08.
                            "pub_bf_cap": "str",  # Optional.
                              "uacf5"ubaa8"uc804"uc790"ubcf8"uae08.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "refund_dt": "str",  # Optional. "ud658"ubd88"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "subscr_dt": "str"  # Optional. "uccad"uc57d"uae30"uac04.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_public_offer_subscription_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_forfeited_stock(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669109C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (실권주일정).

        예탁원정보(실권주일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0668] 실권주 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669109C0 : 예탁원정보 (실권주일정). "HHKDB669109C0" Default value is "HHKDB669109C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "lead_mgr": "str",  # Optional. "uc8fc"uac04"uc0ac.
                            "list_dt": "str",  # Optional.
                              "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "refund_dt": "str",  # Optional. "ud658"ubd88"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "subscr_dt": "str",  # Optional. "uccad"uc57d"uc77c.
                            "subscr_price": "str",  # Optional. "uacf5"ubaa8"uac00.
                            "subscr_stk_qty": "str"  # Optional.
                              "uacf5"ubaa8"uc8fc"uc2dd"uc218.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_forfeited_stock_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_mandatory_deposit(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669110C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (의무예치일정).

        예탁원정보(의무예치일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0758] 의무예치 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669110C0 : 예탁원정보 (의무예치일정). "HHKDB669110C0" Default value is "HHKDB669110C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "depo_date": "str",  # Optional. "uc608"uce58"uc77c.
                            "depo_reason": "str",  # Optional. "uc0ac"uc720.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "stk_qty": "str",  # Optional. "uc8fc"uc2dd"uc218.
                            "tot_issue_qty_per_rate": "str"  # Optional.
                              "ucd1d"ubc1c"ud589"uc8fc"uc2dd"uc218"ub300"ube44"ube44"uc728(%).
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_mandatory_deposit_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_right_issue(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        gb1: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669100C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (유상증자일정).

        예탁원정보(유상증자일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0655] 유상증자 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword gb1: 조회구분

         1: 청약일별, 2: 기준일별. Known values are: "1" and "2". Required.
        :paramtype gb1: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669100C0 : 예탁원정보 (유상증자일정). "HHKDB669100C0" Default value is "HHKDB669100C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "disc_rate": "str",  # Optional. "ud560"uc778"uc728.
                            "fix_price": "str",  # Optional.
                              "ubc1c"ud589"uc608"uc815"uac00.
                            "fix_rate": "str",  # Optional.
                              "ud655"uc815"ubc30"uc815"uc728.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "issue_stk_qty": "str",  # Optional.
                              "ubc1c"ud589"ud560"uc8fc"uc2dd.
                            "list_date": "str",  # Optional.
                              "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "right_dt": "str",  # Optional. "uad8c"ub9ac"ub77d"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "stk_kind": "str",  # Optional. "uc8fc"uc2dd"uc885"ub958.
                            "sub_term": "str",  # Optional. "uccad"uc57d"uae30"uac04.
                            "sub_term_ft": "str",  # Optional. "uccad"uc57d"uae30"uac04.
                            "tot_issue_stk_qty": "str"  # Optional.
                              "ubc1c"ud589"uc8fc"uc2dd.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_right_issue_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            gb1=gb1,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_bonus_issue(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669101C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (무상증자일정).

        예탁원정보(무상증자일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0656] 무상증자 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669101C0 : 예탁원정보 (무상증자일정). "HHKDB669101C0" Default value is "HHKDB669101C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": {
                        "fix_rate": "str",  # Optional. "ud655"uc815"ubc30"uc815"uc728.
                        "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                        "issue_stk_qty": "str",  # Optional. "ubc1c"ud589"ud560"uc8fc"uc2dd.
                        "list_date": "str",  # Optional. "uc0c1"uc7a5/"ub4f1"ub85d"uc77c.
                        "odd_pay_dt": "str",  # Optional.
                          "ub2e8"uc8fc"ub300"uae08"uc9c0"uae09"uc77c.
                        "odd_rec_price": "str",  # Optional. "ub2e8"uc8fc"uae30"uc900"uac00.
                        "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                        "right_dt": "str",  # Optional. "uad8c"ub9ac"ub77d"uc77c.
                        "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                        "stk_kind": "str",  # Optional. "uc8fc"uc2dd"uc885"ub958.
                        "tot_issue_stk_qty": "str"  # Optional. "ubc1c"ud589"uc8fc"uc2dd.
                    },
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_bonus_issue_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_ksd_shareholder_meeting(
        self,
        *,
        cts: str = "",
        f_dt: str,
        t_dt: str,
        sht_cd: str,
        personalseckey: Optional[str] = None,
        tr_cont: str = "",
        custtype: str = "P",
        seq_no: Optional[str] = None,
        mac_address: Optional[str] = None,
        phone_number: Optional[str] = None,
        ip_address: Optional[str] = None,
        hashkey: Optional[str] = None,
        gt_uid: Optional[str] = None,
        tr_id: str = "HHKDB669111C0",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """예탁원정보 (주주총회일정).

        예탁원정보(주주총회일정) API입니다.

        한국투자 HTS(eFriend Plus) > [0759] 주주총회 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 예탁원에서 제공한 자료이므로 정보용으로만 사용하시기 바랍니다.

        :keyword cts: CTS (공백). Required. Default value is "".
        :paramtype cts: str
        :keyword f_dt: 조회일자From (YYYYMMDD)

         일자 ~. Required.
        :paramtype f_dt: str
        :keyword t_dt: 조회일자To (YYYYMMDD)

         ~ 일자. Required.
        :paramtype t_dt: str
        :keyword sht_cd: 종목코드

         공백: 전체, 특정종목 조회시 : 종목코드. Required.
        :paramtype sht_cd: str
        :keyword personalseckey: 고객 식별키

         [법인 필수] 제휴사 회원 관리를 위한 고객식별키. Default value is None.
        :paramtype personalseckey: str
        :keyword tr_cont: 연속 거래 여부

         공백 : 초기 조회:code:`<br/>`
         N: 다음 데이터 조회 (output header의 tr_cont가 M일 경우). Default value is "".
        :paramtype tr_cont: str
        :keyword custtype: 고객타입

         B : 법인:code:`<br/>`
         P : 개인. Known values are: "B" and "P". Default value is "P".
        :paramtype custtype: str
        :keyword seq_no: 일련번호

         [법인 필수] 001. Default value is None.
        :paramtype seq_no: str
        :keyword mac_address: 맥주소

         법인고객 혹은 개인고객의 Mac address 값. Default value is None.
        :paramtype mac_address: str
        :keyword phone_number: 핸드폰번호

         [법인 필수] 제휴사APP을 사용하는 경우 사용자(회원) 핸드폰번호:code:`<br/>`
         ex) 01011112222 (하이픈 등 구분값 제거). Default value is None.
        :paramtype phone_number: str
        :keyword ip_address: 접속 단말 공인 IP

         [법인 필수] 사용자(회원)의 IP Address. Default value is None.
        :paramtype ip_address: str
        :keyword hashkey: 해쉬키

         [POST API 대상] Client가 요청하는 Request Body를 hashkey api로 생성한 Hash값:code:`<br/>`


         * API문서 > hashkey 참조. Default value is None.
        :paramtype hashkey: str
        :keyword gt_uid: Global UID

         [법인 필수] 거래고유번호로 사용하므로 거래별로 UNIQUE해야 함. Default value is None.
        :paramtype gt_uid: str
        :keyword tr_id: 거래ID

         모의투자 미지원:code:`<br/>`
         HHKDB669111C0 : 예탁원정보 (주주총회일정). "HHKDB669111C0" Default value is "HHKDB669111C0".
        :paramtype tr_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "msg1": "str",  # Optional. "uc751"ub2f5"uba54"uc2dc"uc9c0.
                    "msg_cd": "str",  # Optional. "uc751"ub2f5"ucf54"ub4dc.
                    "output1": [
                        {
                            "agenda": "str",  # Optional. "uc8fc"ucd1d"uc758"uc548.
                            "gen_meet_dt": "str",  # Optional. "uc8fc"ucd1d"uc77c"uc790.
                            "gen_meet_type": "str",  # Optional.
                              "uc8fc"ucd1d"uc0ac"uc720.
                            "isin_name": "str",  # Optional. "uc885"ubaa9"uba85.
                            "record_date": "str",  # Optional. "uae30"uc900"uc77c.
                            "sht_cd": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "vote_tot_qty": "str"  # Optional.
                              "uc758"uacb0"uad8c"uc8fc"uc2dd"ucd1d"uc218.
                        }
                    ],
                    "rt_cd": "str"  # Optional. "uc131"uacf5 "uc2e4"ud328 "uc5ec"ubd80  0:
                      "uc131"uacf5:code:`<br/>` 0 "uc774"uc678"uc758 "uac12: "uc2e4"ud328.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ksd_shareholder_meeting_request(
            cts=cts,
            f_dt=f_dt,
            t_dt=t_dt,
            sht_cd=sht_cd,
            personalseckey=personalseckey,
            tr_cont=tr_cont,
            custtype=custtype,
            seq_no=seq_no,
            mac_address=mac_address,
            phone_number=phone_number,
            ip_address=ip_address,
            hashkey=hashkey,
            gt_uid=gt_uid,
            tr_id=tr_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize(
            "str", response.headers.get("content-type")
        )
        response_headers["tr_id"] = self._deserialize(
            "str", response.headers.get("tr_id")
        )
        response_headers["tr_cont"] = self._deserialize(
            "str", response.headers.get("tr_cont")
        )
        response_headers["gt_uid"] = self._deserialize(
            "str", response.headers.get("gt_uid")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_technical_foreign_institution_total(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내기관_외국인 매매종목가집계.

        국내기관_외국인 매매종목가집계 API입니다.

        증권사 직원이 장중에 집계/입력한 자료를 단순 누계한 수치로서,:code:`<br/>`
        입력시간은 외국인 09:30, 11:20, 13:20, 14:30 / 기관종합 10:00, 11:20, 13:20, 14:30 이며, 사정에 따라 변동될 수 있습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_foreign_institution_total_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_personal_search(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """종목조건검색 목록조회.

        HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API입니다.:code:`<br/>`
        종목조건검색 목록조회 API(/uapi/domestic-stock/v1/quotations/psearch-title)의 output인 'seq'을 종목조건검색조회
        API(/uapi/domestic-stock/v1/quotations/psearch-result)의 input으로 사용하시면 됩니다.

        ※ 시스템 안정성을 위해 API로 제공되는 조건검색 결과의 경우 조건당 100건으로 제한을 둔 점 양해 부탁드립니다.

        ※ [0110] 화면의 '대상변경' 설정사항은 HTS [0110] 사용자 조건검색 화면에만 적용됨에 유의 부탁드립니다.

        ※ '조회가 계속 됩니다. (다음을 누르십시오.)' 오류 발생 시 해결방법:code:`<br/>`
        → HTS(efriend Plus) [0110] 조건검색 화면에서 조건을 등록하신 후, 왼쪽 하단의 "사용자조건 서버저장" 클릭하셔서 등록한 조건들을 서버로 보낸 후 다시
        API 호출 시도 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_personal_search_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_personal_search_detail(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """종목조건검색 조회.

        HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API입니다.:code:`<br/>`
        종목조건검색 목록조회 API(/uapi/domestic-stock/v1/quotations/psearch-title)의 output인 'seq'을 종목조건검색조회
        API(/uapi/domestic-stock/v1/quotations/psearch-result)의 input으로 사용하시면 됩니다.

        ※ 시스템 안정성을 위해 API로 제공되는 조건검색 결과의 경우 조건당 100건으로 제한을 둔 점 양해 부탁드립니다.

        ※ [0110] 화면의 '대상변경' 설정사항은 HTS [0110] 사용자 조건검색 화면에만 적용됨에 유의 부탁드립니다.

        ※ '조회가 계속 됩니다. (다음을 누르십시오.)' 오류 발생 시 해결방법:code:`<br/>`
        → HTS(efriend Plus) [0110] 조건검색 화면에서 조건을 등록하신 후, 왼쪽 하단의 "사용자조건 서버저장" 클릭하셔서 등록한 조건들을 서버로 보낸 후 다시
        API 호출 시도 부탁드립니다.

        ※ {"rt_cd":"1","msg_cd":"MCA05918","msg1":"종목코드 오류입니다."} 메시지 발생 이유:code:`<br/>`
        → 조건검색 결과 검색된 종목이 0개인 경우 위 응답값을 수신하게 됩니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_personal_search_detail_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_program_trade_by_stock(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """종목별 프로그램매매추이(체결).

        국내주식 종목별 프로그램매매추이(체결) API입니다.

        한국투자 HTS(eFriend Plus) > [0465] 종목별 프로그램 매매추이 화면(혹은 한국투자 MTS > 국내 현재가 > 기타수급 > 프로그램) 의 기능을 API로
        개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_program_trade_by_stock_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_investor_trend_estimate(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """종목별 외인기관 추정가집계.

        국내주식 종목별 외국인, 기관 추정가집계 API입니다.

        한국투자 MTS > 국내 현재가 > 투자자 > 투자자동향 탭 > 왼쪽구분을 '추정(주)'로 선택 시 확인 가능한 데이터를 API로 개발한 사항으로, 해당 화면을 참고하시면
        기능을 이해하기 쉽습니다.

        증권사 직원이 장중에 집계/입력한 자료를 단순 누계한 수치로서,
        입력시간은 외국인 09:30, 11:20, 13:20, 14:30 / 기관종합 10:00, 11:20, 13:20, 14:30 이며, 사정에 따라 변동될 수 있습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_investor_trend_estimate_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_trade_daily_volume(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """종목별일별매수매도체결량.

        종목별일별매수매도체결량 API입니다. 실전계좌의 경우, 한 번의 호출에 최대 100건까지 확인 가능합니다.:code:`<br/>`
        국내주식 종목의 일별 매수체결량, 매도체결량 데이터를 확인할 수 있습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_trade_daily_volume_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_investor_trend_by_market(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """시장별 투자자매매동향.

        시장별 투자자매매동향(시세성) API입니다.

        한국투자 HTS(eFriend Plus) > [0403] 시장별 시간동향 의 상단 표 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_investor_trend_by_market_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_credit_balance_daily(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 신용잔고 일별추이.

        국내주식 신용잔고 일별추이 API입니다.:code:`<br/>`
        한국투자 HTS(eFriend Plus) > [0476] 국내주식 신용잔고 일별추이 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        한 번의 호출에 최대 30건 확인 가능하며, fid_input_date_1 을 입력하여 다음 조회가 가능합니다.

        ※ 상환수량은 "매도상환수량+현금상환수량"의 합계 수치입니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_credit_balance_daily_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_expected_conclusion_trend(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 예상체결가 추이.

        국내주식 예상체결가 추이 API입니다.:code:`<br/>`
        한국투자 HTS(eFriend Plus) > [0184] 예상체결지수 추이 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_expected_conclusion_trend_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_short_sale_daily(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 공매도 일별추이.

        국내주식 공매도 일별추이 API입니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_short_sale_daily_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_program_trade_daily(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 프로그램매매 종합현황(일별).

        국내주식 프로그램매매 종합현황(일별) API입니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_program_trade_daily_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_over_time_exp_fluctuation_rate(  # pylint: disable=inconsistent-return-statements,name-too-long
        self, **kwargs: Any
    ) -> None:
        """국내주식 시간외 예상체결 등락률.

        국내주식 시간외예상체결등락률 API입니다.

        한국투자 HTS(eFriend Plus) > [0236] 시간외 예상체결등락률 화면의 기능을 API로 개발한 사항으로,:code:`<br/>`
        해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_kis_get_technical_over_time_exp_fluctuation_rate_request(
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_program_trade_today(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """프로그램매매 종합현황(시간).

        프로그램매매 종합현황(시간) API입니다.:code:`<br/>`
        한국투자 HTS(eFriend Plus) > [0460] 프로그램매매 종합현황 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        ※ 장시간(09:00~15:30) 동안의 최근 30분간의 데이터 확인이 가능하며, 다음조회가 불가합니다.:code:`<br/>`
        ※ 장시간(09:00~15:30) 이후에는 bsop_hour 에 153000 ~ 170000 까지의 시간데이터가 출력되지만 데이터는 모두 동일한 장마감 데이터인 점 유의
        부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_program_trade_today_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_foreign_trade_estimate(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 외국계 매매종목 가집계.

        외국계 매매종목 가집계 API입니다.

        한국투자 HTS(eFriend Plus) > [0430] 외국계 매매종목 가집계 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_foreign_trade_estimate_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_foreign_purchase_trend(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 종목별 외국계 순매수추이.

        종목별 외국계 순매수추이 API입니다.

        한국투자 HTS(eFriend Plus) > [0433] 종목별 외국계 순매수추이 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_foreign_purchase_trend_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_trade_by_amount(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 체결금액별 매매비중.

        국내주식 체결금액별 매매비중 API입니다.

        한국투자 HTS(eFriend Plus) > [0135] 체결금액별 매매비중 화면의 "상단 표" 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_trade_by_amount_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_market_fund(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내 증시자금 종합.

        국내 증시자금 종합 API입니다.

        한국투자 HTS(eFriend Plus) > [0470] 증시자금 종합 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다. (단위:
        억원)

        ※ 해당자료는 금융투자협회의 자료를 제공하고 있으며, 오류와 지연이 발생할 수 있습니다.:code:`<br/>`
        ※ 위 정보에 의한 투자판단의 최종책임은 정보이용자에게 있으며, 당사와 한국금융투자협회는 어떠한 법적인 책임도 지지 않사오니 투자에 참고로만 이용하시기 바랍니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_market_fund_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_investor_trend_by_market_daily(  # pylint: disable=inconsistent-return-statements,name-too-long
        self, **kwargs: Any
    ) -> None:
        """국내주식 시장별 투자자매매동향(일별).

        시장별 투자자매매동향(일별) API입니다.

        한국투자 HTS(eFriend Plus) > [0404] 시장별 일별동향 의 상단 표 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_kis_get_technical_investor_trend_by_market_daily_request(
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_program_trade_by_stock_daily(  # pylint: disable=inconsistent-return-statements,name-too-long
        self, **kwargs: Any
    ) -> None:
        """국내주식 종목별 프로그램매매추이(일별).

        국내주식 종목별 프로그램매매추이(일별) API입니다.

        한국투자 HTS(eFriend Plus) > [0465] 종목별 프로그램 매매추이 화면(혹은 한국투자 MTS > 국내 현재가 > 기타수급 > 프로그램) 의 "일자별" 클릭
        시 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_kis_get_technical_program_trade_by_stock_daily_request(
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_program_trend_by_investor_today(  # pylint: disable=inconsistent-return-statements,name-too-long
        self, **kwargs: Any
    ) -> None:
        """국내주식 프로그램매매 투자자매매동향.

        프로그램매매 투자자매매동향(당일) API입니다.

        한국투자 HTS(eFriend Plus) > [0466] 프로그램매매 투자자별 동향 화면 의 "당일동향" 표의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면
        기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = (
            build_gen_open_kis_get_technical_program_trend_by_investor_today_request(
                headers=_headers,
                params=_params,
            )
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_capture_up_low_price(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 상하한가 포착.

        국내주식 상하한가 포착 API입니다.

        한국투자 HTS(eFriend Plus) > [0917] 실시간 상하한가 포착 화면 의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_capture_up_low_price_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_volume_profile_indicator(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 매물대/거래비중.

        국내주식 매물대/거래비중 API입니다.

        한국투자 HTS(eFriend Plus) > [0113] 당일가격대별 매물대 화면의 데이터 중 일부를 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_volume_profile_indicator_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_technical_member_trend_daily(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 현재가 회원사 종목매매동향.

        주식현재가 회원사 종목매매동향 API입니다.

        한국투자 HTS(eFriend Plus) > [0454] 증권사 종목매매동향 화면을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_technical_member_trend_daily_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_volume(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 거래량순위.

        국내주식 거래량순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0171] 거래량 순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.:code:`<br/>`

        30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고 있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        HTS [0110]에서 여러가지 조건을 설정할 수 있는데, 그 중 거래량 순위(ex. 0봉전 거래량 상위순 100종목) 에 대해서도 설정해서 종목을 검색할 수
        있습니다.:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_volume_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_fluctuation_rate(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 등락률 순위.

        국내주식 등락률 순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0170] 등락률 순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_fluctuation_rate_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_profit_asset_index(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 수익률/자산지표 순위.

        국내주식 수익자산지표 순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0173] 수익자산지표 순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_profit_asset_index_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_market_cap(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 시가총액 상위.

        국내주식 시가총액 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0174] 시가총액 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_market_cap_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_financial_ratio(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 재무비율 순위.

        국내주식 재무비율 순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0175] 재무비율순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_financial_ratio_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_after_hour_balance(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 시간외잔량 순위.

        국내주식 시간외잔량 순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0176] 시간외잔량 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_after_hour_balance_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_prefer_disparate_ratio(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 우선주/괴리율 상위.

        국내주식 우선주/괴리율 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0177] 우선주/괴리율 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_prefer_disparate_ratio_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_quote_balance(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 호가잔량 순위.

        국내주식 호가잔량 순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0172] 호가잔량 순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_quote_balance_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_disparity(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 이격도 순위.

        국내주식 이격도 순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0178] 이격도 순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_disparity_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_market_value(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 시장가치 순위.

        국내주식 시장가치 순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0179] 시장가치순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_market_value_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_volume_power(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 체결강도 순위.

        국내주식 체결강도 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0168] 체결강도 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_volume_power_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_top_interest_stock(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 관심종목등록 상위.

        국내주식 관심종목등록 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0180] 관심종목등록상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_top_interest_stock_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_expected_conclusion_up_down(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 예상체결 상승/하락 상위.

        국내주식 예상체결 상승/하락상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0182] 예상체결 상승/하락상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_expected_conclusion_up_down_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_trade_by_company(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 당사매매순위 상위.

        국내주식 당사매매종목 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0186] 당사매매종목 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_trade_by_company_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_near_new_high_low(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 신고가/신저가 근접종목 상위.

        국내주식 신고/신저근접종목 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0187] 신고/신저 근접종목 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_near_new_high_low_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_bulk_trans_num(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 대량체결건수 상위.

        국내주식 대량체결건수 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0169] 대량체결건수 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기
        쉽습니다.:code:`<br/>`
        최대 30건 확인 가능하며, 다음 조회가 불가합니다.

        ※ 30건 이상의 목록 조회가 필요한 경우, 대안으로 종목조건검색 API를 이용해서 원하는 종목 100개까지 검색할 수 있는 기능을 제공하고
        있습니다.:code:`<br/>`
        종목조건검색 API는 HTS(efriend Plus) [0110] 조건검색에서 등록 및 서버저장한 나의 조건 목록을 확인할 수 있는 API로,:code:`<br/>`
        자세한 사용 방법은 공지사항 - [조건검색 필독] 조건검색 API 이용안내 참고 부탁드립니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_bulk_trans_num_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_short_sale(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 공매도 상위종목.

        공매도 상위종목 API입니다.

        한국투자 HTS(eFriend Plus) > [0482] 공매도 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_short_sale_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_credit_balance(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 신용잔고 상위.

        국내주식 신용잔고 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0475] 신용잔고 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_credit_balance_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_dividend_rate(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 배당률 상위.

        국내주식 배당률 상위 API입니다.

        한국투자 HTS(eFriend Plus) > [0188] 배당률 상위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_dividend_rate_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_over_time_fluctuation_rate(  # pylint: disable=inconsistent-return-statements
        self, **kwargs: Any
    ) -> None:
        """국내주식 시간외등락률 순위.

        국내주식 시간외등락율순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0234] 시간외 등락률순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_over_time_fluctuation_rate_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_ranking_over_time_volume(
        self, **kwargs: Any
    ) -> None:  # pylint: disable=inconsistent-return-statements
        """국내주식 시간외거래량 순위.

        국내주식 시간외거래량순위 API입니다.

        한국투자 HTS(eFriend Plus) > [0235] 시간외 거래량순위 화면의 기능을 API로 개발한 사항으로, 해당 화면을 참고하시면 기능을 이해하기 쉽습니다.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_gen_open_kis_get_ranking_over_time_volume_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore
