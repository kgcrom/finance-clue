# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/python@6.13.15)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, Optional, Type, TypeVar, cast

from azure.core.exceptions import ClientAuthenticationError
from azure.core.exceptions import HttpResponseError
from azure.core.exceptions import ResourceExistsError
from azure.core.exceptions import ResourceNotFoundError
from azure.core.exceptions import ResourceNotModifiedError
from azure.core.exceptions import map_error
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest
from azure.core.rest import HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import GenOpenKrxClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import (
        MutableMapping,  # type: ignore  # pylint: disable=ungrouped-imports
    )
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]
]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_gen_open_krx_get_krx_daily_index_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/idx/krx_dd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kospi_daily_index_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/idx/kospi_dd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kosdaq_daily_index_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/idx/kosdaq_dd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_bond_daily_index_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/idx/bon_dd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_derivatives_daily_index_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/idx/drvprod_dd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kospi_stock_daily_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/sto/stk_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kosdaq_stock_daily_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/sto/ksq_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_konex_stock_daily_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/sto/knx_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kospi_base_info_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/sto/stk_isu_base_info"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kosdaq_base_info_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/sto/ksq_isu_base_info"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_konex_base_info_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/sto/knx_isu_base_info"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_etf_daily_trade_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/etp/etf_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_etn_daily_trade_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/etp/etn_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_elw_daily_trade_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/etp/elw_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kts_daily_trade_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/bon/kts_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_bond_daily_trade_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/bon/bnd_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_small_bond_daily_trade_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/bon/smb_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_exclude_stock_futures_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/drv/fut_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kospi_futures_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/drv/eqsfu_stk_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kosdaq_futures_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/drv/eqkfu_ksq_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_exclude_stock_option_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/drv/opt_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kospi_option_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/drv/eqsop_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


def build_gen_open_krx_get_kosdaq_option_request(  # pylint: disable=name-too-long
    *, bas_dd: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/svc/apis/drv/eqkop_bydd_trd"

    # Construct parameters
    _params["basDd"] = _SERIALIZER.query("bas_dd", bas_dd, "str", pattern=r"^\d{8}$")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET", url=_url, params=_params, headers=_headers, **kwargs
    )


class GenOpenKrxClientOperationsMixin(
    GenOpenKrxClientMixinABC
):  # pylint: disable=too-many-public-methods

    @distributed_trace
    def get_krx_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """KRX 시리즈 일별시세정보.

        KRX 시리즈 지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "MKTCAP": "str",  # Optional.
                              "uc0c1"uc7a5"uc2dc"uac00"ucd1d"uc561.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_krx_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kospi_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """KOSPI 시리즈 일별시세정보.

        KOSPI 시리즈 지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "MKTCAP": "str",  # Optional.
                              "uc0c1"uc7a5"uc2dc"uac00"ucd1d"uc561.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kospi_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kosdaq_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """KOSDAQ 시리즈 일별시세정보.

        KOSDAQ 시리즈 지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "MKTCAP": "str",  # Optional.
                              "uc0c1"uc7a5"uc2dc"uac00"ucd1d"uc561.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kosdaq_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_bond_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """채권지수 시세정보.

        채권지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "AVG_CONVEXITY_PRC": "str",  # Optional.
                              "ucee8"ubca1"uc2dc"ud2f0.
                            "AVG_DURATION": "str",  # Optional. "ub4c0"ub808"uc774"uc158.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "BND_IDX_AVG_YD": "str",  # Optional. YTM.
                            "BND_IDX_GRP_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "CALL_REINVST_IDX": "str",  # Optional.
                              "ucf5c"uc7ac"ud22c"uc790"uc9c0"uc218_"uc885"uac00.
                            "CALL_REINVST_IDX_CMPPREVDD": "str",  # Optional.
                              "ucf5c"uc7ac"ud22c"uc790"uc9c0"uc218_"ub300"ube44.
                            "NETPRC_IDX": "str",  # Optional.
                              "uc21c"uac00"uaca9"uc9c0"uc218_"uc885"uac00.
                            "NETPRC_IDX_CMPPREVDD": "str",  # Optional.
                              "uc21c"uac00"uaca9"uc9c0"uc218_"ub300"ube44.
                            "TOT_EARNG_IDX": "str",  # Optional.
                              "ucd1d"uc218"uc775"uc9c0"uc218_"uc885"uac00.
                            "TOT_EARNG_IDX_CMPPREVDD": "str",  # Optional.
                              "ucd1d"uc218"uc775"uc9c0"uc218_"ub300"ube44.
                            "ZERO_REINVST_IDX": "str",  # Optional.
                              "uc81c"ub85c"uc7ac"ud22c"uc790"uc9c0"uc218_"uc885"uac00.
                            "ZERO_REINVST_IDX_CMPPREVDD": "str"  # Optional.
                              "uc81c"ub85c"uc7ac"ud22c"uc790"uc9c0"uc218_"ub300"ube44.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_bond_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_derivatives_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """파생상품지수 시세정보.

        파생상품지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_derivatives_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kospi_stock_daily(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """유가증권 일별매매정보.

        유가증권시장에 상장되어 있는 주권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                            "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                            "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                            "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                            "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kospi_stock_daily_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kosdaq_stock_daily(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """코스닥 일별매매정보.

        코스닥시장에 상장되어 있는 주권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                            "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                            "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                            "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                            "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kosdaq_stock_daily_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_konex_stock_daily(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """코넥스 일별매매정보.

        코넥스시장에 상장되어 있는 주권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                            "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                            "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                            "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                            "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_konex_stock_daily_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kospi_base_info(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """유가증권 종목 기본정보.

        유가증권 종목 기본정보.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ISU_ABBRV": "str",  # Optional. "uc885"ubaa9"uc57d"uba85.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_ENG_NM": "str",  # Optional. "uc601"ubb38
                              "uc885"ubaa9"uba85.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "ISU_SRT_CD": "str",  # Optional. "ub2e8"ucd95"ucf54"ub4dc.
                            "KIND_STKCERT_TP_NM": "str",  # Optional.
                              "uc8fc"uc2dd"uc885"ub958.
                            "LIST_DD": "str",  # Optional. "uc0c1"uc7a5"uc77c.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKT_TP_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "PARVAL": "str",  # Optional. "uc561"uba74"uac00.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "SECUGRP_NM": "str"  # Optional. "uc99d"uad8c"uad6c"ubd84.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kospi_base_info_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kosdaq_base_info(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """코스닥 종목 기본정보.

        코스닥 종목 기본정보.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ISU_ABBRV": "str",  # Optional. "uc885"ubaa9"uc57d"uba85.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_ENG_NM": "str",  # Optional. "uc601"ubb38
                              "uc885"ubaa9"uba85.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "ISU_SRT_CD": "str",  # Optional. "ub2e8"ucd95"ucf54"ub4dc.
                            "KIND_STKCERT_TP_NM": "str",  # Optional.
                              "uc8fc"uc2dd"uc885"ub958.
                            "LIST_DD": "str",  # Optional. "uc0c1"uc7a5"uc77c.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKT_TP_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "PARVAL": "str",  # Optional. "uc561"uba74"uac00.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "SECUGRP_NM": "str"  # Optional. "uc99d"uad8c"uad6c"ubd84.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kosdaq_base_info_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_konex_base_info(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """코넥스 기본정보.

        코넥스 종목 기본정보.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ISU_ABBRV": "str",  # Optional. "uc885"ubaa9"uc57d"uba85.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_ENG_NM": "str",  # Optional. "uc601"ubb38
                              "uc885"ubaa9"uba85.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "ISU_SRT_CD": "str",  # Optional. "ub2e8"ucd95"ucf54"ub4dc.
                            "KIND_STKCERT_TP_NM": "str",  # Optional.
                              "uc8fc"uc2dd"uc885"ub958.
                            "LIST_DD": "str",  # Optional. "uc0c1"uc7a5"uc77c.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKT_TP_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "PARVAL": "str",  # Optional. "uc561"uba74"uac00.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "SECUGRP_NM": "str"  # Optional. "uc99d"uad8c"uad6c"ubd84.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_konex_base_info_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_etf_daily_trade(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """ETF 일별매매정보.

        ETF 일별매매정보.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_IDX": "str",  # Optional. "uae30"ucd08"uc9c0"uc218 "ub300"ube44.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                    "FLUC_RT_IDX": "str",  # Optional. "uae30"ucd08"uc9c0"uc218
                      "ub4f1"ub77d"ub960.
                    "IDX_IND_NM": "str",  # Optional. "uae30"ucd08"uc9c0"uc218
                      "uc9c0"uc218"uba85.
                    "INVSTASST_NETASST_TOTAMT": "str",  # Optional.
                      "uc21c"uc790"uc0b0"uac00"uce58 "ucd1d"uc561.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "LIST_SHRS": "str",  # Optional. "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                    "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                    "NAV": "str",  # Optional. "uc21c"uc790"uc0b0"uac00"uce58.
                    "OBJ_STKPRC_IDX": "str",  # Optional. "uae30"ucd08"uc9c0"uc218 "uc885"uac00.
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_etf_daily_trade_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_etn_daily_trade(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """ETN 일별매매정보.

        ETN 일별매매정보.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_IDX": "str",  # Optional. "uae30"ucd08"uc9c0"uc218 "ub300"ube44.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                    "FLUC_RT_IDX": "str",  # Optional. "uae30"ucd08"uc9c0"uc218
                      "ub4f1"ub77d"ub960.
                    "IDX_IND_NM": "str",  # Optional. "uae30"ucd08"uc9c0"uc218
                      "uc9c0"uc218"uba85.
                    "INVSTASST_NETASST_TOTAMT": "str",  # Optional.
                      "uc21c"uc790"uc0b0"uac00"uce58 "ucd1d"uc561.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "LIST_SHRS": "str",  # Optional. "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                    "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                    "NAV": "str",  # Optional. "uc21c"uc790"uc0b0"uac00"uce58.
                    "OBJ_STKPRC_IDX": "str",  # Optional. "uae30"ucd08"uc9c0"uc218 "uc885"uac00.
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_etn_daily_trade_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_elw_daily_trade(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """ELW 일별매매정보.

        ELW 일별매매정보.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "CMPPREVDD_PRC_ULY": "str",  # Optional. "uae30"ucd08"uc790"uc0b0
                      "ub300"ube44.
                    "FLUC_RT_ULY": "str",  # Optional. "uae30"ucd08"uc790"uc0b0
                      "ub4f1"ub77d"ub960.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "LIST_SHRS": "str",  # Optional. "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                    "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str",  # Optional. "uc2dc"uac00.
                    "ULY_NM": "str",  # Optional. "uae30"ucd08"uc790"uc0b0"uba85.
                    "ULY_PRC": "str"  # Optional. "uae30"ucd08"uc790"uc0b0 "uc885"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_elw_daily_trade_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kts_daily_trade(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """국채전문유통시장 일별매매정보.

        국채전문유통시장에 상장되어있는 채권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "BND_EXP_TP_NM": "str",  # Optional. "ub9cc"uae30"ub144"uc218.
                    "CLSPRC": "str",  # Optional. "uc885"uac00.
                    "CLSPRC_YD": "str",  # Optional. "uc885"uac00 "uc218"uc775"ub960.
                    "CMPPREVDD_PRC": "str",  # Optional. "uc885"uac00 "ub300"ube44.
                    "GOVBND_ISU_TP_NM": "str",  # Optional. "uc885"ubaa9"uad6c"ubd84.
                    "HGPRC": "str",  # Optional. "uace0"uac00.
                    "HGPRC_YD": "str",  # Optional. "uace0"uac00 "uc218"uc775"ub960.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "LWPRC": "str",  # Optional. "uc800"uac00.
                    "LWPRC_YD": "str",  # Optional. "uc800"uac00 "uc218"uc775"ub960.
                    "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                    "OPNPRC": "str",  # Optional. "uc2dc"uac00.
                    "OPNPRC_YD": "str"  # Optional. "uc2dc"uac00 "uc218"uc775"ub960.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kts_daily_trade_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_bond_daily_trade(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """일반채권시장 일별매매정보.

        일반채권시장에 상장되어있는 채권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CLSPRC": "str",  # Optional. "uc885"uac00.
                    "CLSPRC_YD": "str",  # Optional. "uc885"uac00 "uc218"uc775"ub960.
                    "CMPPREVDD_PRC": "str",  # Optional. "uc885"uac00 "ub300"ube44.
                    "HGPRC": "str",  # Optional. "uace0"uac00.
                    "HGPRC_YD": "str",  # Optional. "uace0"uac00 "uc218"uc775"ub960.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "LWPRC": "str",  # Optional. "uc800"uac00.
                    "LWPRC_YD": "str",  # Optional. "uc800"uac00 "uc218"uc775"ub960.
                    "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                    "OPNPRC": "str",  # Optional. "uc2dc"uac00.
                    "OPNPRC_YD": "str"  # Optional. "uc2dc"uac00 "uc218"uc775"ub960.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_bond_daily_trade_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_small_bond_daily_trade(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """소액채권시장 일별매매정보.

        소액채권시장에 상장되어있는 채권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CLSPRC": "str",  # Optional. "uc885"uac00.
                    "CLSPRC_YD": "str",  # Optional. "uc885"uac00 "uc218"uc775"ub960.
                    "CMPPREVDD_PRC": "str",  # Optional. "uc885"uac00 "ub300"ube44.
                    "HGPRC": "str",  # Optional. "uace0"uac00.
                    "HGPRC_YD": "str",  # Optional. "uace0"uac00 "uc218"uc775"ub960.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "LWPRC": "str",  # Optional. "uc800"uac00.
                    "LWPRC_YD": "str",  # Optional. "uc800"uac00 "uc218"uc775"ub960.
                    "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                    "OPNPRC": "str",  # Optional. "uc2dc"uac00.
                    "OPNPRC_YD": "str"  # Optional. "uc2dc"uac00 "uc218"uc775"ub960.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_small_bond_daily_trade_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_exclude_stock_futures(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """선물 일별매매정보 (주식선물外).

        파생상품시장의 선물 중 주식선물을 제외한 선물의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_OPNINT_QTY": "str",  # Optional. "ubbf8"uacb0"uc81c"uc57d"uc815.
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "MKT_NM": "str",  # Optional.
                      "uc2dc"uc7a5"uad6c"ubd84("uc815"uaddc/"uc57c"uac04).
                    "PROD_NM": "str",  # Optional. "uc0c1"ud488"uad6c"ubd84.
                    "SETL_PRC": "str",  # Optional. "uc815"uc0b0"uac00.
                    "SPOT_PRC": "str",  # Optional. "ud604"ubb3c"uac00.
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_exclude_stock_futures_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kospi_futures(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """주식선물(유가) 일별매매정보.

        파생상품시장의 주식선물 중 기초자산이 유가증권시장에 속하는 주식선물의 거래정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_OPNINT_QTY": "str",  # Optional. "ubbf8"uacb0"uc81c"uc57d"uc815.
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "MKT_NM": "str",  # Optional.
                      "uc2dc"uc7a5"uad6c"ubd84("uc815"uaddc/"uc57c"uac04).
                    "PROD_NM": "str",  # Optional. "uc0c1"ud488"uad6c"ubd84.
                    "SETL_PRC": "str",  # Optional. "uc815"uc0b0"uac00.
                    "SPOT_PRC": "str",  # Optional. "ud604"ubb3c"uac00.
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kospi_futures_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kosdaq_futures(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """주식선물(코스닥) 일별매매정보.

        파생상품시장의 주식선물 중 기초자산이 코스닥시장에 속하는 주식선물의 거래정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_OPNINT_QTY": "str",  # Optional. "ubbf8"uacb0"uc81c"uc57d"uc815.
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                    "MKT_NM": "str",  # Optional.
                      "uc2dc"uc7a5"uad6c"ubd84("uc815"uaddc/"uc57c"uac04).
                    "PROD_NM": "str",  # Optional. "uc0c1"ud488"uad6c"ubd84.
                    "SETL_PRC": "str",  # Optional. "uc815"uc0b0"uac00.
                    "SPOT_PRC": "str",  # Optional. "ud604"ubb3c"uac00.
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kosdaq_futures_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_exclude_stock_option(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """옵션 일별매매정보 (주식옵션外).

        파생상품시장의 옵션 중 주식옵션을 제외한 옵션의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_OPNINT_QTY": "str",  # Optional. "ubbf8"uacb0"uc81c"uc57d"uc815.
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "IMP_VOLT": "str",  # Optional. "ub0b4"uc7ac"ubcc0"ub3d9"uc131.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "MKT_NM": "str",  # Optional.
                      "uc2dc"uc7a5"uad6c"ubd84("uc815"uaddc/"uc57c"uac04).
                    "NXTDD_BAS_PRC": "str",  # Optional. "uc775"uc77c"uc815"uc0b0"uac00.
                    "PROD_NM": "str",  # Optional. "uc0c1"ud488"uad6c"ubd84.
                    "RGHT_TP_NM": "str",  # Optional. "uad8c"ub9ac"uc720"ud615(CALL/PUT).
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_exclude_stock_option_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kospi_option(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """주식옵션(유가) 일별매매정보.

        파생상품시장의 주식옵션 중 기초자산이 유가증권시장에 속하는 주식옵션의 거래정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_OPNINT_QTY": "str",  # Optional. "ubbf8"uacb0"uc81c"uc57d"uc815.
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "IMP_VOLT": "str",  # Optional. "ub0b4"uc7ac"ubcc0"ub3d9"uc131.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "MKT_NM": "str",  # Optional.
                      "uc2dc"uc7a5"uad6c"ubd84("uc815"uaddc/"uc57c"uac04).
                    "NXTDD_BAS_PRC": "str",  # Optional. "uc775"uc77c"uc815"uc0b0"uac00.
                    "PROD_NM": "str",  # Optional. "uc0c1"ud488"uad6c"ubd84.
                    "RGHT_TP_NM": "str",  # Optional. "uad8c"ub9ac"uc720"ud615(CALL/PUT).
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kospi_option_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_kosdaq_option(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """주식옵션(코스닥) 일별매매정보.

        파생상품시장의 주식옵션 중 기초자산이 코스닥시장에 속하는 주식옵션의 거래정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ACC_OPNINT_QTY": "str",  # Optional. "ubbf8"uacb0"uc81c"uc57d"uc815.
                    "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                    "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                    "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                    "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                    "IMP_VOLT": "str",  # Optional. "ub0b4"uc7ac"ubcc0"ub3d9"uc131.
                    "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                    "MKT_NM": "str",  # Optional.
                      "uc2dc"uc7a5"uad6c"ubd84("uc815"uaddc/"uc57c"uac04).
                    "NXTDD_BAS_PRC": "str",  # Optional. "uc775"uc77c"uc815"uc0b0"uac00.
                    "PROD_NM": "str",  # Optional. "uc0c1"ud488"uad6c"ubd84.
                    "RGHT_TP_NM": "str",  # Optional. "uad8c"ub9ac"uc720"ud615(CALL/PUT).
                    "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                    "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                    "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                    "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kosdaq_option_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
