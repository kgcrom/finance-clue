# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/python@6.13.15)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, Optional, Type, TypeVar, cast

from azure.core.exceptions import ClientAuthenticationError
from azure.core.exceptions import HttpResponseError
from azure.core.exceptions import ResourceExistsError
from azure.core.exceptions import ResourceNotFoundError
from azure.core.exceptions import ResourceNotModifiedError
from azure.core.exceptions import map_error
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ..._operations._operations import (
    build_gen_open_krx_get_derivatives_daily_index_request,
)
from ..._operations._operations import build_gen_open_krx_get_bond_daily_index_request
from ..._operations._operations import build_gen_open_krx_get_konex_stock_daily_request
from ..._operations._operations import build_gen_open_krx_get_kosdaq_daily_index_request
from ..._operations._operations import build_gen_open_krx_get_kosdaq_stock_daily_request
from ..._operations._operations import build_gen_open_krx_get_kospi_daily_index_request
from ..._operations._operations import build_gen_open_krx_get_kospi_stock_daily_request
from ..._operations._operations import build_gen_open_krx_get_krx_daily_index_request
from .._vendor import GenOpenKrxClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import (
        MutableMapping,  # type: ignore  # pylint: disable=ungrouped-imports
    )
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]


class GenOpenKrxClientOperationsMixin(GenOpenKrxClientMixinABC):

    @distributed_trace_async
    async def get_krx_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """KRX 시리즈 일별시세정보.

        KRX 시리즈 지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "MKTCAP": "str",  # Optional.
                              "uc0c1"uc7a5"uc2dc"uac00"ucd1d"uc561.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_krx_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_kospi_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """KOSPI 시리즈 일별시세정보.

        KOSPI 시리즈 지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "MKTCAP": "str",  # Optional.
                              "uc0c1"uc7a5"uc2dc"uac00"ucd1d"uc561.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kospi_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_kosdaq_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """KOSDAQ 시리즈 일별시세정보.

        KOSDAQ 시리즈 지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "MKTCAP": "str",  # Optional.
                              "uc0c1"uc7a5"uc2dc"uac00"ucd1d"uc561.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kosdaq_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_bond_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """채권지수 시세정보.

        채권지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "AVG_CONVEXITY_PRC": "str",  # Optional.
                              "ucee8"ubca1"uc2dc"ud2f0.
                            "AVG_DURATION": "str",  # Optional. "ub4c0"ub808"uc774"uc158.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "BND_IDX_AVG_YD": "str",  # Optional. YTM.
                            "BND_IDX_GRP_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "CALL_REINVST_IDX": "str",  # Optional.
                              "ucf5c"uc7ac"ud22c"uc790"uc9c0"uc218_"uc885"uac00.
                            "CALL_REINVST_IDX_CMPPREVDD": "str",  # Optional.
                              "ucf5c"uc7ac"ud22c"uc790"uc9c0"uc218_"ub300"ube44.
                            "NETPRC_IDX": "str",  # Optional.
                              "uc21c"uac00"uaca9"uc9c0"uc218_"uc885"uac00.
                            "NETPRC_IDX_CMPPREVDD": "str",  # Optional.
                              "uc21c"uac00"uaca9"uc9c0"uc218_"ub300"ube44.
                            "TOT_EARNG_IDX": "str",  # Optional.
                              "ucd1d"uc218"uc775"uc9c0"uc218_"uc885"uac00.
                            "TOT_EARNG_IDX_CMPPREVDD": "str",  # Optional.
                              "ucd1d"uc218"uc775"uc9c0"uc218_"ub300"ube44.
                            "ZERO_REINVST_IDX": "str",  # Optional.
                              "uc81c"ub85c"uc7ac"ud22c"uc790"uc9c0"uc218_"uc885"uac00.
                            "ZERO_REINVST_IDX_CMPPREVDD": "str"  # Optional.
                              "uc81c"ub85c"uc7ac"ud22c"uc790"uc9c0"uc218_"ub300"ube44.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_bond_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_derivatives_daily_index(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """파생상품지수 시세정보.

        파생상품지수의 시세정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CLSPRC_IDX": "str",  # Optional. "uc885"uac00.
                            "CMPPREVDD_IDX": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "HGPRC_IDX": "str",  # Optional. "uace0"uac00.
                            "IDX_CLSS": "str",  # Optional. "uacc4"uc5f4"uad6c"ubd84.
                            "IDX_NM": "str",  # Optional. "uc9c0"uc218"uba85.
                            "LWPRC_IDX": "str",  # Optional. "uc800"uac00.
                            "OPNPRC_IDX": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_derivatives_daily_index_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_kospi_stock_daily(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """유가증권 일별매매정보.

        유가증권시장에 상장되어 있는 주권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                            "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                            "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                            "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                            "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kospi_stock_daily_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_kosdaq_stock_daily(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """코스닥 일별매매정보.

        코스닥시장에 상장되어 있는 주권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                            "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                            "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                            "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                            "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_kosdaq_stock_daily_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_konex_stock_daily(self, *, bas_dd: str, **kwargs: Any) -> JSON:
        """코넥스 일별매매정보.

        코넥스시장에 상장되어 있는 주권의 매매정보 제공.

        :keyword bas_dd: 기준일자. Required.
        :paramtype bas_dd: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "OutBlock_1": [
                        {
                            "ACC_TRDVAL": "str",  # Optional. "uac70"ub798"ub300"uae08.
                            "ACC_TRDVOL": "str",  # Optional. "uac70"ub798"ub7c9.
                            "BAS_DD": "str",  # Optional. "uae30"uc900"uc77c"uc790.
                            "CMPPREVDD_PRC": "str",  # Optional. "ub300"ube44.
                            "FLUC_RT": "str",  # Optional. "ub4f1"ub77d"ub960.
                            "ISU_CD": "str",  # Optional. "uc885"ubaa9"ucf54"ub4dc.
                            "ISU_NM": "str",  # Optional. "uc885"ubaa9"uba85.
                            "LIST_SHRS": "str",  # Optional.
                              "uc0c1"uc7a5"uc8fc"uc2dd"uc218.
                            "MKTCAP": "str",  # Optional. "uc2dc"uac00"ucd1d"uc561.
                            "MKT_NM": "str",  # Optional. "uc2dc"uc7a5"uad6c"ubd84.
                            "SECT_TP_NM": "str",  # Optional. "uc18c"uc18d"ubd80.
                            "TDD_CLSPRC": "str",  # Optional. "uc885"uac00.
                            "TDD_HGPRC": "str",  # Optional. "uace0"uac00.
                            "TDD_LWPRC": "str",  # Optional. "uc800"uac00.
                            "TDD_OPNPRC": "str"  # Optional. "uc2dc"uac00.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_gen_open_krx_get_konex_stock_daily_request(
            bas_dd=bas_dd,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
